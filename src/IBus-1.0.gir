<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.1"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <package name="glib-2.0"/>
  <namespace name="IBus"
             version="1.0"
             shared-library="libibus.so.2"
             c:prefix="IBus">
    <constant name="0" value="48">
      <type name="int"/>
    </constant>
    <constant name="1" value="49">
      <type name="int"/>
    </constant>
    <constant name="2" value="50">
      <type name="int"/>
    </constant>
    <constant name="3" value="51">
      <type name="int"/>
    </constant>
    <constant name="3270_AltCursor" value="64784">
      <type name="int"/>
    </constant>
    <constant name="3270_Attn" value="64782">
      <type name="int"/>
    </constant>
    <constant name="3270_BackTab" value="64773">
      <type name="int"/>
    </constant>
    <constant name="3270_ChangeScreen" value="64793">
      <type name="int"/>
    </constant>
    <constant name="3270_Copy" value="64789">
      <type name="int"/>
    </constant>
    <constant name="3270_CursorBlink" value="64783">
      <type name="int"/>
    </constant>
    <constant name="3270_CursorSelect" value="64796">
      <type name="int"/>
    </constant>
    <constant name="3270_DeleteWord" value="64794">
      <type name="int"/>
    </constant>
    <constant name="3270_Duplicate" value="64769">
      <type name="int"/>
    </constant>
    <constant name="3270_Enter" value="64798">
      <type name="int"/>
    </constant>
    <constant name="3270_EraseEOF" value="64774">
      <type name="int"/>
    </constant>
    <constant name="3270_EraseInput" value="64775">
      <type name="int"/>
    </constant>
    <constant name="3270_ExSelect" value="64795">
      <type name="int"/>
    </constant>
    <constant name="3270_FieldMark" value="64770">
      <type name="int"/>
    </constant>
    <constant name="3270_Ident" value="64787">
      <type name="int"/>
    </constant>
    <constant name="3270_Jump" value="64786">
      <type name="int"/>
    </constant>
    <constant name="3270_KeyClick" value="64785">
      <type name="int"/>
    </constant>
    <constant name="3270_Left2" value="64772">
      <type name="int"/>
    </constant>
    <constant name="3270_PA1" value="64778">
      <type name="int"/>
    </constant>
    <constant name="3270_PA2" value="64779">
      <type name="int"/>
    </constant>
    <constant name="3270_PA3" value="64780">
      <type name="int"/>
    </constant>
    <constant name="3270_Play" value="64790">
      <type name="int"/>
    </constant>
    <constant name="3270_PrintScreen" value="64797">
      <type name="int"/>
    </constant>
    <constant name="3270_Quit" value="64777">
      <type name="int"/>
    </constant>
    <constant name="3270_Record" value="64792">
      <type name="int"/>
    </constant>
    <constant name="3270_Reset" value="64776">
      <type name="int"/>
    </constant>
    <constant name="3270_Right2" value="64771">
      <type name="int"/>
    </constant>
    <constant name="3270_Rule" value="64788">
      <type name="int"/>
    </constant>
    <constant name="3270_Setup" value="64791">
      <type name="int"/>
    </constant>
    <constant name="3270_Test" value="64781">
      <type name="int"/>
    </constant>
    <constant name="4" value="52">
      <type name="int"/>
    </constant>
    <constant name="5" value="53">
      <type name="int"/>
    </constant>
    <constant name="6" value="54">
      <type name="int"/>
    </constant>
    <constant name="7" value="55">
      <type name="int"/>
    </constant>
    <constant name="8" value="56">
      <type name="int"/>
    </constant>
    <constant name="9" value="57">
      <type name="int"/>
    </constant>
    <constant name="A" value="65">
      <type name="int"/>
    </constant>
    <constant name="AE" value="198">
      <type name="int"/>
    </constant>
    <constant name="Aacute" value="193">
      <type name="int"/>
    </constant>
    <constant name="Abelowdot" value="16785056">
      <type name="int"/>
    </constant>
    <constant name="Abreve" value="451">
      <type name="int"/>
    </constant>
    <constant name="Abreveacute" value="16785070">
      <type name="int"/>
    </constant>
    <constant name="Abrevebelowdot" value="16785078">
      <type name="int"/>
    </constant>
    <constant name="Abrevegrave" value="16785072">
      <type name="int"/>
    </constant>
    <constant name="Abrevehook" value="16785074">
      <type name="int"/>
    </constant>
    <constant name="Abrevetilde" value="16785076">
      <type name="int"/>
    </constant>
    <constant name="AccessX_Enable" value="65136">
      <type name="int"/>
    </constant>
    <constant name="AccessX_Feedback_Enable" value="65137">
      <type name="int"/>
    </constant>
    <constant name="Acircumflex" value="194">
      <type name="int"/>
    </constant>
    <constant name="Acircumflexacute" value="16785060">
      <type name="int"/>
    </constant>
    <constant name="Acircumflexbelowdot" value="16785068">
      <type name="int"/>
    </constant>
    <constant name="Acircumflexgrave" value="16785062">
      <type name="int"/>
    </constant>
    <constant name="Acircumflexhook" value="16785064">
      <type name="int"/>
    </constant>
    <constant name="Acircumflextilde" value="16785066">
      <type name="int"/>
    </constant>
    <constant name="Adiaeresis" value="196">
      <type name="int"/>
    </constant>
    <constant name="Agrave" value="192">
      <type name="int"/>
    </constant>
    <constant name="Ahook" value="16785058">
      <type name="int"/>
    </constant>
    <constant name="Alt_L" value="65513">
      <type name="int"/>
    </constant>
    <constant name="Alt_R" value="65514">
      <type name="int"/>
    </constant>
    <constant name="Amacron" value="960">
      <type name="int"/>
    </constant>
    <constant name="Aogonek" value="417">
      <type name="int"/>
    </constant>
    <constant name="Arabic_0" value="16778848">
      <type name="int"/>
    </constant>
    <constant name="Arabic_1" value="16778849">
      <type name="int"/>
    </constant>
    <constant name="Arabic_2" value="16778850">
      <type name="int"/>
    </constant>
    <constant name="Arabic_3" value="16778851">
      <type name="int"/>
    </constant>
    <constant name="Arabic_4" value="16778852">
      <type name="int"/>
    </constant>
    <constant name="Arabic_5" value="16778853">
      <type name="int"/>
    </constant>
    <constant name="Arabic_6" value="16778854">
      <type name="int"/>
    </constant>
    <constant name="Arabic_7" value="16778855">
      <type name="int"/>
    </constant>
    <constant name="Arabic_8" value="16778856">
      <type name="int"/>
    </constant>
    <constant name="Arabic_9" value="16778857">
      <type name="int"/>
    </constant>
    <constant name="Arabic_ain" value="1497">
      <type name="int"/>
    </constant>
    <constant name="Arabic_alef" value="1479">
      <type name="int"/>
    </constant>
    <constant name="Arabic_alefmaksura" value="1513">
      <type name="int"/>
    </constant>
    <constant name="Arabic_beh" value="1480">
      <type name="int"/>
    </constant>
    <constant name="Arabic_comma" value="1452">
      <type name="int"/>
    </constant>
    <constant name="Arabic_dad" value="1494">
      <type name="int"/>
    </constant>
    <constant name="Arabic_dal" value="1487">
      <type name="int"/>
    </constant>
    <constant name="Arabic_damma" value="1519">
      <type name="int"/>
    </constant>
    <constant name="Arabic_dammatan" value="1516">
      <type name="int"/>
    </constant>
    <constant name="Arabic_ddal" value="16778888">
      <type name="int"/>
    </constant>
    <constant name="Arabic_farsi_yeh" value="16778956">
      <type name="int"/>
    </constant>
    <constant name="Arabic_fatha" value="1518">
      <type name="int"/>
    </constant>
    <constant name="Arabic_fathatan" value="1515">
      <type name="int"/>
    </constant>
    <constant name="Arabic_feh" value="1505">
      <type name="int"/>
    </constant>
    <constant name="Arabic_fullstop" value="16778964">
      <type name="int"/>
    </constant>
    <constant name="Arabic_gaf" value="16778927">
      <type name="int"/>
    </constant>
    <constant name="Arabic_ghain" value="1498">
      <type name="int"/>
    </constant>
    <constant name="Arabic_ha" value="1511">
      <type name="int"/>
    </constant>
    <constant name="Arabic_hah" value="1485">
      <type name="int"/>
    </constant>
    <constant name="Arabic_hamza" value="1473">
      <type name="int"/>
    </constant>
    <constant name="Arabic_hamza_above" value="16778836">
      <type name="int"/>
    </constant>
    <constant name="Arabic_hamza_below" value="16778837">
      <type name="int"/>
    </constant>
    <constant name="Arabic_hamzaonalef" value="1475">
      <type name="int"/>
    </constant>
    <constant name="Arabic_hamzaonwaw" value="1476">
      <type name="int"/>
    </constant>
    <constant name="Arabic_hamzaonyeh" value="1478">
      <type name="int"/>
    </constant>
    <constant name="Arabic_hamzaunderalef" value="1477">
      <type name="int"/>
    </constant>
    <constant name="Arabic_heh" value="1511">
      <type name="int"/>
    </constant>
    <constant name="Arabic_heh_doachashmee" value="16778942">
      <type name="int"/>
    </constant>
    <constant name="Arabic_heh_goal" value="16778945">
      <type name="int"/>
    </constant>
    <constant name="Arabic_jeem" value="1484">
      <type name="int"/>
    </constant>
    <constant name="Arabic_jeh" value="16778904">
      <type name="int"/>
    </constant>
    <constant name="Arabic_kaf" value="1507">
      <type name="int"/>
    </constant>
    <constant name="Arabic_kasra" value="1520">
      <type name="int"/>
    </constant>
    <constant name="Arabic_kasratan" value="1517">
      <type name="int"/>
    </constant>
    <constant name="Arabic_keheh" value="16778921">
      <type name="int"/>
    </constant>
    <constant name="Arabic_khah" value="1486">
      <type name="int"/>
    </constant>
    <constant name="Arabic_lam" value="1508">
      <type name="int"/>
    </constant>
    <constant name="Arabic_madda_above" value="16778835">
      <type name="int"/>
    </constant>
    <constant name="Arabic_maddaonalef" value="1474">
      <type name="int"/>
    </constant>
    <constant name="Arabic_meem" value="1509">
      <type name="int"/>
    </constant>
    <constant name="Arabic_noon" value="1510">
      <type name="int"/>
    </constant>
    <constant name="Arabic_noon_ghunna" value="16778938">
      <type name="int"/>
    </constant>
    <constant name="Arabic_peh" value="16778878">
      <type name="int"/>
    </constant>
    <constant name="Arabic_percent" value="16778858">
      <type name="int"/>
    </constant>
    <constant name="Arabic_qaf" value="1506">
      <type name="int"/>
    </constant>
    <constant name="Arabic_question_mark" value="1471">
      <type name="int"/>
    </constant>
    <constant name="Arabic_ra" value="1489">
      <type name="int"/>
    </constant>
    <constant name="Arabic_rreh" value="16778897">
      <type name="int"/>
    </constant>
    <constant name="Arabic_sad" value="1493">
      <type name="int"/>
    </constant>
    <constant name="Arabic_seen" value="1491">
      <type name="int"/>
    </constant>
    <constant name="Arabic_semicolon" value="1467">
      <type name="int"/>
    </constant>
    <constant name="Arabic_shadda" value="1521">
      <type name="int"/>
    </constant>
    <constant name="Arabic_sheen" value="1492">
      <type name="int"/>
    </constant>
    <constant name="Arabic_sukun" value="1522">
      <type name="int"/>
    </constant>
    <constant name="Arabic_superscript_alef" value="16778864">
      <type name="int"/>
    </constant>
    <constant name="Arabic_switch" value="65406">
      <type name="int"/>
    </constant>
    <constant name="Arabic_tah" value="1495">
      <type name="int"/>
    </constant>
    <constant name="Arabic_tatweel" value="1504">
      <type name="int"/>
    </constant>
    <constant name="Arabic_tcheh" value="16778886">
      <type name="int"/>
    </constant>
    <constant name="Arabic_teh" value="1482">
      <type name="int"/>
    </constant>
    <constant name="Arabic_tehmarbuta" value="1481">
      <type name="int"/>
    </constant>
    <constant name="Arabic_thal" value="1488">
      <type name="int"/>
    </constant>
    <constant name="Arabic_theh" value="1483">
      <type name="int"/>
    </constant>
    <constant name="Arabic_tteh" value="16778873">
      <type name="int"/>
    </constant>
    <constant name="Arabic_veh" value="16778916">
      <type name="int"/>
    </constant>
    <constant name="Arabic_waw" value="1512">
      <type name="int"/>
    </constant>
    <constant name="Arabic_yeh" value="1514">
      <type name="int"/>
    </constant>
    <constant name="Arabic_yeh_baree" value="16778962">
      <type name="int"/>
    </constant>
    <constant name="Arabic_zah" value="1496">
      <type name="int"/>
    </constant>
    <constant name="Arabic_zain" value="1490">
      <type name="int"/>
    </constant>
    <constant name="Aring" value="197">
      <type name="int"/>
    </constant>
    <constant name="Armenian_AT" value="16778552">
      <type name="int"/>
    </constant>
    <constant name="Armenian_AYB" value="16778545">
      <type name="int"/>
    </constant>
    <constant name="Armenian_BEN" value="16778546">
      <type name="int"/>
    </constant>
    <constant name="Armenian_CHA" value="16778569">
      <type name="int"/>
    </constant>
    <constant name="Armenian_DA" value="16778548">
      <type name="int"/>
    </constant>
    <constant name="Armenian_DZA" value="16778561">
      <type name="int"/>
    </constant>
    <constant name="Armenian_E" value="16778551">
      <type name="int"/>
    </constant>
    <constant name="Armenian_FE" value="16778582">
      <type name="int"/>
    </constant>
    <constant name="Armenian_GHAT" value="16778562">
      <type name="int"/>
    </constant>
    <constant name="Armenian_GIM" value="16778547">
      <type name="int"/>
    </constant>
    <constant name="Armenian_HI" value="16778565">
      <type name="int"/>
    </constant>
    <constant name="Armenian_HO" value="16778560">
      <type name="int"/>
    </constant>
    <constant name="Armenian_INI" value="16778555">
      <type name="int"/>
    </constant>
    <constant name="Armenian_JE" value="16778571">
      <type name="int"/>
    </constant>
    <constant name="Armenian_KE" value="16778580">
      <type name="int"/>
    </constant>
    <constant name="Armenian_KEN" value="16778559">
      <type name="int"/>
    </constant>
    <constant name="Armenian_KHE" value="16778557">
      <type name="int"/>
    </constant>
    <constant name="Armenian_LYUN" value="16778556">
      <type name="int"/>
    </constant>
    <constant name="Armenian_MEN" value="16778564">
      <type name="int"/>
    </constant>
    <constant name="Armenian_NU" value="16778566">
      <type name="int"/>
    </constant>
    <constant name="Armenian_O" value="16778581">
      <type name="int"/>
    </constant>
    <constant name="Armenian_PE" value="16778570">
      <type name="int"/>
    </constant>
    <constant name="Armenian_PYUR" value="16778579">
      <type name="int"/>
    </constant>
    <constant name="Armenian_RA" value="16778572">
      <type name="int"/>
    </constant>
    <constant name="Armenian_RE" value="16778576">
      <type name="int"/>
    </constant>
    <constant name="Armenian_SE" value="16778573">
      <type name="int"/>
    </constant>
    <constant name="Armenian_SHA" value="16778567">
      <type name="int"/>
    </constant>
    <constant name="Armenian_TCHE" value="16778563">
      <type name="int"/>
    </constant>
    <constant name="Armenian_TO" value="16778553">
      <type name="int"/>
    </constant>
    <constant name="Armenian_TSA" value="16778558">
      <type name="int"/>
    </constant>
    <constant name="Armenian_TSO" value="16778577">
      <type name="int"/>
    </constant>
    <constant name="Armenian_TYUN" value="16778575">
      <type name="int"/>
    </constant>
    <constant name="Armenian_VEV" value="16778574">
      <type name="int"/>
    </constant>
    <constant name="Armenian_VO" value="16778568">
      <type name="int"/>
    </constant>
    <constant name="Armenian_VYUN" value="16778578">
      <type name="int"/>
    </constant>
    <constant name="Armenian_YECH" value="16778549">
      <type name="int"/>
    </constant>
    <constant name="Armenian_ZA" value="16778550">
      <type name="int"/>
    </constant>
    <constant name="Armenian_ZHE" value="16778554">
      <type name="int"/>
    </constant>
    <constant name="Armenian_accent" value="16778587">
      <type name="int"/>
    </constant>
    <constant name="Armenian_amanak" value="16778588">
      <type name="int"/>
    </constant>
    <constant name="Armenian_apostrophe" value="16778586">
      <type name="int"/>
    </constant>
    <constant name="Armenian_at" value="16778600">
      <type name="int"/>
    </constant>
    <constant name="Armenian_ayb" value="16778593">
      <type name="int"/>
    </constant>
    <constant name="Armenian_ben" value="16778594">
      <type name="int"/>
    </constant>
    <constant name="Armenian_but" value="16778589">
      <type name="int"/>
    </constant>
    <constant name="Armenian_cha" value="16778617">
      <type name="int"/>
    </constant>
    <constant name="Armenian_da" value="16778596">
      <type name="int"/>
    </constant>
    <constant name="Armenian_dza" value="16778609">
      <type name="int"/>
    </constant>
    <constant name="Armenian_e" value="16778599">
      <type name="int"/>
    </constant>
    <constant name="Armenian_exclam" value="16778588">
      <type name="int"/>
    </constant>
    <constant name="Armenian_fe" value="16778630">
      <type name="int"/>
    </constant>
    <constant name="Armenian_full_stop" value="16778633">
      <type name="int"/>
    </constant>
    <constant name="Armenian_ghat" value="16778610">
      <type name="int"/>
    </constant>
    <constant name="Armenian_gim" value="16778595">
      <type name="int"/>
    </constant>
    <constant name="Armenian_hi" value="16778613">
      <type name="int"/>
    </constant>
    <constant name="Armenian_ho" value="16778608">
      <type name="int"/>
    </constant>
    <constant name="Armenian_hyphen" value="16778634">
      <type name="int"/>
    </constant>
    <constant name="Armenian_ini" value="16778603">
      <type name="int"/>
    </constant>
    <constant name="Armenian_je" value="16778619">
      <type name="int"/>
    </constant>
    <constant name="Armenian_ke" value="16778628">
      <type name="int"/>
    </constant>
    <constant name="Armenian_ken" value="16778607">
      <type name="int"/>
    </constant>
    <constant name="Armenian_khe" value="16778605">
      <type name="int"/>
    </constant>
    <constant name="Armenian_ligature_ew" value="16778631">
      <type name="int"/>
    </constant>
    <constant name="Armenian_lyun" value="16778604">
      <type name="int"/>
    </constant>
    <constant name="Armenian_men" value="16778612">
      <type name="int"/>
    </constant>
    <constant name="Armenian_nu" value="16778614">
      <type name="int"/>
    </constant>
    <constant name="Armenian_o" value="16778629">
      <type name="int"/>
    </constant>
    <constant name="Armenian_paruyk" value="16778590">
      <type name="int"/>
    </constant>
    <constant name="Armenian_pe" value="16778618">
      <type name="int"/>
    </constant>
    <constant name="Armenian_pyur" value="16778627">
      <type name="int"/>
    </constant>
    <constant name="Armenian_question" value="16778590">
      <type name="int"/>
    </constant>
    <constant name="Armenian_ra" value="16778620">
      <type name="int"/>
    </constant>
    <constant name="Armenian_re" value="16778624">
      <type name="int"/>
    </constant>
    <constant name="Armenian_se" value="16778621">
      <type name="int"/>
    </constant>
    <constant name="Armenian_separation_mark" value="16778589">
      <type name="int"/>
    </constant>
    <constant name="Armenian_sha" value="16778615">
      <type name="int"/>
    </constant>
    <constant name="Armenian_shesht" value="16778587">
      <type name="int"/>
    </constant>
    <constant name="Armenian_tche" value="16778611">
      <type name="int"/>
    </constant>
    <constant name="Armenian_to" value="16778601">
      <type name="int"/>
    </constant>
    <constant name="Armenian_tsa" value="16778606">
      <type name="int"/>
    </constant>
    <constant name="Armenian_tso" value="16778625">
      <type name="int"/>
    </constant>
    <constant name="Armenian_tyun" value="16778623">
      <type name="int"/>
    </constant>
    <constant name="Armenian_verjaket" value="16778633">
      <type name="int"/>
    </constant>
    <constant name="Armenian_vev" value="16778622">
      <type name="int"/>
    </constant>
    <constant name="Armenian_vo" value="16778616">
      <type name="int"/>
    </constant>
    <constant name="Armenian_vyun" value="16778626">
      <type name="int"/>
    </constant>
    <constant name="Armenian_yech" value="16778597">
      <type name="int"/>
    </constant>
    <constant name="Armenian_yentamna" value="16778634">
      <type name="int"/>
    </constant>
    <constant name="Armenian_za" value="16778598">
      <type name="int"/>
    </constant>
    <constant name="Armenian_zhe" value="16778602">
      <type name="int"/>
    </constant>
    <constant name="Atilde" value="195">
      <type name="int"/>
    </constant>
    <class name="AttrList"
           c:type="IBusAttrList"
           parent="Serializable"
           glib:type-name="IBusAttrList"
           glib:get-type="ibus_attr_list_get_type"
           glib:type-struct="AttrListClass">
      <doc xml:whitespace="preserve">Array of IBusAttribute.</doc>
      <constructor name="new" c:identifier="ibus_attr_list_new">
        <doc xml:whitespace="preserve">New an IBusAttrList.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusAttrList.</doc>
          <type name="AttrList" c:type="IBusAttrList*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="ibus_attr_list_append">
        <doc xml:whitespace="preserve">Append an IBusAttribute to IBusAttrList, and increase reference.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="attr" transfer-ownership="none">
            <doc xml:whitespace="preserve">The IBusAttribute instance to be appended.</doc>
            <type name="Attribute" c:type="IBusAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="ibus_attr_list_get">
        <doc xml:whitespace="preserve">Returns IBusAttribute at given index. Borrowed reference.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">IBusAttribute at given index, NULL if no such IBusAttribute.</doc>
          <type name="Attribute" c:type="IBusAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">Index of the @attr_list.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Serializable" c:type="IBusSerializable"/>
      </field>
      <field name="attributes">
        <type name="GLib.Array" c:type="GArray*"/>
      </field>
    </class>
    <record name="AttrListClass"
            c:type="IBusAttrListClass"
            glib:is-gtype-struct-for="AttrList">
      <field name="parent">
        <type name="SerializableClass" c:type="IBusSerializableClass"/>
      </field>
    </record>
    <enumeration name="AttrType"
                 glib:type-name="IBusAttrType"
                 glib:get-type="ibus_attr_type_get_type"
                 c:type="IBusAttrType">
      <doc xml:whitespace="preserve">Type enumeration of IBusText attribute.</doc>
      <member name="underline"
              value="1"
              c:identifier="IBUS_ATTR_TYPE_UNDERLINE"
              glib:nick="underline"/>
      <member name="foreground"
              value="2"
              c:identifier="IBUS_ATTR_TYPE_FOREGROUND"
              glib:nick="foreground"/>
      <member name="background"
              value="3"
              c:identifier="IBUS_ATTR_TYPE_BACKGROUND"
              glib:nick="background"/>
    </enumeration>
    <enumeration name="AttrUnderline"
                 glib:type-name="IBusAttrUnderline"
                 glib:get-type="ibus_attr_underline_get_type"
                 c:type="IBusAttrUnderline">
      <doc xml:whitespace="preserve">Type of IBusText attribute.</doc>
      <member name="none"
              value="0"
              c:identifier="IBUS_ATTR_UNDERLINE_NONE"
              glib:nick="none"/>
      <member name="single"
              value="1"
              c:identifier="IBUS_ATTR_UNDERLINE_SINGLE"
              glib:nick="single"/>
      <member name="double"
              value="2"
              c:identifier="IBUS_ATTR_UNDERLINE_DOUBLE"
              glib:nick="double"/>
      <member name="low"
              value="3"
              c:identifier="IBUS_ATTR_UNDERLINE_LOW"
              glib:nick="low"/>
      <member name="error"
              value="4"
              c:identifier="IBUS_ATTR_UNDERLINE_ERROR"
              glib:nick="error"/>
    </enumeration>
    <class name="Attribute"
           c:type="IBusAttribute"
           parent="Serializable"
           glib:type-name="IBusAttribute"
           glib:get-type="ibus_attribute_get_type"
           glib:type-struct="AttributeClass">
      <doc xml:whitespace="preserve">Signify the type, value and scope of the attribute.
The scope starts from @start_index till the @end_index-1.</doc>
      <constructor name="new" c:identifier="ibus_attribute_new">
        <doc xml:whitespace="preserve">New an IBusAttribute.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusAttribute.</doc>
          <type name="Attribute" c:type="IBusAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">Type of the attribute.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">Value of the attribute.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="start_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">Where attribute starts.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="end_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">Where attribute ends.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="Serializable" c:type="IBusSerializable"/>
      </field>
      <field name="type">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="value">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="start_index">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="end_index">
        <type name="uint" c:type="guint"/>
      </field>
    </class>
    <record name="AttributeClass"
            c:type="IBusAttributeClass"
            glib:is-gtype-struct-for="Attribute">
      <field name="parent">
        <type name="SerializableClass" c:type="IBusSerializableClass"/>
      </field>
    </record>
    <constant name="AudibleBell_Enable" value="65146">
      <type name="int"/>
    </constant>
    <constant name="B" value="66">
      <type name="int"/>
    </constant>
    <constant name="Babovedot" value="16784898">
      <type name="int"/>
    </constant>
    <constant name="BackSpace" value="65288">
      <type name="int"/>
    </constant>
    <constant name="Begin" value="65368">
      <type name="int"/>
    </constant>
    <constant name="BounceKeys_Enable" value="65140">
      <type name="int"/>
    </constant>
    <constant name="Break" value="65387">
      <type name="int"/>
    </constant>
    <class name="Bus"
           c:type="IBusBus"
           parent="Object"
           glib:type-name="IBusBus"
           glib:get-type="ibus_bus_get_type"
           glib:type-struct="BusClass">
      <doc xml:whitespace="preserve">An opaque data type representing IBus bus (daemon communication) status.</doc>
      <constructor name="new" c:identifier="ibus_bus_new">
        <doc xml:whitespace="preserve">New an IBusBus instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusBus instance, and the instance is not floating.</doc>
          <type name="Bus" c:type="IBusBus*"/>
        </return-value>
      </constructor>
      <method name="is_connected" c:identifier="ibus_bus_is_connected">
        <doc xml:whitespace="preserve">Return TRUE if @bus is connected to IBus daemon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if @bus is connected, FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_connection" c:identifier="ibus_bus_get_connection">
        <doc xml:whitespace="preserve">Return IBusConnection of an IBusIBus instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">TRUE if @bus is connected, FALSE otherwise.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </return-value>
      </method>
      <method name="hello" c:identifier="ibus_bus_hello">
        <doc xml:whitespace="preserve">This function sends a "HELLO" message to DBus daemon,
which replies the unique name of current IBus process.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The unique name of IBus process in DBus.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="request_name" c:identifier="ibus_bus_request_name">
        <doc xml:whitespace="preserve">Request a name from IBus daemon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">0 if failed; positive number otherwise.</doc>
          <type name="uint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name to be requested.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">Flags (FixMe).</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="release_name" c:identifier="ibus_bus_release_name">
        <doc xml:whitespace="preserve">Release a name to IBus daemon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">0 if failed; positive number otherwise.</doc>
          <type name="uint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name to be released.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="name_has_owner" c:identifier="ibus_bus_name_has_owner">
        <doc xml:whitespace="preserve">Whether the name has owner.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the name has owner, FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name to be released.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_names" c:identifier="ibus_bus_list_names">
        <doc xml:whitespace="preserve">Return lists that attached to @bus.
&lt;note&gt;&lt;para&gt;[FixMe] Not implemented yet, only return NULL.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">Lists that attached to @bus.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="add_match" c:identifier="ibus_bus_add_match">
        <doc xml:whitespace="preserve">Add a match rule to an IBusBus.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rule" transfer-ownership="none">
            <doc xml:whitespace="preserve">Match rule.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_match" c:identifier="ibus_bus_remove_match">
        <doc xml:whitespace="preserve">Remove a match rule to an IBusBus.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rule" transfer-ownership="none">
            <doc xml:whitespace="preserve">Match rule.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name_owner" c:identifier="ibus_bus_get_name_owner">
        <doc xml:whitespace="preserve">Return the name owner.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">Owner of the name. The returned value must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="exit" c:identifier="ibus_bus_exit">
        <doc xml:whitespace="preserve">Exit or restart an IBusBus.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the "Exit" call is suceeded, FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="restart" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether restarting the ibus.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_input_context"
              c:identifier="ibus_bus_create_input_context">
        <doc xml:whitespace="preserve">Create an input context for client.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An newly allocated IBusInputContext if the "CreateInputContext" call is suceeded, NULL otherwise.</doc>
          <type name="InputContext" c:type="IBusInputContext*"/>
        </return-value>
        <parameters>
          <parameter name="client_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of client.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="current_input_context"
              c:identifier="ibus_bus_current_input_context">
        <doc xml:whitespace="preserve">Get the current focused input context.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The named of currently focued IBusInputContext if the "CurrentInputContext" call suceeded, NULL otherwise. The return value must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="register_component"
              c:identifier="ibus_bus_register_component">
        <doc xml:whitespace="preserve">Register a componet to an IBusBus.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the "RegisterComponent" call is suceeded, FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="component" transfer-ownership="none">
            <doc xml:whitespace="preserve">A input engine component.</doc>
            <type name="Component" c:type="IBusComponent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_engines" c:identifier="ibus_bus_list_engines">
        <doc xml:whitespace="preserve">List engines.
Note that this function is not yet implemented.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A List of engines.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="EngineDesc"/>
          </type>
        </return-value>
      </method>
      <method name="list_active_engines"
              c:identifier="ibus_bus_list_active_engines">
        <doc xml:whitespace="preserve">List active engines.
Note that this function is not yet implemented.
&lt;note&gt;&lt;para&gt;Not yet implemented.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A List of active engines.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="EngineDesc"/>
          </type>
        </return-value>
      </method>
      <method name="get_use_sys_layout"
              c:identifier="ibus_bus_get_use_sys_layout">
        <doc xml:whitespace="preserve">Check if the bus's "use_sys_layout" option is enabled or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if "use_sys_layout" option is enabled.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_use_global_engine"
              c:identifier="ibus_bus_get_use_global_engine">
        <doc xml:whitespace="preserve">Check if the bus's "use_global_engine" option is enabled or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if "use_global_engine" option is enabled.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_global_engine_enabled"
              c:identifier="ibus_bus_is_global_engine_enabled">
        <doc xml:whitespace="preserve">Check if the current global engine is enabled or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the current global engine is enabled.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_global_engine"
              c:identifier="ibus_bus_get_global_engine">
        <doc xml:whitespace="preserve">Get the description of current global engine.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The description of current global engine, or NULL if there is no global engine.</doc>
          <type name="EngineDesc" c:type="IBusEngineDesc*"/>
        </return-value>
      </method>
      <method name="set_global_engine"
              c:identifier="ibus_bus_set_global_engine">
        <doc xml:whitespace="preserve">Set current global engine.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the global engine was set successfully.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="global_engine" transfer-ownership="none">
            <doc xml:whitespace="preserve">A new engine name.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_config" c:identifier="ibus_bus_get_config">
        <doc xml:whitespace="preserve">Get the config instance from IBusBus.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An newly allocated IBusConfig which is configurable with @bus.</doc>
          <type name="Config" c:type="IBusConfig*"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="Object" c:type="IBusObject"/>
      </field>
      <glib:signal name="connected">
        <doc xml:whitespace="preserve">Emitted when IBusBus is connected.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="disconnected">
        <doc xml:whitespace="preserve">Emitted when IBusBus is disconnected.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="global-engine-changed">
        <doc xml:whitespace="preserve">Emitted when global engine is changed.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BusClass"
            c:type="IBusBusClass"
            glib:is-gtype-struct-for="Bus">
      <field name="parent">
        <type name="ObjectClass" c:type="IBusObjectClass"/>
      </field>
    </record>
    <record name="BusComponent" c:type="BusComponent">
    </record>
    <constant name="Byelorussian_SHORTU" value="1726">
      <type name="int"/>
    </constant>
    <constant name="Byelorussian_shortu" value="1710">
      <type name="int"/>
    </constant>
    <constant name="C" value="67">
      <type name="int"/>
    </constant>
    <constant name="Cabovedot" value="709">
      <type name="int"/>
    </constant>
    <constant name="Cacute" value="454">
      <type name="int"/>
    </constant>
    <constant name="Cancel" value="65385">
      <type name="int"/>
    </constant>
    <bitfield name="Capabilite"
              glib:type-name="IBusCapabilite"
              glib:get-type="ibus_capabilite_get_type"
              c:type="IBusCapabilite">
      <doc xml:whitespace="preserve">Capability flags of UI.</doc>
      <member name="preedit_text"
              value="1"
              c:identifier="IBUS_CAP_PREEDIT_TEXT"
              glib:nick="preedit-text"/>
      <member name="auxiliary_text"
              value="2"
              c:identifier="IBUS_CAP_AUXILIARY_TEXT"
              glib:nick="auxiliary-text"/>
      <member name="lookup_table"
              value="4"
              c:identifier="IBUS_CAP_LOOKUP_TABLE"
              glib:nick="lookup-table"/>
      <member name="focus"
              value="8"
              c:identifier="IBUS_CAP_FOCUS"
              glib:nick="focus"/>
      <member name="property"
              value="16"
              c:identifier="IBUS_CAP_PROPERTY"
              glib:nick="property"/>
      <member name="surrounding_text"
              value="32"
              c:identifier="IBUS_CAP_SURROUNDING_TEXT"
              glib:nick="surrounding-text"/>
    </bitfield>
    <constant name="Caps_Lock" value="65509">
      <type name="int"/>
    </constant>
    <constant name="Ccaron" value="456">
      <type name="int"/>
    </constant>
    <constant name="Ccedilla" value="199">
      <type name="int"/>
    </constant>
    <constant name="Ccircumflex" value="710">
      <type name="int"/>
    </constant>
    <constant name="Clear" value="65291">
      <type name="int"/>
    </constant>
    <constant name="Codeinput" value="65335">
      <type name="int"/>
    </constant>
    <constant name="ColonSign" value="16785569">
      <type name="int"/>
    </constant>
    <class name="Component"
           c:type="IBusComponent"
           parent="Serializable"
           glib:type-name="IBusComponent"
           glib:get-type="ibus_component_get_type"
           glib:type-struct="ComponentClass">
      <doc xml:whitespace="preserve">An IBusComponent stores component information.</doc>
      <constructor name="new" c:identifier="ibus_component_new">
        <doc xml:whitespace="preserve">New an IBusComponent.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusComponent.</doc>
          <type name="Component" c:type="IBusComponent*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the component.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:whitespace="preserve">Detailed description of component.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:whitespace="preserve">Component version.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="license" transfer-ownership="none">
            <doc xml:whitespace="preserve">Distribution license of this component.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="author" transfer-ownership="none">
            <doc xml:whitespace="preserve">Author(s) of the component.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="homepage" transfer-ownership="none">
            <doc xml:whitespace="preserve">Homepage of the component.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="exec" transfer-ownership="none">
            <doc xml:whitespace="preserve">path to component executable.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="textdomain" transfer-ownership="none">
            <doc xml:whitespace="preserve">Domain name for dgettext()</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_xml_node"
                   c:identifier="ibus_component_new_from_xml_node">
        <doc xml:whitespace="preserve">New an IBusComponent from an XML tree.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusComponent.</doc>
          <type name="Component" c:type="IBusComponent*"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <doc xml:whitespace="preserve">Root node of component XML tree.</doc>
            <type name="XMLNode" c:type="XMLNode*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="ibus_component_new_from_file">
        <doc xml:whitespace="preserve">New an IBusComponent from an XML file.
Note that a component file usually contains engine descriptions,
if it does, ibus_engine_desc_new_from_xml_node() will be called
to load the engine descriptions.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusComponent.</doc>
          <type name="Component" c:type="IBusComponent*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">An XML file that contains component information.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_from_engine"
                c:identifier="ibus_component_get_from_engine">
        <doc xml:whitespace="preserve">Get the IBusComponent from an engine description.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusComponent of the engine.</doc>
          <type name="Component" c:type="IBusComponent*"/>
        </return-value>
        <parameters>
          <parameter name="engine" transfer-ownership="none">
            <doc xml:whitespace="preserve">A description of an engine.</doc>
            <type name="EngineDesc" c:type="IBusEngineDesc*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_observed_path"
              c:identifier="ibus_component_add_observed_path">
        <doc xml:whitespace="preserve">Add an observed path to IBusComponent.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">Observed path to be added.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="access_fs" transfer-ownership="none">
            <doc xml:whitespace="preserve">TRUE for filling the file status; FALSE otherwise.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_engine" c:identifier="ibus_component_add_engine">
        <doc xml:whitespace="preserve">Add an engine to IBusComponent according to the description in @engine.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="engine" transfer-ownership="none">
            <doc xml:whitespace="preserve">A description of an engine.</doc>
            <type name="EngineDesc" c:type="IBusEngineDesc*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_engines" c:identifier="ibus_component_get_engines">
        <doc xml:whitespace="preserve">Get the engines of this component.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly allocated GList that contains engines.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="EngineDesc"/>
          </type>
        </return-value>
      </method>
      <method name="output" c:identifier="ibus_component_output">
        <doc xml:whitespace="preserve">Output IBusComponent as an XML-formatted string.
The output string can be then shown on the screen or written to file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="output" transfer-ownership="none">
            <doc xml:whitespace="preserve">GString that holds the result.</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="indent" transfer-ownership="none">
            <doc xml:whitespace="preserve">level of indent.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="output_engines"
              c:identifier="ibus_component_output_engines">
        <doc xml:whitespace="preserve">Output engine description  as an XML-formatted string.
The output string can be then shown on the screen or written to file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="output" transfer-ownership="none">
            <doc xml:whitespace="preserve">GString that holds the result.</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="indent" transfer-ownership="none">
            <doc xml:whitespace="preserve">level of indent.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_modification"
              c:identifier="ibus_component_check_modification">
        <doc xml:whitespace="preserve">Check whether the observed paths of component is modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if at least one of the observed paths is modified; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="start" c:identifier="ibus_component_start">
        <doc xml:whitespace="preserve">Whether the IBusComponent is started.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the component is started; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="verbose" transfer-ownership="none">
            <doc xml:whitespace="preserve">if FALSE, redirect the child output to /dev/null</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="ibus_component_stop">
        <doc xml:whitespace="preserve">Whether the IBusComponent is stopped.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the component is stopped; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_running" c:identifier="ibus_component_is_running">
        <doc xml:whitespace="preserve">Whether the IBusComponent is running.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the component is running; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_restart" c:identifier="ibus_component_set_restart">
        <doc xml:whitespace="preserve">Set whether the component needs to be restarted when it dies.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="restart" transfer-ownership="none">
            <doc xml:whitespace="preserve">if TRUE, the component will be restartd when it dies.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Serializable" c:type="IBusSerializable"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="version">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="license">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="author">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="homepage">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="exec">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="textdomain">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="engines">
        <type name="GLib.List" c:type="GList*">
          <type name="any" c:type="gpointer"/>
        </type>
      </field>
      <field name="observed_paths">
        <type name="GLib.List" c:type="GList*">
          <type name="any" c:type="gpointer"/>
        </type>
      </field>
      <field name="pid">
        <type name="GLib.Pid" c:type="GPid"/>
      </field>
      <field name="child_source_id">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="5">
          <type name="any"/>
        </array>
      </field>
    </class>
    <record name="ComponentClass"
            c:type="IBusComponentClass"
            glib:is-gtype-struct-for="Component">
      <field name="parent">
        <type name="SerializableClass" c:type="IBusSerializableClass"/>
      </field>
    </record>
    <class name="Config"
           c:type="IBusConfig"
           parent="Proxy"
           glib:type-name="IBusConfig"
           glib:get-type="ibus_config_get_type"
           glib:type-struct="ConfigClass">
      <doc xml:whitespace="preserve">An opaque data type representing an IBusConfig.</doc>
      <constructor name="new" c:identifier="ibus_config_new">
        <doc xml:whitespace="preserve">New a IBusConfig from existing IBusConnection.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An newly allocated IBusConfig corresponding to @connection.</doc>
          <type name="Config" c:type="IBusConfig*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusConnection.</doc>
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_value" c:identifier="ibus_config_get_value">
        <doc xml:whitespace="preserve">Get the value of a configuration option.
GConf stores configure options in a tree-like structure,
and the IBus related setting is at /desktop/ibus,
thus, @section here is a path from there,
while @name is the key of that configuration option.
ibus-chewing, for example, stores its setting in /desktop/ibus/engine/Chewing,
so the section name for it is "engine/Chewing".</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="section" transfer-ownership="none">
            <doc xml:whitespace="preserve">Section name of the configuration option.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the configure option.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">GValue that holds the value.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="ibus_config_set_value">
        <doc xml:whitespace="preserve">Set the value of a configuration option.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="section" transfer-ownership="none">
            <doc xml:whitespace="preserve">Section name of the configuration option.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the configure option its self.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">GValue that holds the value.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset" c:identifier="ibus_config_unset">
        <doc xml:whitespace="preserve">Remove an entry of a configuration option.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="section" transfer-ownership="none">
            <doc xml:whitespace="preserve">Section name of the configuration option.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the configure option its self.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Proxy" c:type="IBusProxy"/>
      </field>
      <glib:signal name="value-changed">
        <doc xml:whitespace="preserve">Emitted when configuration value is changed.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="section" transfer-ownership="none">
            <doc xml:whitespace="preserve">Section name.</doc>
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the property.</doc>
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">Value.</doc>
            <type name="GObject.Value" c:type="GValue"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ConfigClass"
            c:type="IBusConfigClass"
            glib:is-gtype-struct-for="Config">
      <field name="parent">
        <type name="ProxyClass" c:type="IBusProxyClass"/>
      </field>
    </record>
    <class name="ConfigService"
           c:type="IBusConfigService"
           parent="Service"
           glib:type-name="IBusConfigService"
           glib:get-type="ibus_config_service_get_type"
           glib:type-struct="ConfigServiceClass">
      <doc xml:whitespace="preserve">An opaque data type representing a configure service.</doc>
      <constructor name="new" c:identifier="ibus_config_service_new">
        <doc xml:whitespace="preserve">New an IBusConfigService from an IBusConnection.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusConfigServices.</doc>
          <type name="ConfigService" c:type="IBusConfigService*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusConnection.</doc>
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="set_value">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="section" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_value">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="section" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unset">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="section" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="value_changed"
              c:identifier="ibus_config_service_value_changed">
        <doc xml:whitespace="preserve">Change a value of a configuration option
by sending a "ValueChanged" message to IBus service.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="section" transfer-ownership="none">
            <doc xml:whitespace="preserve">Section name of the configuration option.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the configure option.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">GValue that holds the value.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Connection of this IBusConfigService.</doc>
        <type name="Connection" c:type="IBusConnection"/>
      </property>
      <field name="parent">
        <type name="Service" c:type="IBusService"/>
      </field>
    </class>
    <record name="ConfigServiceClass"
            c:type="IBusConfigServiceClass"
            glib:is-gtype-struct-for="ConfigService">
      <field name="parent">
        <type name="ServiceClass" c:type="IBusServiceClass"/>
      </field>
      <field name="set_value">
        <callback name="set_value" c:type="set_value">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="config" transfer-ownership="none">
              <type name="ConfigService" c:type="IBusConfigService*"/>
            </parameter>
            <parameter name="section" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_value">
        <callback name="get_value" c:type="get_value">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="config" transfer-ownership="none">
              <type name="ConfigService" c:type="IBusConfigService*"/>
            </parameter>
            <parameter name="section" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unset">
        <callback name="unset" c:type="unset">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="config" transfer-ownership="none">
              <type name="ConfigService" c:type="IBusConfigService*"/>
            </parameter>
            <parameter name="section" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="13">
          <type name="any"/>
        </array>
      </field>
    </record>
    <class name="Connection"
           c:type="IBusConnection"
           parent="Object"
           glib:type-name="IBusConnection"
           glib:get-type="ibus_connection_get_type"
           glib:type-struct="ConnectionClass">
      <doc xml:whitespace="preserve">An opaque data type representing an IBusConnection.</doc>
      <constructor name="new" c:identifier="ibus_connection_new">
        <doc xml:whitespace="preserve">New an IBusConnection.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An newly allocated IBusConnection.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </return-value>
      </constructor>
      <function name="open" c:identifier="ibus_connection_open">
        <doc xml:whitespace="preserve">Open an IBusConnection that is set to a D-Bus connection to the specified address.
Use ibus_connection_open_private() to get a dedicated connection not shared with other callers of
ibus_connection_open().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusConnection which is set to a D-Bus connection corresponding to @address.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">A remote address.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="open_private"
                c:identifier="ibus_connection_open_private">
        <doc xml:whitespace="preserve">Open an IBusConnection that is set to a D-Bus connection to the specified address.
Unlike ibus_connection_open(), this function always creates a new D-Bus connection.
The D-Bus connection will not be saved or recycled by libdbus.
In D-Bus documentation, dbus_connection_open() is preferred over dbus_connection_open_private(),
so should ibus_connection_open() be preferred over ibus_connection_open_private().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusConnection which is set to a D-Bus connection corresponding to @address.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">A remote address.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="message">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="signal">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="message_sent">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="set_connection"
              c:identifier="ibus_connection_set_connection">
        <doc xml:whitespace="preserve">Set an IBusConnection as data of a D-Bus connection.
Emit signal &lt;constant&gt;ibus-message&lt;/constant&gt; when receiving incoming message from @dbus_connection.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dbus_connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">A D-Bus connection.</doc>
            <type name="DBusConnection" c:type="DBusConnection*"/>
          </parameter>
          <parameter name="shared" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the @dbus_connection is shared.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="ibus_connection_close">
        <doc xml:whitespace="preserve">Close an IBusCOnnection and corresponding D-Bus connection.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="is_connected" c:identifier="ibus_connection_is_connected">
        <doc xml:whitespace="preserve">Whether an IBusConnection is connected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE for connected; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_authenticated"
              c:identifier="ibus_connection_is_authenticated">
        <doc xml:whitespace="preserve">Whether an IBusConnection is authenticated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE for authenticated; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_connection"
              c:identifier="ibus_connection_get_connection">
        <doc xml:whitespace="preserve">Return corresponding DBusConnection.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The corresponding DBusConnection.</doc>
          <type name="DBusConnection" c:type="DBusConnection*"/>
        </return-value>
      </method>
      <method name="get_unix_user"
              c:identifier="ibus_connection_get_unix_user">
        <doc xml:whitespace="preserve">Return The UNIX UID of peer user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The UNIX UID of peer user.</doc>
          <type name="long" c:type="glong"/>
        </return-value>
      </method>
      <method name="read_write_dispatch"
              c:identifier="ibus_connection_read_write_dispatch">
        <doc xml:whitespace="preserve">Return TRUE if the disconnect message has not been processed.
This function is a wrapper of dbus_connection_read_write_dispatch(),
which is also intended for use with applications that don't want to
write a main loop and deal with DBusWatch and DBusTimeout.
Following text is
from the documentation of dbus_connection_read_write_dispatch():
An example usage would be:
&lt;informalexample&gt;
&lt;programlisting&gt;
while (dbus_connection_read_write_dispatch (connection, -1))
; // empty loop body
&lt;/programlisting&gt;
&lt;/informalexample&gt;
In this usage you would normally have set up a filter function to look at each message as it is dispatched.
The loop terminates when the last message from the connection (the disconnected signal) is processed.
If there are messages to dispatch, this function will dbus_connection_dispatch() once, and return.
If there are no messages to dispatch, this function will block until it can read or write,
then read or write, then return.
The way to think of this function is that it either makes some sort of progress,
or it blocks. Note that, while it is blocked on I/O, it cannot be interrupted (even by other threads),
which makes this function unsuitable for applications that do more than just react to received messages.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the disconnect message has not been processed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:whitespace="preserve">Maximum time to block or -1 for infinite.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="send" c:identifier="ibus_connection_send">
        <doc xml:whitespace="preserve">Send an IBusMessage to an IBusConnection.
If succeed, signal &lt;constant&gt;ibus-message-sent&lt;/constant&gt; is emitted.
ibus_connection_send_signal(), ibus_connection_send_signal_valist(), ibus_connection_send_valist(),
dbus_connection_send().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">IBusMessage to be sent.</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_signal"
              c:identifier="ibus_connection_send_signal"
              introspectable="0">
        <doc xml:whitespace="preserve">Send a wrapped D-Bus signal to an IBusConnection.
This function wraps a signal as an IBusMessage, then sent the IBusMessage
via ibus_connection_send().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The path to the object emitting the signal.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="interface" transfer-ownership="none">
            <doc xml:whitespace="preserve">The interface the signal is emitted from.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the signal.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="first_arg_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">Type of first argument.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="send_with_reply"
              c:identifier="ibus_connection_send_with_reply">
        <doc xml:whitespace="preserve">Queues an IBusMessage to send,  and returns a IBusPendingCall used to receive a reply to the message.
This function is a wrapper of dbus_connection_send_with_reply().
ibus_proxy_call_with_reply(),
#IBusPendingCall, dbus_connection_send_with_reply()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">FALSE if no memory, TRUE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessage.</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
          <parameter name="pending_return" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return location of a IBusPendingCall object, or NULL if connection is disconnected.</doc>
            <type name="PendingCall" c:type="IBusPendingCall**"/>
          </parameter>
          <parameter name="timeout_milliseconds" transfer-ownership="none">
            <doc xml:whitespace="preserve">timeout in milliseconds or -1 for default.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_with_reply_and_block"
              c:identifier="ibus_connection_send_with_reply_and_block">
        <doc xml:whitespace="preserve">Sends an IBus message and blocks a certain time period while waiting for
an IBusMessage as reply.
If the IBusMessage is not NULL,  signal &lt;constant&gt;ibus-message-sent&lt;/constant&gt; is emitted.
dbus_connection_send_with_reply_and_block()</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An IBusMessage that is the reply or NULL with an error code if the function fails.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessage.</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
          <parameter name="timeout_milliseconds" transfer-ownership="none">
            <doc xml:whitespace="preserve">timeout in milliseconds or -1 for default.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:whitespace="preserve">Returned error is stored here; NULL to ignore error.</doc>
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </method>
      <method name="call"
              c:identifier="ibus_connection_call"
              introspectable="0">
        <doc xml:whitespace="preserve">Invoke a member function by sending an IBusMessage. This method does not
support reply message, use ibus_connection_call_with_reply instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the signal.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The path to the object emitting the signal.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="interface" transfer-ownership="none">
            <doc xml:whitespace="preserve">The interface the signal is emitted from.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="member" transfer-ownership="none">
            <doc xml:whitespace="preserve">The name of the member function to be called.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:whitespace="preserve">Returned error is stored here; NULL to ignore error.</doc>
            <type name="Error" c:type="IBusError**"/>
          </parameter>
          <parameter name="first_arg_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">Type of first argument.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="call_with_reply"
              c:identifier="ibus_connection_call_with_reply"
              introspectable="0">
        <doc xml:whitespace="preserve">Invoke a member function by sending an IBusMessage.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">Reply message, or NULL when fail. The returned message must be freed with ibus_message_unref().</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the signal.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The path to the object emitting the signal.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="interface" transfer-ownership="none">
            <doc xml:whitespace="preserve">The interface the signal is emitted from.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="member" transfer-ownership="none">
            <doc xml:whitespace="preserve">The name of the member function to be called.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:whitespace="preserve">Returned error is stored here; NULL to ignore error.</doc>
            <type name="Error" c:type="IBusError**"/>
          </parameter>
          <parameter name="first_arg_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">Type of first argument.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="flush" c:identifier="ibus_connection_flush">
        <doc xml:whitespace="preserve">Blocks until the outgoing message queue is empty.
This function is a wrapper of dbus_connection_flush().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="register_object_path"
              c:identifier="ibus_connection_register_object_path">
        <doc xml:whitespace="preserve">Registers a handler for a given path in the object hierarchy.
The given vtable handles messages sent to exactly the given path.
This function is a wrapper of dbus_connection_register_object_path().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">FALSE if fail because of out of memory; TRUE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">Object path to be register.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="message_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:whitespace="preserve">Callback function for message handling.</doc>
            <type name="MessageFunc" c:type="IBusMessageFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">User data for @message_func.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_object_path"
              c:identifier="ibus_connection_unregister_object_path">
        <doc xml:whitespace="preserve">Unregisters the handler registered with exactly the given path.
It's a bug to call this function for a path that isn't registered.
Can unregister both fallback paths and object paths.
This function is a wrapper of dbus_connection_unregister_object_path()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">FALSE if fail because of out of memory; TRUE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">Object path to be unregister.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Object" c:type="IBusObject"/>
      </field>
      <glib:signal name="authenticate-unix-user">
        <doc xml:whitespace="preserve">Emitted when sending an ibus-message.
Implement the member function ibus_message() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:whitespace="preserve">unix user id.</doc>
            <type name="ulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="disconnected">
        <doc xml:whitespace="preserve">Emitted when an ibus-message is disconnected.
Implement the member function disconnected() function in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="ibus-message">
        <doc xml:whitespace="preserve">Emitted when sending an ibus-message.
Implement the member function ibus_message() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessage.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ibus-message-sent">
        <doc xml:whitespace="preserve">Emitted when an ibus-message is sent.
Implement the member function ibus_message_sent() function in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessage that contain the signal.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ibus-signal">
        <doc xml:whitespace="preserve">Emitted when sending an ibus-signal.
Implement the member function ibus_signal() function in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessage that contain the signal.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ConnectionClass"
            c:type="IBusConnectionClass"
            glib:is-gtype-struct-for="Connection">
      <field name="parent">
        <type name="ObjectClass" c:type="IBusObjectClass"/>
      </field>
      <field name="authenticate_unix_user">
        <callback name="authenticate_unix_user"
                  c:type="authenticate_unix_user">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="IBusConnection*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <type name="ulong" c:type="gulong"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="message">
        <callback name="message" c:type="ibus_message">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="IBusConnection*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="IBusMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="signal">
        <callback name="signal" c:type="ibus_signal">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="IBusConnection*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="IBusMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="message_sent">
        <callback name="message_sent" c:type="ibus_message_sent">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="IBusConnection*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="IBusMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnected">
        <callback name="disconnected" c:type="disconnected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="IBusConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="any"/>
        </array>
      </field>
    </record>
    <callback name="ConnectionReplyFunc" c:type="IBusConnectionReplyFunc">
      <doc xml:whitespace="preserve">Prototype of an IBusConnectionReplyFunc callback function.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusConnection.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </parameter>
        <parameter name="reply" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusMessage.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <doc xml:whitespace="preserve">User data for the callback function.</doc>
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="Control_L" value="65507">
      <type name="int"/>
    </constant>
    <constant name="Control_R" value="65508">
      <type name="int"/>
    </constant>
    <constant name="CruzeiroSign" value="16785570">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_A" value="1761">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_BE" value="1762">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_CHE" value="1790">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_CHE_descender" value="16778422">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_CHE_vertstroke" value="16778424">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_DE" value="1764">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_DZHE" value="1727">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_E" value="1788">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_EF" value="1766">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_EL" value="1772">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_EM" value="1773">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_EN" value="1774">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_EN_descender" value="16778402">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ER" value="1778">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ES" value="1779">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_GHE" value="1767">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_GHE_bar" value="16778386">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_HA" value="1768">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_HARDSIGN" value="1791">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_HA_descender" value="16778418">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_I" value="1769">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_IE" value="1765">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_IO" value="1715">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_I_macron" value="16778466">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_JE" value="1720">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_KA" value="1771">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_KA_descender" value="16778394">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_KA_vertstroke" value="16778396">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_LJE" value="1721">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_NJE" value="1722">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_O" value="1775">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_O_bar" value="16778472">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_PE" value="1776">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_SCHWA" value="16778456">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_SHA" value="1787">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_SHCHA" value="1789">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_SHHA" value="16778426">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_SHORTI" value="1770">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_SOFTSIGN" value="1784">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_TE" value="1780">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_TSE" value="1763">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_U" value="1781">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_U_macron" value="16778478">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_U_straight" value="16778414">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_U_straight_bar" value="16778416">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_VE" value="1783">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_YA" value="1777">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_YERU" value="1785">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_YU" value="1760">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ZE" value="1786">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ZHE" value="1782">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ZHE_descender" value="16778390">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_a" value="1729">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_be" value="1730">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_che" value="1758">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_che_descender" value="16778423">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_che_vertstroke" value="16778425">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_de" value="1732">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_dzhe" value="1711">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_e" value="1756">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ef" value="1734">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_el" value="1740">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_em" value="1741">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_en" value="1742">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_en_descender" value="16778403">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_er" value="1746">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_es" value="1747">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ghe" value="1735">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ghe_bar" value="16778387">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ha" value="1736">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ha_descender" value="16778419">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_hardsign" value="1759">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_i" value="1737">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_i_macron" value="16778467">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ie" value="1733">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_io" value="1699">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_je" value="1704">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ka" value="1739">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ka_descender" value="16778395">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ka_vertstroke" value="16778397">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_lje" value="1705">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_nje" value="1706">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_o" value="1743">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_o_bar" value="16778473">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_pe" value="1744">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_schwa" value="16778457">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_sha" value="1755">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_shcha" value="1757">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_shha" value="16778427">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_shorti" value="1738">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_softsign" value="1752">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_te" value="1748">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_tse" value="1731">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_u" value="1749">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_u_macron" value="16778479">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_u_straight" value="16778415">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_u_straight_bar" value="16778417">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ve" value="1751">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ya" value="1745">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_yeru" value="1753">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_yu" value="1728">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_ze" value="1754">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_zhe" value="1750">
      <type name="int"/>
    </constant>
    <constant name="Cyrillic_zhe_descender" value="16778391">
      <type name="int"/>
    </constant>
    <constant name="D" value="68">
      <type name="int"/>
    </constant>
    <record name="DBusConnection" c:type="DBusConnection">
    </record>
    <callback name="DBusConnectionSetupFunc" c:type="DBusConnectionSetupFunc">
      <doc xml:whitespace="preserve">A prototype of callback to DBus connection setup function.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:whitespace="preserve">A DBusConnection</doc>
          <type name="DBusConnection" c:type="DBusConnection*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <doc xml:whitespace="preserve">User data to be passed to callback function.</doc>
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="DBusServer" c:type="DBusServer">
    </record>
    <callback name="DBusServerSetupFunc" c:type="DBusServerSetupFunc">
      <doc xml:whitespace="preserve">A prototype of DBus server setup function.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="server" transfer-ownership="none">
          <doc xml:whitespace="preserve">A DBusConnection</doc>
          <type name="DBusServer" c:type="DBusServer*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <doc xml:whitespace="preserve">User data to be passed to callback function.</doc>
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="Dabovedot" value="16784906">
      <type name="int"/>
    </constant>
    <constant name="Dcaron" value="463">
      <type name="int"/>
    </constant>
    <constant name="Delete" value="65535">
      <type name="int"/>
    </constant>
    <constant name="DongSign" value="16785579">
      <type name="int"/>
    </constant>
    <constant name="Down" value="65364">
      <type name="int"/>
    </constant>
    <constant name="Dstroke" value="464">
      <type name="int"/>
    </constant>
    <constant name="E" value="69">
      <type name="int"/>
    </constant>
    <constant name="ENG" value="957">
      <type name="int"/>
    </constant>
    <constant name="ETH" value="208">
      <type name="int"/>
    </constant>
    <constant name="Eabovedot" value="972">
      <type name="int"/>
    </constant>
    <constant name="Eacute" value="201">
      <type name="int"/>
    </constant>
    <constant name="Ebelowdot" value="16785080">
      <type name="int"/>
    </constant>
    <constant name="Ecaron" value="460">
      <type name="int"/>
    </constant>
    <constant name="Ecircumflex" value="202">
      <type name="int"/>
    </constant>
    <constant name="Ecircumflexacute" value="16785086">
      <type name="int"/>
    </constant>
    <constant name="Ecircumflexbelowdot" value="16785094">
      <type name="int"/>
    </constant>
    <constant name="Ecircumflexgrave" value="16785088">
      <type name="int"/>
    </constant>
    <constant name="Ecircumflexhook" value="16785090">
      <type name="int"/>
    </constant>
    <constant name="Ecircumflextilde" value="16785092">
      <type name="int"/>
    </constant>
    <constant name="EcuSign" value="16785568">
      <type name="int"/>
    </constant>
    <constant name="Ediaeresis" value="203">
      <type name="int"/>
    </constant>
    <constant name="Egrave" value="200">
      <type name="int"/>
    </constant>
    <constant name="Ehook" value="16785082">
      <type name="int"/>
    </constant>
    <constant name="Eisu_Shift" value="65327">
      <type name="int"/>
    </constant>
    <constant name="Eisu_toggle" value="65328">
      <type name="int"/>
    </constant>
    <constant name="Emacron" value="938">
      <type name="int"/>
    </constant>
    <constant name="End" value="65367">
      <type name="int"/>
    </constant>
    <class name="Engine"
           c:type="IBusEngine"
           parent="Service"
           glib:type-name="IBusEngine"
           glib:get-type="ibus_engine_get_type"
           glib:type-struct="EngineClass">
      <doc xml:whitespace="preserve">IBusEngine properties.</doc>
      <constructor name="new" c:identifier="ibus_engine_new">
        <doc xml:whitespace="preserve">New an IBusEngine.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusEngine.</doc>
          <type name="Engine" c:type="IBusEngine*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the IBusObject.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">Path for IBusService.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">An opened IBusConnection.</doc>
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="commit_text" c:identifier="ibus_engine_commit_text">
        <doc xml:whitespace="preserve">Commit output of input method to IBus client.
(Note: The text object will be released, if it is floating.
If caller want to keep the object, caller should make the object
sink by g_object_ref_sink.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">String commit to IBusEngine.</doc>
            <type name="Text" c:type="IBusText*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_preedit_text"
              c:identifier="ibus_engine_update_preedit_text">
        <doc xml:whitespace="preserve">Update the pre-edit buffer.
(Note: The text object will be released, if it is floating.
If caller want to keep the object, caller should make the object
sink by g_object_ref_sink.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">Update content.</doc>
            <type name="Text" c:type="IBusText*"/>
          </parameter>
          <parameter name="cursor_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Current position of cursor</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the pre-edit buffer is visible.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_preedit_text_with_mode"
              c:identifier="ibus_engine_update_preedit_text_with_mode">
        <doc xml:whitespace="preserve">Update the pre-edit buffer with commit mode.
if mode is IBUS_ENGINE_PREEDIT_CLEAR,
ibus_engine_update_preedit_text_with_mode is compatible with
ibus_engine_update_preedit_text.
(Note: The text object will be released, if it is floating.
If caller want to keep the object, caller should make the object
sink by g_object_ref_sink.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">Update content.</doc>
            <type name="Text" c:type="IBusText*"/>
          </parameter>
          <parameter name="cursor_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Current position of cursor</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the pre-edit buffer is visible.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pre-edit commit mode when the focus is lost.</doc>
            <type name="PreeditFocusMode" c:type="IBusPreeditFocusMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_preedit_text"
              c:identifier="ibus_engine_show_preedit_text">
        <doc xml:whitespace="preserve">Show the pre-edit buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="hide_preedit_text"
              c:identifier="ibus_engine_hide_preedit_text">
        <doc xml:whitespace="preserve">Hide the pre-edit buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="update_auxiliary_text"
              c:identifier="ibus_engine_update_auxiliary_text">
        <doc xml:whitespace="preserve">Update the auxiliary bar.
(Note: The text object will be released, if it is floating.
If caller want to keep the object, caller should make the object
sink by g_object_ref_sink.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">Update content.</doc>
            <type name="Text" c:type="IBusText*"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the auxiliary text bar is visible.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_auxiliary_text"
              c:identifier="ibus_engine_show_auxiliary_text">
        <doc xml:whitespace="preserve">Show the auxiliary bar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="hide_auxiliary_text"
              c:identifier="ibus_engine_hide_auxiliary_text">
        <doc xml:whitespace="preserve">Hide the auxiliary bar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="update_lookup_table"
              c:identifier="ibus_engine_update_lookup_table">
        <doc xml:whitespace="preserve">Update the lookup table.
(Note: The table object will be released, if it is floating.
If caller want to keep the object, caller should make the object
sink by g_object_ref_sink.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lookup_table" transfer-ownership="none">
            <doc xml:whitespace="preserve">An lookup_table.</doc>
            <type name="LookupTable" c:type="IBusLookupTable*"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the lookup_table is visible.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_lookup_table_fast"
              c:identifier="ibus_engine_update_lookup_table_fast">
        <doc xml:whitespace="preserve">Fast update for big lookup table.
If size of lookup table is not over table page size *4,
then it calls ibus_engine_update_lookup_table().
(Note: The table object will be released, if it is floating.
If caller want to keep the object, caller should make the object
sink by g_object_ref_sink.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lookup_table" transfer-ownership="none">
            <doc xml:whitespace="preserve">An lookup_table.</doc>
            <type name="LookupTable" c:type="IBusLookupTable*"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the lookup_table is visible.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_lookup_table"
              c:identifier="ibus_engine_show_lookup_table">
        <doc xml:whitespace="preserve">Show the lookup table.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="hide_lookup_table"
              c:identifier="ibus_engine_hide_lookup_table">
        <doc xml:whitespace="preserve">Hide the lookup table.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="forward_key_event"
              c:identifier="ibus_engine_forward_key_event">
        <doc xml:whitespace="preserve">Forward the key event.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">KeySym.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="keycode" transfer-ownership="none">
            <doc xml:whitespace="preserve">keyboard scancode.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">Key modifier flags.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_properties"
              c:identifier="ibus_engine_register_properties">
        <doc xml:whitespace="preserve">Register and show properties in language bar.
(Note: The prop_list object will be released, if it is floating.
If caller want to keep the object, caller should make the object
sink by g_object_ref_sink.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prop_list" transfer-ownership="none">
            <doc xml:whitespace="preserve">Property List.</doc>
            <type name="PropList" c:type="IBusPropList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_property"
              c:identifier="ibus_engine_update_property">
        <doc xml:whitespace="preserve">Update the state displayed in language bar.
(Note: The prop object will be released, if it is floating.
If caller want to keep the object, caller should make the object
sink by g_object_ref_sink.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:whitespace="preserve">IBusProperty to be updated.</doc>
            <type name="Property" c:type="IBusProperty*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_surrounding_text"
              c:identifier="ibus_engine_delete_surrounding_text">
        <doc xml:whitespace="preserve">Delete surrounding text.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:whitespace="preserve">The offset of the first char.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="nchars" transfer-ownership="none">
            <doc xml:whitespace="preserve">Number of chars to be deleted.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ibus_engine_get_name">
        <doc xml:whitespace="preserve">Return the name of IBusEngine.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Name of IBusEngine.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Connection of this IBusEngine.</doc>
        <type name="Connection" c:type="IBusConnection"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Name of this IBusEngine.</doc>
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="Service" c:type="IBusService"/>
      </field>
      <field name="enabled">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="has_focus">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="cursor_area">
        <type name="Rectangle" c:type="IBusRectangle"/>
      </field>
      <field name="client_capabilities">
        <type name="uint" c:type="guint"/>
      </field>
      <glib:signal name="candidate-clicked">
        <doc xml:whitespace="preserve">Emitted when candidate on lookup table is clicked.
Implement the member function candidate_clicked() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">Index of candidate be clicked.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:whitespace="preserve">Mouse button.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">Keyboard state.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="cursor-down">
        <doc xml:whitespace="preserve">Emitted when the down cursor button is pressed.
Implement the member function cursor_down() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cursor-up">
        <doc xml:whitespace="preserve">Emitted when the up cursor button is pressed.
Implement the member function cursor_up() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="disable">
        <doc xml:whitespace="preserve">Emitted when the IME is disabled.
Implement the member function set_disable() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="enable">
        <doc xml:whitespace="preserve">Emitted when the IME is enabled.
Implement the member function set_enable() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="focus-in">
        <doc xml:whitespace="preserve">Emitted when the client application get the focus.
Implement the member function focus_in() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="focus-out">
        <doc xml:whitespace="preserve">Emitted when the client application  lost the focus.
Implement the member function focus_out() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="page-down">
        <doc xml:whitespace="preserve">Emitted when the page-down button is pressed.
Implement the member function page_down() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="page-up">
        <doc xml:whitespace="preserve">Emitted when the page-up button is pressed.
Implement the member function page_up() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="process-key-event">
        <doc xml:whitespace="preserve">Emitted when a key event is received.
Implement the member function process_key_event() in extended class to receive this signal.
Both the key symbol and keycode are passed to the member function.
See ibus_input_context_process_key_event() for further explanation of
key symbol, keycode and which to use.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">TRUE for successfully process the key; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">Key symbol of the key press.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="keycode" transfer-ownership="none">
            <doc xml:whitespace="preserve">KeyCode of the key press.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">Key modifier flags.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="property-activate">
        <doc xml:whitespace="preserve">Emitted when a property is activated or change changed.
Implement the member function property_activate() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Property name.</doc>
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">Property state.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="property-hide">
        <doc xml:whitespace="preserve">Emitted when a property is hidden.
Implement the member function property_hide() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Property name.</doc>
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="property-show">
        <doc xml:whitespace="preserve">Emitted when a property is shown.
Implement the member function property_side() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Property name.</doc>
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reset">
        <doc xml:whitespace="preserve">Emitted when the IME is reset.
Implement the member function reset() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="set-capabilities">
        <doc xml:whitespace="preserve">Emitted when the client application capabilities is set.
Implement the member function set_capabilities() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="caps" transfer-ownership="none">
            <doc xml:whitespace="preserve">Capabilities flags of IBusEngine, see #IBusCapabilite</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-cursor-location">
        <doc xml:whitespace="preserve">Emitted when the location of IME is set.
Implement the member function set_cursor_location() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate of the cursor.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate of the cursor.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="w" transfer-ownership="none">
            <doc xml:whitespace="preserve">Width of the cursor.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="h" transfer-ownership="none">
            <doc xml:whitespace="preserve">Height of the cursor.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EngineClass"
            c:type="IBusEngineClass"
            glib:is-gtype-struct-for="Engine">
      <field name="parent">
        <type name="ServiceClass" c:type="IBusServiceClass"/>
      </field>
      <field name="process_key_event">
        <callback name="process_key_event" c:type="process_key_event">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
            <parameter name="keyval" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
            <parameter name="keycode" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="focus_in">
        <callback name="focus_in" c:type="focus_in">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="focus_out">
        <callback name="focus_out" c:type="focus_out">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset" c:type="reset">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="enable">
        <callback name="enable" c:type="enable">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disable">
        <callback name="disable" c:type="disable">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_cursor_location">
        <callback name="set_cursor_location" c:type="set_cursor_location">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="int" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="int" c:type="gint"/>
            </parameter>
            <parameter name="w" transfer-ownership="none">
              <type name="int" c:type="gint"/>
            </parameter>
            <parameter name="h" transfer-ownership="none">
              <type name="int" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_capabilities">
        <callback name="set_capabilities" c:type="set_capabilities">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
            <parameter name="caps" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="page_up">
        <callback name="page_up" c:type="page_up">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="page_down">
        <callback name="page_down" c:type="page_down">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cursor_up">
        <callback name="cursor_up" c:type="cursor_up">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cursor_down">
        <callback name="cursor_down" c:type="cursor_down">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="property_activate">
        <callback name="property_activate" c:type="property_activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
            <parameter name="prop_name" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="prop_state" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="property_show">
        <callback name="property_show" c:type="property_show">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
            <parameter name="prop_name" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="property_hide">
        <callback name="property_hide" c:type="property_hide">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
            <parameter name="prop_name" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="candidate_clicked">
        <callback name="candidate_clicked" c:type="candidate_clicked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="Engine" c:type="IBusEngine*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
            <parameter name="button" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="any"/>
        </array>
      </field>
    </record>
    <class name="EngineDesc"
           c:type="IBusEngineDesc"
           parent="Serializable"
           glib:type-name="IBusEngineDesc"
           glib:get-type="ibus_engine_desc_get_type"
           glib:type-struct="EngineDescClass">
      <doc xml:whitespace="preserve">Input method engine description data.</doc>
      <constructor name="new" c:identifier="ibus_engine_desc_new">
        <doc xml:whitespace="preserve">New a IBusEngineDesc.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusEngineDesc.</doc>
          <type name="EngineDesc" c:type="IBusEngineDesc*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="longname" transfer-ownership="none">
            <doc xml:whitespace="preserve">Long name of the input method engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:whitespace="preserve">Input method engine description.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:whitespace="preserve">Language (e.g. zh, jp) supported by this input method engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="license" transfer-ownership="none">
            <doc xml:whitespace="preserve">License of the input method engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="author" transfer-ownership="none">
            <doc xml:whitespace="preserve">Author of the input method engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon file of this engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="layout" transfer-ownership="none">
            <doc xml:whitespace="preserve">Keyboard layout</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new2" c:identifier="ibus_engine_desc_new2">
        <doc xml:whitespace="preserve">New a IBusEngineDesc.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusEngineDesc.</doc>
          <type name="EngineDesc" c:type="IBusEngineDesc*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="longname" transfer-ownership="none">
            <doc xml:whitespace="preserve">Long name of the input method engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:whitespace="preserve">Input method engine description.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:whitespace="preserve">Language (e.g. zh, jp) supported by this input method engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="license" transfer-ownership="none">
            <doc xml:whitespace="preserve">License of the input method engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="author" transfer-ownership="none">
            <doc xml:whitespace="preserve">Author of the input method engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon file of this engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="layout" transfer-ownership="none">
            <doc xml:whitespace="preserve">Keyboard layout</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="hotkeys" transfer-ownership="none">
            <doc xml:whitespace="preserve">Hotkeys for switching to this engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_xml_node"
                   c:identifier="ibus_engine_desc_new_from_xml_node">
        <doc xml:whitespace="preserve">New a IBusEngineDesc from an XML node.
&lt;note&gt;&lt;para&gt;This function is called by ibus_component_new_from_file(),
so developers normally do not need to call it directly.
&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusEngineDesc that contains description from</doc>
          <type name="EngineDesc" c:type="IBusEngineDesc*"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <doc xml:whitespace="preserve">An XML node</doc>
            <type name="XMLNode" c:type="XMLNode*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="output" c:identifier="ibus_engine_desc_output">
        <doc xml:whitespace="preserve">Output XML-formatted input method engine description.
The result will be append to GString specified in @output.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="output" transfer-ownership="none">
            <doc xml:whitespace="preserve">XML-formatted Input method engine description.</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="indent" transfer-ownership="none">
            <doc xml:whitespace="preserve">Number of indent (showed as 4 spaces).</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Serializable" c:type="IBusSerializable"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="longname">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="language">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="license">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="author">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="icon">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="layout">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="hotkeys">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="rank">
        <type name="uint" c:type="guint"/>
      </field>
    </class>
    <record name="EngineDescClass"
            c:type="IBusEngineDescClass"
            glib:is-gtype-struct-for="EngineDesc">
      <field name="parent">
        <type name="SerializableClass" c:type="IBusSerializableClass"/>
      </field>
    </record>
    <constant name="Eogonek" value="458">
      <type name="int"/>
    </constant>
    <record name="Error" c:type="IBusError">
      <constructor name="new" c:identifier="ibus_error_new">
        <doc xml:whitespace="preserve">New an empty IBusError.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusError.</doc>
          <type name="Error" c:type="IBusError*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_text"
                   c:identifier="ibus_error_new_from_text">
        <doc xml:whitespace="preserve">New an IBusError from error name and message.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusError.</doc>
          <type name="Error" c:type="IBusError*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">The error name.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">Detailed error message.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_printf"
                   c:identifier="ibus_error_new_from_printf"
                   introspectable="0">
        <doc xml:whitespace="preserve">New an IBusError from error name and a printf-formatted message.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusError.</doc>
          <type name="Error" c:type="IBusError*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">The error name.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="format_message" transfer-ownership="none">
            <doc xml:whitespace="preserve">printf() formatted error message.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_message"
                   c:identifier="ibus_error_new_from_message">
        <doc xml:whitespace="preserve">New an IBusError from a #IBusMessage.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusError.</doc>
          <type name="Error" c:type="IBusError*"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">A DBusMessage</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="free" c:identifier="ibus_error_free">
        <doc xml:whitespace="preserve">Free an IBusError.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <constant name="Escape" value="65307">
      <type name="int"/>
    </constant>
    <constant name="Eth" value="208">
      <type name="int"/>
    </constant>
    <constant name="Etilde" value="16785084">
      <type name="int"/>
    </constant>
    <constant name="EuroSign" value="8364">
      <type name="int"/>
    </constant>
    <constant name="Execute" value="65378">
      <type name="int"/>
    </constant>
    <constant name="F" value="70">
      <type name="int"/>
    </constant>
    <constant name="F1" value="65470">
      <type name="int"/>
    </constant>
    <constant name="F10" value="65479">
      <type name="int"/>
    </constant>
    <constant name="F11" value="65480">
      <type name="int"/>
    </constant>
    <constant name="F12" value="65481">
      <type name="int"/>
    </constant>
    <constant name="F13" value="65482">
      <type name="int"/>
    </constant>
    <constant name="F14" value="65483">
      <type name="int"/>
    </constant>
    <constant name="F15" value="65484">
      <type name="int"/>
    </constant>
    <constant name="F16" value="65485">
      <type name="int"/>
    </constant>
    <constant name="F17" value="65486">
      <type name="int"/>
    </constant>
    <constant name="F18" value="65487">
      <type name="int"/>
    </constant>
    <constant name="F19" value="65488">
      <type name="int"/>
    </constant>
    <constant name="F2" value="65471">
      <type name="int"/>
    </constant>
    <constant name="F20" value="65489">
      <type name="int"/>
    </constant>
    <constant name="F21" value="65490">
      <type name="int"/>
    </constant>
    <constant name="F22" value="65491">
      <type name="int"/>
    </constant>
    <constant name="F23" value="65492">
      <type name="int"/>
    </constant>
    <constant name="F24" value="65493">
      <type name="int"/>
    </constant>
    <constant name="F25" value="65494">
      <type name="int"/>
    </constant>
    <constant name="F26" value="65495">
      <type name="int"/>
    </constant>
    <constant name="F27" value="65496">
      <type name="int"/>
    </constant>
    <constant name="F28" value="65497">
      <type name="int"/>
    </constant>
    <constant name="F29" value="65498">
      <type name="int"/>
    </constant>
    <constant name="F3" value="65472">
      <type name="int"/>
    </constant>
    <constant name="F30" value="65499">
      <type name="int"/>
    </constant>
    <constant name="F31" value="65500">
      <type name="int"/>
    </constant>
    <constant name="F32" value="65501">
      <type name="int"/>
    </constant>
    <constant name="F33" value="65502">
      <type name="int"/>
    </constant>
    <constant name="F34" value="65503">
      <type name="int"/>
    </constant>
    <constant name="F35" value="65504">
      <type name="int"/>
    </constant>
    <constant name="F4" value="65473">
      <type name="int"/>
    </constant>
    <constant name="F5" value="65474">
      <type name="int"/>
    </constant>
    <constant name="F6" value="65475">
      <type name="int"/>
    </constant>
    <constant name="F7" value="65476">
      <type name="int"/>
    </constant>
    <constant name="F8" value="65477">
      <type name="int"/>
    </constant>
    <constant name="F9" value="65478">
      <type name="int"/>
    </constant>
    <constant name="FFrancSign" value="16785571">
      <type name="int"/>
    </constant>
    <constant name="Fabovedot" value="16784926">
      <type name="int"/>
    </constant>
    <class name="Factory"
           c:type="IBusFactory"
           parent="Service"
           glib:type-name="IBusFactory"
           glib:get-type="ibus_factory_get_type"
           glib:type-struct="FactoryClass">
      <doc xml:whitespace="preserve">An opaque data type representing an IBusFactory.</doc>
      <constructor name="new" c:identifier="ibus_factory_new">
        <doc xml:whitespace="preserve">New an IBusFactory.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusFactory.</doc>
          <type name="Factory" c:type="IBusFactory*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusConnection.</doc>
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_engine" c:identifier="ibus_factory_add_engine">
        <doc xml:whitespace="preserve">Add an engine to the factory.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="engine_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of an engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="engine_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">GType of an engine.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Connection of this IBusFactory.</doc>
        <type name="Connection" c:type="IBusConnection"/>
      </property>
      <field name="parent">
        <type name="Service" c:type="IBusService"/>
      </field>
    </class>
    <record name="FactoryClass"
            c:type="IBusFactoryClass"
            glib:is-gtype-struct-for="Factory">
      <field name="parent">
        <type name="ServiceClass" c:type="IBusServiceClass"/>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="any"/>
        </array>
      </field>
    </record>
    <constant name="Farsi_0" value="16778992">
      <type name="int"/>
    </constant>
    <constant name="Farsi_1" value="16778993">
      <type name="int"/>
    </constant>
    <constant name="Farsi_2" value="16778994">
      <type name="int"/>
    </constant>
    <constant name="Farsi_3" value="16778995">
      <type name="int"/>
    </constant>
    <constant name="Farsi_4" value="16778996">
      <type name="int"/>
    </constant>
    <constant name="Farsi_5" value="16778997">
      <type name="int"/>
    </constant>
    <constant name="Farsi_6" value="16778998">
      <type name="int"/>
    </constant>
    <constant name="Farsi_7" value="16778999">
      <type name="int"/>
    </constant>
    <constant name="Farsi_8" value="16779000">
      <type name="int"/>
    </constant>
    <constant name="Farsi_9" value="16779001">
      <type name="int"/>
    </constant>
    <constant name="Farsi_yeh" value="16778956">
      <type name="int"/>
    </constant>
    <constant name="Find" value="65384">
      <type name="int"/>
    </constant>
    <constant name="First_Virtual_Screen" value="65232">
      <type name="int"/>
    </constant>
    <callback name="FreeFunc" c:type="IBusFreeFunc">
      <doc xml:whitespace="preserve">Free function prototype.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">object to be freed.</doc>
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="G" value="71">
      <type name="int"/>
    </constant>
    <constant name="Gabovedot" value="725">
      <type name="int"/>
    </constant>
    <constant name="Gbreve" value="683">
      <type name="int"/>
    </constant>
    <constant name="Gcaron" value="16777702">
      <type name="int"/>
    </constant>
    <constant name="Gcedilla" value="939">
      <type name="int"/>
    </constant>
    <constant name="Gcircumflex" value="728">
      <type name="int"/>
    </constant>
    <constant name="Georgian_an" value="16781520">
      <type name="int"/>
    </constant>
    <constant name="Georgian_ban" value="16781521">
      <type name="int"/>
    </constant>
    <constant name="Georgian_can" value="16781546">
      <type name="int"/>
    </constant>
    <constant name="Georgian_char" value="16781549">
      <type name="int"/>
    </constant>
    <constant name="Georgian_chin" value="16781545">
      <type name="int"/>
    </constant>
    <constant name="Georgian_cil" value="16781548">
      <type name="int"/>
    </constant>
    <constant name="Georgian_don" value="16781523">
      <type name="int"/>
    </constant>
    <constant name="Georgian_en" value="16781524">
      <type name="int"/>
    </constant>
    <constant name="Georgian_fi" value="16781558">
      <type name="int"/>
    </constant>
    <constant name="Georgian_gan" value="16781522">
      <type name="int"/>
    </constant>
    <constant name="Georgian_ghan" value="16781542">
      <type name="int"/>
    </constant>
    <constant name="Georgian_hae" value="16781552">
      <type name="int"/>
    </constant>
    <constant name="Georgian_har" value="16781556">
      <type name="int"/>
    </constant>
    <constant name="Georgian_he" value="16781553">
      <type name="int"/>
    </constant>
    <constant name="Georgian_hie" value="16781554">
      <type name="int"/>
    </constant>
    <constant name="Georgian_hoe" value="16781557">
      <type name="int"/>
    </constant>
    <constant name="Georgian_in" value="16781528">
      <type name="int"/>
    </constant>
    <constant name="Georgian_jhan" value="16781551">
      <type name="int"/>
    </constant>
    <constant name="Georgian_jil" value="16781547">
      <type name="int"/>
    </constant>
    <constant name="Georgian_kan" value="16781529">
      <type name="int"/>
    </constant>
    <constant name="Georgian_khar" value="16781541">
      <type name="int"/>
    </constant>
    <constant name="Georgian_las" value="16781530">
      <type name="int"/>
    </constant>
    <constant name="Georgian_man" value="16781531">
      <type name="int"/>
    </constant>
    <constant name="Georgian_nar" value="16781532">
      <type name="int"/>
    </constant>
    <constant name="Georgian_on" value="16781533">
      <type name="int"/>
    </constant>
    <constant name="Georgian_par" value="16781534">
      <type name="int"/>
    </constant>
    <constant name="Georgian_phar" value="16781540">
      <type name="int"/>
    </constant>
    <constant name="Georgian_qar" value="16781543">
      <type name="int"/>
    </constant>
    <constant name="Georgian_rae" value="16781536">
      <type name="int"/>
    </constant>
    <constant name="Georgian_san" value="16781537">
      <type name="int"/>
    </constant>
    <constant name="Georgian_shin" value="16781544">
      <type name="int"/>
    </constant>
    <constant name="Georgian_tan" value="16781527">
      <type name="int"/>
    </constant>
    <constant name="Georgian_tar" value="16781538">
      <type name="int"/>
    </constant>
    <constant name="Georgian_un" value="16781539">
      <type name="int"/>
    </constant>
    <constant name="Georgian_vin" value="16781525">
      <type name="int"/>
    </constant>
    <constant name="Georgian_we" value="16781555">
      <type name="int"/>
    </constant>
    <constant name="Georgian_xan" value="16781550">
      <type name="int"/>
    </constant>
    <constant name="Georgian_zen" value="16781526">
      <type name="int"/>
    </constant>
    <constant name="Georgian_zhar" value="16781535">
      <type name="int"/>
    </constant>
    <constant name="Greek_ALPHA" value="1985">
      <type name="int"/>
    </constant>
    <constant name="Greek_ALPHAaccent" value="1953">
      <type name="int"/>
    </constant>
    <constant name="Greek_BETA" value="1986">
      <type name="int"/>
    </constant>
    <constant name="Greek_CHI" value="2007">
      <type name="int"/>
    </constant>
    <constant name="Greek_DELTA" value="1988">
      <type name="int"/>
    </constant>
    <constant name="Greek_EPSILON" value="1989">
      <type name="int"/>
    </constant>
    <constant name="Greek_EPSILONaccent" value="1954">
      <type name="int"/>
    </constant>
    <constant name="Greek_ETA" value="1991">
      <type name="int"/>
    </constant>
    <constant name="Greek_ETAaccent" value="1955">
      <type name="int"/>
    </constant>
    <constant name="Greek_GAMMA" value="1987">
      <type name="int"/>
    </constant>
    <constant name="Greek_IOTA" value="1993">
      <type name="int"/>
    </constant>
    <constant name="Greek_IOTAaccent" value="1956">
      <type name="int"/>
    </constant>
    <constant name="Greek_IOTAdiaeresis" value="1957">
      <type name="int"/>
    </constant>
    <constant name="Greek_IOTAdieresis" value="1957">
      <type name="int"/>
    </constant>
    <constant name="Greek_KAPPA" value="1994">
      <type name="int"/>
    </constant>
    <constant name="Greek_LAMBDA" value="1995">
      <type name="int"/>
    </constant>
    <constant name="Greek_LAMDA" value="1995">
      <type name="int"/>
    </constant>
    <constant name="Greek_MU" value="1996">
      <type name="int"/>
    </constant>
    <constant name="Greek_NU" value="1997">
      <type name="int"/>
    </constant>
    <constant name="Greek_OMEGA" value="2009">
      <type name="int"/>
    </constant>
    <constant name="Greek_OMEGAaccent" value="1963">
      <type name="int"/>
    </constant>
    <constant name="Greek_OMICRON" value="1999">
      <type name="int"/>
    </constant>
    <constant name="Greek_OMICRONaccent" value="1959">
      <type name="int"/>
    </constant>
    <constant name="Greek_PHI" value="2006">
      <type name="int"/>
    </constant>
    <constant name="Greek_PI" value="2000">
      <type name="int"/>
    </constant>
    <constant name="Greek_PSI" value="2008">
      <type name="int"/>
    </constant>
    <constant name="Greek_RHO" value="2001">
      <type name="int"/>
    </constant>
    <constant name="Greek_SIGMA" value="2002">
      <type name="int"/>
    </constant>
    <constant name="Greek_TAU" value="2004">
      <type name="int"/>
    </constant>
    <constant name="Greek_THETA" value="1992">
      <type name="int"/>
    </constant>
    <constant name="Greek_UPSILON" value="2005">
      <type name="int"/>
    </constant>
    <constant name="Greek_UPSILONaccent" value="1960">
      <type name="int"/>
    </constant>
    <constant name="Greek_UPSILONdieresis" value="1961">
      <type name="int"/>
    </constant>
    <constant name="Greek_XI" value="1998">
      <type name="int"/>
    </constant>
    <constant name="Greek_ZETA" value="1990">
      <type name="int"/>
    </constant>
    <constant name="Greek_accentdieresis" value="1966">
      <type name="int"/>
    </constant>
    <constant name="Greek_alpha" value="2017">
      <type name="int"/>
    </constant>
    <constant name="Greek_alphaaccent" value="1969">
      <type name="int"/>
    </constant>
    <constant name="Greek_beta" value="2018">
      <type name="int"/>
    </constant>
    <constant name="Greek_chi" value="2039">
      <type name="int"/>
    </constant>
    <constant name="Greek_delta" value="2020">
      <type name="int"/>
    </constant>
    <constant name="Greek_epsilon" value="2021">
      <type name="int"/>
    </constant>
    <constant name="Greek_epsilonaccent" value="1970">
      <type name="int"/>
    </constant>
    <constant name="Greek_eta" value="2023">
      <type name="int"/>
    </constant>
    <constant name="Greek_etaaccent" value="1971">
      <type name="int"/>
    </constant>
    <constant name="Greek_finalsmallsigma" value="2035">
      <type name="int"/>
    </constant>
    <constant name="Greek_gamma" value="2019">
      <type name="int"/>
    </constant>
    <constant name="Greek_horizbar" value="1967">
      <type name="int"/>
    </constant>
    <constant name="Greek_iota" value="2025">
      <type name="int"/>
    </constant>
    <constant name="Greek_iotaaccent" value="1972">
      <type name="int"/>
    </constant>
    <constant name="Greek_iotaaccentdieresis" value="1974">
      <type name="int"/>
    </constant>
    <constant name="Greek_iotadieresis" value="1973">
      <type name="int"/>
    </constant>
    <constant name="Greek_kappa" value="2026">
      <type name="int"/>
    </constant>
    <constant name="Greek_lambda" value="2027">
      <type name="int"/>
    </constant>
    <constant name="Greek_lamda" value="2027">
      <type name="int"/>
    </constant>
    <constant name="Greek_mu" value="2028">
      <type name="int"/>
    </constant>
    <constant name="Greek_nu" value="2029">
      <type name="int"/>
    </constant>
    <constant name="Greek_omega" value="2041">
      <type name="int"/>
    </constant>
    <constant name="Greek_omegaaccent" value="1979">
      <type name="int"/>
    </constant>
    <constant name="Greek_omicron" value="2031">
      <type name="int"/>
    </constant>
    <constant name="Greek_omicronaccent" value="1975">
      <type name="int"/>
    </constant>
    <constant name="Greek_phi" value="2038">
      <type name="int"/>
    </constant>
    <constant name="Greek_pi" value="2032">
      <type name="int"/>
    </constant>
    <constant name="Greek_psi" value="2040">
      <type name="int"/>
    </constant>
    <constant name="Greek_rho" value="2033">
      <type name="int"/>
    </constant>
    <constant name="Greek_sigma" value="2034">
      <type name="int"/>
    </constant>
    <constant name="Greek_switch" value="65406">
      <type name="int"/>
    </constant>
    <constant name="Greek_tau" value="2036">
      <type name="int"/>
    </constant>
    <constant name="Greek_theta" value="2024">
      <type name="int"/>
    </constant>
    <constant name="Greek_upsilon" value="2037">
      <type name="int"/>
    </constant>
    <constant name="Greek_upsilonaccent" value="1976">
      <type name="int"/>
    </constant>
    <constant name="Greek_upsilonaccentdieresis" value="1978">
      <type name="int"/>
    </constant>
    <constant name="Greek_upsilondieresis" value="1977">
      <type name="int"/>
    </constant>
    <constant name="Greek_xi" value="2030">
      <type name="int"/>
    </constant>
    <constant name="Greek_zeta" value="2022">
      <type name="int"/>
    </constant>
    <constant name="H" value="72">
      <type name="int"/>
    </constant>
    <constant name="Hangul" value="65329">
      <type name="int"/>
    </constant>
    <constant name="Hangul_A" value="3775">
      <type name="int"/>
    </constant>
    <constant name="Hangul_AE" value="3776">
      <type name="int"/>
    </constant>
    <constant name="Hangul_AraeA" value="3830">
      <type name="int"/>
    </constant>
    <constant name="Hangul_AraeAE" value="3831">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Banja" value="65337">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Cieuc" value="3770">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Codeinput" value="65335">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Dikeud" value="3751">
      <type name="int"/>
    </constant>
    <constant name="Hangul_E" value="3780">
      <type name="int"/>
    </constant>
    <constant name="Hangul_EO" value="3779">
      <type name="int"/>
    </constant>
    <constant name="Hangul_EU" value="3793">
      <type name="int"/>
    </constant>
    <constant name="Hangul_End" value="65331">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Hanja" value="65332">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Hieuh" value="3774">
      <type name="int"/>
    </constant>
    <constant name="Hangul_I" value="3795">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Ieung" value="3767">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Cieuc" value="3818">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Dikeud" value="3802">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Hieuh" value="3822">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Ieung" value="3816">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Jieuj" value="3817">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Khieuq" value="3819">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Kiyeog" value="3796">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_KiyeogSios" value="3798">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_KkogjiDalrinIeung" value="3833">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Mieum" value="3811">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Nieun" value="3799">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_NieunHieuh" value="3801">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_NieunJieuj" value="3800">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_PanSios" value="3832">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Phieuf" value="3821">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Pieub" value="3812">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_PieubSios" value="3813">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Rieul" value="3803">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_RieulHieuh" value="3810">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_RieulKiyeog" value="3804">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_RieulMieum" value="3805">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_RieulPhieuf" value="3809">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_RieulPieub" value="3806">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_RieulSios" value="3807">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_RieulTieut" value="3808">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Sios" value="3814">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_SsangKiyeog" value="3797">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_SsangSios" value="3815">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_Tieut" value="3820">
      <type name="int"/>
    </constant>
    <constant name="Hangul_J_YeorinHieuh" value="3834">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Jamo" value="65333">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Jeonja" value="65336">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Jieuj" value="3768">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Khieuq" value="3771">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Kiyeog" value="3745">
      <type name="int"/>
    </constant>
    <constant name="Hangul_KiyeogSios" value="3747">
      <type name="int"/>
    </constant>
    <constant name="Hangul_KkogjiDalrinIeung" value="3827">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Mieum" value="3761">
      <type name="int"/>
    </constant>
    <constant name="Hangul_MultipleCandidate" value="65341">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Nieun" value="3748">
      <type name="int"/>
    </constant>
    <constant name="Hangul_NieunHieuh" value="3750">
      <type name="int"/>
    </constant>
    <constant name="Hangul_NieunJieuj" value="3749">
      <type name="int"/>
    </constant>
    <constant name="Hangul_O" value="3783">
      <type name="int"/>
    </constant>
    <constant name="Hangul_OE" value="3786">
      <type name="int"/>
    </constant>
    <constant name="Hangul_PanSios" value="3826">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Phieuf" value="3773">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Pieub" value="3762">
      <type name="int"/>
    </constant>
    <constant name="Hangul_PieubSios" value="3764">
      <type name="int"/>
    </constant>
    <constant name="Hangul_PostHanja" value="65339">
      <type name="int"/>
    </constant>
    <constant name="Hangul_PreHanja" value="65338">
      <type name="int"/>
    </constant>
    <constant name="Hangul_PreviousCandidate" value="65342">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Rieul" value="3753">
      <type name="int"/>
    </constant>
    <constant name="Hangul_RieulHieuh" value="3760">
      <type name="int"/>
    </constant>
    <constant name="Hangul_RieulKiyeog" value="3754">
      <type name="int"/>
    </constant>
    <constant name="Hangul_RieulMieum" value="3755">
      <type name="int"/>
    </constant>
    <constant name="Hangul_RieulPhieuf" value="3759">
      <type name="int"/>
    </constant>
    <constant name="Hangul_RieulPieub" value="3756">
      <type name="int"/>
    </constant>
    <constant name="Hangul_RieulSios" value="3757">
      <type name="int"/>
    </constant>
    <constant name="Hangul_RieulTieut" value="3758">
      <type name="int"/>
    </constant>
    <constant name="Hangul_RieulYeorinHieuh" value="3823">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Romaja" value="65334">
      <type name="int"/>
    </constant>
    <constant name="Hangul_SingleCandidate" value="65340">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Sios" value="3765">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Special" value="65343">
      <type name="int"/>
    </constant>
    <constant name="Hangul_SsangDikeud" value="3752">
      <type name="int"/>
    </constant>
    <constant name="Hangul_SsangJieuj" value="3769">
      <type name="int"/>
    </constant>
    <constant name="Hangul_SsangKiyeog" value="3746">
      <type name="int"/>
    </constant>
    <constant name="Hangul_SsangPieub" value="3763">
      <type name="int"/>
    </constant>
    <constant name="Hangul_SsangSios" value="3766">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Start" value="65330">
      <type name="int"/>
    </constant>
    <constant name="Hangul_SunkyeongeumMieum" value="3824">
      <type name="int"/>
    </constant>
    <constant name="Hangul_SunkyeongeumPhieuf" value="3828">
      <type name="int"/>
    </constant>
    <constant name="Hangul_SunkyeongeumPieub" value="3825">
      <type name="int"/>
    </constant>
    <constant name="Hangul_Tieut" value="3772">
      <type name="int"/>
    </constant>
    <constant name="Hangul_U" value="3788">
      <type name="int"/>
    </constant>
    <constant name="Hangul_WA" value="3784">
      <type name="int"/>
    </constant>
    <constant name="Hangul_WAE" value="3785">
      <type name="int"/>
    </constant>
    <constant name="Hangul_WE" value="3790">
      <type name="int"/>
    </constant>
    <constant name="Hangul_WEO" value="3789">
      <type name="int"/>
    </constant>
    <constant name="Hangul_WI" value="3791">
      <type name="int"/>
    </constant>
    <constant name="Hangul_YA" value="3777">
      <type name="int"/>
    </constant>
    <constant name="Hangul_YAE" value="3778">
      <type name="int"/>
    </constant>
    <constant name="Hangul_YE" value="3782">
      <type name="int"/>
    </constant>
    <constant name="Hangul_YEO" value="3781">
      <type name="int"/>
    </constant>
    <constant name="Hangul_YI" value="3794">
      <type name="int"/>
    </constant>
    <constant name="Hangul_YO" value="3787">
      <type name="int"/>
    </constant>
    <constant name="Hangul_YU" value="3792">
      <type name="int"/>
    </constant>
    <constant name="Hangul_YeorinHieuh" value="3829">
      <type name="int"/>
    </constant>
    <constant name="Hangul_switch" value="65406">
      <type name="int"/>
    </constant>
    <constant name="Hankaku" value="65321">
      <type name="int"/>
    </constant>
    <constant name="Hcircumflex" value="678">
      <type name="int"/>
    </constant>
    <constant name="Hebrew_switch" value="65406">
      <type name="int"/>
    </constant>
    <constant name="Help" value="65386">
      <type name="int"/>
    </constant>
    <constant name="Henkan" value="65315">
      <type name="int"/>
    </constant>
    <constant name="Henkan_Mode" value="65315">
      <type name="int"/>
    </constant>
    <constant name="Hiragana" value="65317">
      <type name="int"/>
    </constant>
    <constant name="Hiragana_Katakana" value="65319">
      <type name="int"/>
    </constant>
    <constant name="Home" value="65360">
      <type name="int"/>
    </constant>
    <class name="HotkeyProfile"
           c:type="IBusHotkeyProfile"
           parent="Serializable"
           glib:type-name="IBusHotkeyProfile"
           glib:get-type="ibus_hotkey_profile_get_type"
           glib:type-struct="HotkeyProfileClass">
      <doc xml:whitespace="preserve">An opaque data type representing an IBusHotkeyProfile.</doc>
      <constructor name="new" c:identifier="ibus_hotkey_profile_new">
        <doc xml:whitespace="preserve">New an IBusHotkeyProfile.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusHotkeyProfile.</doc>
          <type name="HotkeyProfile" c:type="IBusHotkeyProfile*"/>
        </return-value>
      </constructor>
      <method name="add_hotkey" c:identifier="ibus_hotkey_profile_add_hotkey">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="modifiers" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_hotkey_from_string"
              c:identifier="ibus_hotkey_profile_add_hotkey_from_string">
        <doc xml:whitespace="preserve">Add a hotkey and its associated event to an IBusHotkeyProfile.
The hotkey is in string format, such like &lt;constant&gt;Control+Shift+A&lt;/constant&gt;.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">FALSE if @str contains invalid symbol; TRUE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">Key in string representation.  '+' is the separator.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">The event to be associated.</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_hotkey"
              c:identifier="ibus_hotkey_profile_remove_hotkey">
        <doc xml:whitespace="preserve">Remove the hotkey for an IBusHotkeyProfile.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">FALSE if the key is not in @profile, TRUE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">Keycode of the hotkey.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="modifiers" transfer-ownership="none">
            <doc xml:whitespace="preserve">Modifiers of the hotkey.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_hotkey_by_event"
              c:identifier="ibus_hotkey_profile_remove_hotkey_by_event">
        <doc xml:whitespace="preserve">Remove the hotkey for an IBusHotkeyProfile by event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">FALSE if no such event in @profile, TRUE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">The associated event.</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_key_event"
              c:identifier="ibus_hotkey_profile_filter_key_event">
        <doc xml:whitespace="preserve">Emit a &lt;constant&gt;::trigger&lt;/constant&gt; signal when a hotkey is in a profile.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">0 if releasing a hotkey and the hotkey is not in the profile ; an associated event otherwise.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">Keycode of the hotkey.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="modifiers" transfer-ownership="none">
            <doc xml:whitespace="preserve">Modifiers of the hotkey.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="prev_keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">Keycode of the hotkey.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="prev_modifiers" transfer-ownership="none">
            <doc xml:whitespace="preserve">Modifiers of the hotkey.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data for signal "trigger".</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_hotkey"
              c:identifier="ibus_hotkey_profile_lookup_hotkey">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The event associated to the hotkey or 0 if the hotkey is not in the profile.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">Keycode of the hotkey.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="modifiers" transfer-ownership="none">
            <doc xml:whitespace="preserve">Modifiers of the hotkey.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Serializable" c:type="IBusSerializable"/>
      </field>
      <glib:signal name="trigger">
        <doc xml:whitespace="preserve">Emitted when a hotkey is pressed and the hotkey is in profile.
Implement the member function trigger() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;The last parameter, user_data is not actually a valid parameter. It is displayed because of GtkDoc bug.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">An event in GQuark.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">User data for callback.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="HotkeyProfileClass"
            c:type="IBusHotkeyProfileClass"
            glib:is-gtype-struct-for="HotkeyProfile">
      <field name="parent">
        <type name="SerializableClass" c:type="IBusSerializableClass"/>
      </field>
      <field name="trigger">
        <callback name="trigger" c:type="trigger">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="profile" transfer-ownership="none">
              <type name="HotkeyProfile" c:type="IBusHotkeyProfile*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="GLib.Quark" c:type="GQuark"/>
            </parameter>
            <parameter name="user_data" transfer-ownership="none" closure="2">
              <type name="any" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <constant name="Hstroke" value="673">
      <type name="int"/>
    </constant>
    <constant name="Hyper_L" value="65517">
      <type name="int"/>
    </constant>
    <constant name="Hyper_R" value="65518">
      <type name="int"/>
    </constant>
    <constant name="I" value="73">
      <type name="int"/>
    </constant>
    <callback name="IBusMessageFunc" c:type="IBusIBusMessageFunc">
      <doc xml:whitespace="preserve">Prototype of an IBusIBusMessage callback function.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusConnection.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusMessage.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="IBusSignalFunc" c:type="IBusIBusSignalFunc">
      <doc xml:whitespace="preserve">Prototype of an IBusIBusSignal callback function.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusConnection.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusMessage.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="INTERFACE_CONFIG" value="org.freedesktop.IBus.Config">
      <type name="utf8"/>
    </constant>
    <constant name="INTERFACE_ENGINE" value="org.freedesktop.IBus.Engine">
      <type name="utf8"/>
    </constant>
    <constant name="INTERFACE_FACTORY" value="org.freedesktop.IBus.Factory">
      <type name="utf8"/>
    </constant>
    <constant name="INTERFACE_IBUS" value="org.freedesktop.IBus">
      <type name="utf8"/>
    </constant>
    <constant name="INTERFACE_INPUT_CONTEXT"
              value="org.freedesktop.IBus.InputContext">
      <type name="utf8"/>
    </constant>
    <constant name="INTERFACE_NOTIFICATIONS"
              value="org.freedesktop.IBus.Notifications">
      <type name="utf8"/>
    </constant>
    <constant name="INTERFACE_PANEL" value="org.freedesktop.IBus.Panel">
      <type name="utf8"/>
    </constant>
    <constant name="ISO_Center_Object" value="65075">
      <type name="int"/>
    </constant>
    <constant name="ISO_Continuous_Underline" value="65072">
      <type name="int"/>
    </constant>
    <constant name="ISO_Discontinuous_Underline" value="65073">
      <type name="int"/>
    </constant>
    <constant name="ISO_Emphasize" value="65074">
      <type name="int"/>
    </constant>
    <constant name="ISO_Enter" value="65076">
      <type name="int"/>
    </constant>
    <constant name="ISO_Fast_Cursor_Down" value="65071">
      <type name="int"/>
    </constant>
    <constant name="ISO_Fast_Cursor_Left" value="65068">
      <type name="int"/>
    </constant>
    <constant name="ISO_Fast_Cursor_Right" value="65069">
      <type name="int"/>
    </constant>
    <constant name="ISO_Fast_Cursor_Up" value="65070">
      <type name="int"/>
    </constant>
    <constant name="ISO_First_Group" value="65036">
      <type name="int"/>
    </constant>
    <constant name="ISO_First_Group_Lock" value="65037">
      <type name="int"/>
    </constant>
    <constant name="ISO_Group_Latch" value="65030">
      <type name="int"/>
    </constant>
    <constant name="ISO_Group_Lock" value="65031">
      <type name="int"/>
    </constant>
    <constant name="ISO_Group_Shift" value="65406">
      <type name="int"/>
    </constant>
    <constant name="ISO_Last_Group" value="65038">
      <type name="int"/>
    </constant>
    <constant name="ISO_Last_Group_Lock" value="65039">
      <type name="int"/>
    </constant>
    <constant name="ISO_Left_Tab" value="65056">
      <type name="int"/>
    </constant>
    <constant name="ISO_Level2_Latch" value="65026">
      <type name="int"/>
    </constant>
    <constant name="ISO_Level3_Latch" value="65028">
      <type name="int"/>
    </constant>
    <constant name="ISO_Level3_Lock" value="65029">
      <type name="int"/>
    </constant>
    <constant name="ISO_Level3_Shift" value="65027">
      <type name="int"/>
    </constant>
    <constant name="ISO_Level5_Latch" value="65042">
      <type name="int"/>
    </constant>
    <constant name="ISO_Level5_Lock" value="65043">
      <type name="int"/>
    </constant>
    <constant name="ISO_Level5_Shift" value="65041">
      <type name="int"/>
    </constant>
    <constant name="ISO_Lock" value="65025">
      <type name="int"/>
    </constant>
    <constant name="ISO_Move_Line_Down" value="65058">
      <type name="int"/>
    </constant>
    <constant name="ISO_Move_Line_Up" value="65057">
      <type name="int"/>
    </constant>
    <constant name="ISO_Next_Group" value="65032">
      <type name="int"/>
    </constant>
    <constant name="ISO_Next_Group_Lock" value="65033">
      <type name="int"/>
    </constant>
    <constant name="ISO_Partial_Line_Down" value="65060">
      <type name="int"/>
    </constant>
    <constant name="ISO_Partial_Line_Up" value="65059">
      <type name="int"/>
    </constant>
    <constant name="ISO_Partial_Space_Left" value="65061">
      <type name="int"/>
    </constant>
    <constant name="ISO_Partial_Space_Right" value="65062">
      <type name="int"/>
    </constant>
    <constant name="ISO_Prev_Group" value="65034">
      <type name="int"/>
    </constant>
    <constant name="ISO_Prev_Group_Lock" value="65035">
      <type name="int"/>
    </constant>
    <constant name="ISO_Release_Both_Margins" value="65067">
      <type name="int"/>
    </constant>
    <constant name="ISO_Release_Margin_Left" value="65065">
      <type name="int"/>
    </constant>
    <constant name="ISO_Release_Margin_Right" value="65066">
      <type name="int"/>
    </constant>
    <constant name="ISO_Set_Margin_Left" value="65063">
      <type name="int"/>
    </constant>
    <constant name="ISO_Set_Margin_Right" value="65064">
      <type name="int"/>
    </constant>
    <constant name="Iabovedot" value="681">
      <type name="int"/>
    </constant>
    <constant name="Iacute" value="205">
      <type name="int"/>
    </constant>
    <constant name="Ibelowdot" value="16785098">
      <type name="int"/>
    </constant>
    <constant name="Ibreve" value="16777516">
      <type name="int"/>
    </constant>
    <constant name="Icircumflex" value="206">
      <type name="int"/>
    </constant>
    <constant name="Idiaeresis" value="207">
      <type name="int"/>
    </constant>
    <constant name="Igrave" value="204">
      <type name="int"/>
    </constant>
    <constant name="Ihook" value="16785096">
      <type name="int"/>
    </constant>
    <constant name="Imacron" value="975">
      <type name="int"/>
    </constant>
    <class name="InputContext"
           c:type="IBusInputContext"
           parent="Proxy"
           glib:type-name="IBusInputContext"
           glib:get-type="ibus_input_context_get_type"
           glib:type-struct="InputContextClass">
      <doc xml:whitespace="preserve">An opaque data type representing an IBusInputContext.</doc>
      <constructor name="new" c:identifier="ibus_input_context_new">
        <doc xml:whitespace="preserve">New an IBusInputContext.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusInputContext.</doc>
          <type name="InputContext" c:type="IBusInputContext*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The path to the object that emitting the signal.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusConnection.</doc>
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_input_context"
                c:identifier="ibus_input_context_get_input_context">
        <doc xml:whitespace="preserve">Gets an existing IBusInputContext.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An existing IBusInputContext.</doc>
          <type name="InputContext" c:type="IBusInputContext*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The path to the object that emitting the signal.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusConnection.</doc>
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
        </parameters>
      </function>
      <method name="process_key_event"
              c:identifier="ibus_input_context_process_key_event">
        <doc xml:whitespace="preserve">Pass the key event to input method engine.
Key symbols are characters/symbols produced by key press, for example,
pressing "s" generates key symbol "s"; pressing shift-"s" generates key symbol "S".
Same key on keyboard may produce different key symbols on different keyboard layout.
e.g., "s" key on QWERTY keyboard produces "o" in DVORAK layout.
Unlike key symbol, keycode is only determined by the location of the key, and
irrelevant of the keyboard layout.
Briefly speaking, input methods that expect certain keyboard layout should use
keycode; otherwise keyval is sufficient.
For example, Chewing, Cangjie, Wubi expect an en-US QWERTY keyboard, these should
use keycode; while pinyin can rely on keyval only, as it is less sensitive to
the keyboard layout change, DVORAK users can still use DVORAK layout to input pinyin.
Use ibus_keymap_lookup_keysym() to convert keycode to keysym in given keyboard layout.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE for successfully process the key; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">Key symbol of a key event.</doc>
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="keycode" transfer-ownership="none">
            <doc xml:whitespace="preserve">Keycode of a key event.</doc>
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">Key modifier flags.</doc>
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cursor_location"
              c:identifier="ibus_input_context_set_cursor_location">
        <doc xml:whitespace="preserve">Set the cursor location of IBus input context.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate of the cursor.</doc>
            <type name="int32" c:type="gint32"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate of the cursor.</doc>
            <type name="int32" c:type="gint32"/>
          </parameter>
          <parameter name="w" transfer-ownership="none">
            <doc xml:whitespace="preserve">Width of the cursor.</doc>
            <type name="int32" c:type="gint32"/>
          </parameter>
          <parameter name="h" transfer-ownership="none">
            <doc xml:whitespace="preserve">Height of the cursor.</doc>
            <type name="int32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_capabilities"
              c:identifier="ibus_input_context_set_capabilities">
        <doc xml:whitespace="preserve">Set the capabilities flags of client application.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="capabilities" transfer-ownership="none">
            <doc xml:whitespace="preserve">Capabilities flags of IBusEngine, see #IBusCapabilite</doc>
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="property_activate"
              c:identifier="ibus_input_context_property_activate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prop_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="int32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="focus_in" c:identifier="ibus_input_context_focus_in">
        <doc xml:whitespace="preserve">Invoked when the client application get focus.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="focus_out" c:identifier="ibus_input_context_focus_out">
        <doc xml:whitespace="preserve">Invoked when the client application get focus.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="reset" c:identifier="ibus_input_context_reset">
        <doc xml:whitespace="preserve">Invoked when the IME is reset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="enable" c:identifier="ibus_input_context_enable">
        <doc xml:whitespace="preserve">Invoked when the IME is enabled, either by IME switch hotkey or select from the menu.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="disable" c:identifier="ibus_input_context_disable">
        <doc xml:whitespace="preserve">Invoked when the IME is disabled, either by IME switch hotkey or select from the menu.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="is_enabled" c:identifier="ibus_input_context_is_enabled">
        <doc xml:whitespace="preserve">Returns TRUE if the IME is enabled on the context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the IME is enabled on the context.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_engine" c:identifier="ibus_input_context_get_engine">
        <doc xml:whitespace="preserve">Returns an IME engine description for the context.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An IME engine description for the context</doc>
          <type name="EngineDesc" c:type="IBusEngineDesc*"/>
        </return-value>
      </method>
      <method name="set_engine" c:identifier="ibus_input_context_set_engine">
        <doc xml:whitespace="preserve">Invoked when the IME engine is changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">A name of the engine.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Proxy" c:type="IBusProxy"/>
      </field>
      <glib:signal name="commit-text">
        <doc xml:whitespace="preserve">Emitted when the text is going to be committed.
(Note: The text object is floating, and it will be released after the signal.
If singal handler want to keep the object, the handler should use g_object_ref_sink()
to get the ownership of the object.)</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">Text to be committed.</doc>
            <type name="Text" c:type="IBusText"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="cursor-down-lookup-table">
        <doc xml:whitespace="preserve">Emitted to select next candidate of lookup table.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cursor-up-lookup-table">
        <doc xml:whitespace="preserve">Emitted to select previous candidate of lookup table.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="delete-surrounding-text">
        <doc xml:whitespace="preserve">Emitted to delete surrounding text event from IME to client of IME.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:whitespace="preserve">the character offset from the cursor position of the text to be deleted. A negative value indicates a position before the cursor.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of characters to be deleted.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="disabled">
        <doc xml:whitespace="preserve">Emitted when an IME is disabled.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="enabled">
        <doc xml:whitespace="preserve">Emitted when an IME is enabled.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="forward-key-event">
        <doc xml:whitespace="preserve">Emitted to forward key event from IME to client of IME.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">Key symbol of the keyboard event.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="keycode" transfer-ownership="none">
            <doc xml:whitespace="preserve">Key symbol of the keyboard event.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="modifiers" transfer-ownership="none">
            <doc xml:whitespace="preserve">Key modifier flags.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="hide-auxiliary-text">
        <doc xml:whitespace="preserve">Emitted to hide auxiliary text.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="hide-lookup-table">
        <doc xml:whitespace="preserve">Emitted to hide lookup table.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="hide-preedit-text">
        <doc xml:whitespace="preserve">Emitted to hide preedit text.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="page-down-lookup-table">
        <doc xml:whitespace="preserve">Emitted to view the next page of lookup table.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="page-up-lookup-table">
        <doc xml:whitespace="preserve">Emitted to view the previous page of lookup table.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="register-properties">
        <doc xml:whitespace="preserve">Emitted to register the properties in @props.
(Note: The props object is floating, and it will be released after the signal.
If singal handler want to keep the object, the handler should use g_object_ref_sink()
to get the ownership of the object.)</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="props" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusPropList that contains properties.</doc>
            <type name="PropList" c:type="IBusPropList"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="show-auxiliary-text">
        <doc xml:whitespace="preserve">Emitted to show auxiliary text.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="show-lookup-table">
        <doc xml:whitespace="preserve">Emitted to show lookup table.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="show-preedit-text">
        <doc xml:whitespace="preserve">Emitted to show preedit text.</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="update-auxiliary-text">
        <doc xml:whitespace="preserve">Emitted to hide auxilary text.
(Note: The text object is floating, and it will be released after the signal.
If singal handler want to keep the object, the handler should use g_object_ref_sink()
to get the ownership of the object.)</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Text" c:type="IBusText"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="update-lookup-table">
        <doc xml:whitespace="preserve">Emitted to update lookup table.
(Note: The table object is floating, and it will be released after the signal.
If singal handler want to keep the object, the handler should use g_object_ref_sink()
to get the ownership of the object.)</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="table" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusLookupTable to be updated.</doc>
            <type name="LookupTable" c:type="IBusLookupTable"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the table should be visible.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="update-preedit-text">
        <doc xml:whitespace="preserve">Emitted to update preedit text.
(Note: The text object is floating, and it will be released after the signal.
If singal handler want to keep the object, the handler should use g_object_ref_sink()
to get the ownership of the object.)</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">Text to be updated.</doc>
            <type name="Text" c:type="IBusText"/>
          </parameter>
          <parameter name="cursor_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Cursor position.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the update is visible.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="update-property">
        <doc xml:whitespace="preserve">Emitted to update the property @prop.
(Note: The prop object is floating, and it will be released after the signal.
If singal handler want to keep the object, the handler should use g_object_ref_sink()
to get the ownership of the object.)</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:whitespace="preserve">The IBusProperty to be updated.</doc>
            <type name="Property" c:type="IBusProperty"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="InputContextClass"
            c:type="IBusInputContextClass"
            glib:is-gtype-struct-for="InputContext">
      <field name="parent">
        <type name="ProxyClass" c:type="IBusProxyClass"/>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="24">
          <type name="any"/>
        </array>
      </field>
    </record>
    <constant name="Insert" value="65379">
      <type name="int"/>
    </constant>
    <constant name="Iogonek" value="967">
      <type name="int"/>
    </constant>
    <constant name="Itilde" value="933">
      <type name="int"/>
    </constant>
    <constant name="J" value="74">
      <type name="int"/>
    </constant>
    <constant name="Jcircumflex" value="684">
      <type name="int"/>
    </constant>
    <constant name="K" value="75">
      <type name="int"/>
    </constant>
    <constant name="KP_0" value="65456">
      <type name="int"/>
    </constant>
    <constant name="KP_1" value="65457">
      <type name="int"/>
    </constant>
    <constant name="KP_2" value="65458">
      <type name="int"/>
    </constant>
    <constant name="KP_3" value="65459">
      <type name="int"/>
    </constant>
    <constant name="KP_4" value="65460">
      <type name="int"/>
    </constant>
    <constant name="KP_5" value="65461">
      <type name="int"/>
    </constant>
    <constant name="KP_6" value="65462">
      <type name="int"/>
    </constant>
    <constant name="KP_7" value="65463">
      <type name="int"/>
    </constant>
    <constant name="KP_8" value="65464">
      <type name="int"/>
    </constant>
    <constant name="KP_9" value="65465">
      <type name="int"/>
    </constant>
    <constant name="KP_Add" value="65451">
      <type name="int"/>
    </constant>
    <constant name="KP_Begin" value="65437">
      <type name="int"/>
    </constant>
    <constant name="KP_Decimal" value="65454">
      <type name="int"/>
    </constant>
    <constant name="KP_Delete" value="65439">
      <type name="int"/>
    </constant>
    <constant name="KP_Divide" value="65455">
      <type name="int"/>
    </constant>
    <constant name="KP_Down" value="65433">
      <type name="int"/>
    </constant>
    <constant name="KP_End" value="65436">
      <type name="int"/>
    </constant>
    <constant name="KP_Enter" value="65421">
      <type name="int"/>
    </constant>
    <constant name="KP_Equal" value="65469">
      <type name="int"/>
    </constant>
    <constant name="KP_F1" value="65425">
      <type name="int"/>
    </constant>
    <constant name="KP_F2" value="65426">
      <type name="int"/>
    </constant>
    <constant name="KP_F3" value="65427">
      <type name="int"/>
    </constant>
    <constant name="KP_F4" value="65428">
      <type name="int"/>
    </constant>
    <constant name="KP_Home" value="65429">
      <type name="int"/>
    </constant>
    <constant name="KP_Insert" value="65438">
      <type name="int"/>
    </constant>
    <constant name="KP_Left" value="65430">
      <type name="int"/>
    </constant>
    <constant name="KP_Multiply" value="65450">
      <type name="int"/>
    </constant>
    <constant name="KP_Next" value="65435">
      <type name="int"/>
    </constant>
    <constant name="KP_Page_Down" value="65435">
      <type name="int"/>
    </constant>
    <constant name="KP_Page_Up" value="65434">
      <type name="int"/>
    </constant>
    <constant name="KP_Prior" value="65434">
      <type name="int"/>
    </constant>
    <constant name="KP_Right" value="65432">
      <type name="int"/>
    </constant>
    <constant name="KP_Separator" value="65452">
      <type name="int"/>
    </constant>
    <constant name="KP_Space" value="65408">
      <type name="int"/>
    </constant>
    <constant name="KP_Subtract" value="65453">
      <type name="int"/>
    </constant>
    <constant name="KP_Tab" value="65417">
      <type name="int"/>
    </constant>
    <constant name="KP_Up" value="65431">
      <type name="int"/>
    </constant>
    <constant name="Kana_Lock" value="65325">
      <type name="int"/>
    </constant>
    <constant name="Kana_Shift" value="65326">
      <type name="int"/>
    </constant>
    <constant name="Kanji" value="65313">
      <type name="int"/>
    </constant>
    <constant name="Kanji_Bangou" value="65335">
      <type name="int"/>
    </constant>
    <constant name="Katakana" value="65318">
      <type name="int"/>
    </constant>
    <constant name="Kcedilla" value="979">
      <type name="int"/>
    </constant>
    <class name="Keymap"
           c:type="IBusKeymap"
           parent="Object"
           glib:type-name="IBusKeymap"
           glib:get-type="ibus_keymap_get_type"
           glib:type-struct="KeymapClass">
      <doc xml:whitespace="preserve">A keymap object in IBus.</doc>
      <constructor name="new"
                   c:identifier="ibus_keymap_new"
                   deprecated="This function has been deprecated and should">
        <doc xml:whitespace="preserve">Get an IBusKeymap associated with the giving name.
This function loads the keymap file specified in @name
in the IBUS_DATA_DIR/keymaps directory.
not be used in newly written code. Please use ibus_keymap_get().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An IBusKeymap associated with the giving name; or NULL if failed.</doc>
          <type name="Keymap" c:type="IBusKeymap*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">The keymap file to be loaded, such as 'us', 'jp'.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get" c:identifier="ibus_keymap_get">
        <doc xml:whitespace="preserve">Get an IBusKeymap associated with the giving name.
This function loads the keymap file specified in @name
in the IBUS_DATA_DIR/keymaps directory.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An IBusKeymap associated with the giving name; or NULL if failed.</doc>
          <type name="Keymap" c:type="IBusKeymap*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">The keymap file to be loaded, such as 'us', 'jp'.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="lookup_keysym" c:identifier="ibus_keymap_lookup_keysym">
        <doc xml:whitespace="preserve">Convert the scancode to keysym, given the keymap.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Corresponding keysym.</doc>
          <type name="uint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="keycode" transfer-ownership="none">
            <doc xml:whitespace="preserve">A scancode to be converted.</doc>
            <type name="uint16" c:type="guint16"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">Modifier flags(such as Ctrl, Shift).</doc>
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Object" c:type="IBusObject"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="keymap">
        <array zero-terminated="0" c:type="guint" fixed-size="256">
          <type name="uint"/>
        </array>
      </field>
    </class>
    <record name="KeymapClass"
            c:type="IBusKeymapClass"
            glib:is-gtype-struct-for="Keymap">
      <field name="parent">
        <type name="ObjectClass" c:type="IBusObjectClass"/>
      </field>
    </record>
    <constant name="Korean_Won" value="3839">
      <type name="int"/>
    </constant>
    <constant name="L" value="76">
      <type name="int"/>
    </constant>
    <constant name="L1" value="65480">
      <type name="int"/>
    </constant>
    <constant name="L10" value="65489">
      <type name="int"/>
    </constant>
    <constant name="L2" value="65481">
      <type name="int"/>
    </constant>
    <constant name="L3" value="65482">
      <type name="int"/>
    </constant>
    <constant name="L4" value="65483">
      <type name="int"/>
    </constant>
    <constant name="L5" value="65484">
      <type name="int"/>
    </constant>
    <constant name="L6" value="65485">
      <type name="int"/>
    </constant>
    <constant name="L7" value="65486">
      <type name="int"/>
    </constant>
    <constant name="L8" value="65487">
      <type name="int"/>
    </constant>
    <constant name="L9" value="65488">
      <type name="int"/>
    </constant>
    <constant name="Lacute" value="453">
      <type name="int"/>
    </constant>
    <constant name="Last_Virtual_Screen" value="65236">
      <type name="int"/>
    </constant>
    <constant name="Lbelowdot" value="16784950">
      <type name="int"/>
    </constant>
    <constant name="Lcaron" value="421">
      <type name="int"/>
    </constant>
    <constant name="Lcedilla" value="934">
      <type name="int"/>
    </constant>
    <constant name="Left" value="65361">
      <type name="int"/>
    </constant>
    <constant name="Linefeed" value="65290">
      <type name="int"/>
    </constant>
    <constant name="LiraSign" value="16785572">
      <type name="int"/>
    </constant>
    <class name="LookupTable"
           c:type="IBusLookupTable"
           parent="Serializable"
           glib:type-name="IBusLookupTable"
           glib:get-type="ibus_lookup_table_get_type"
           glib:type-struct="LookupTableClass">
      <doc xml:whitespace="preserve">An IBusLookuptable stores the candidate words or phrases for users to choose from.
Note that some input methods allow you to select candidate by pressing non-numeric
keys such as "asdfghjkl;".
Developers of these input methods should change the labels with
ibus_lookup_table_append_label().</doc>
      <constructor name="new" c:identifier="ibus_lookup_table_new">
        <doc xml:whitespace="preserve">New a IBusLookupTable.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusLookupTable.</doc>
          <type name="LookupTable" c:type="IBusLookupTable*"/>
        </return-value>
        <parameters>
          <parameter name="page_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of candidate shown per page, the max value is 16.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="cursor_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">position index of cursor.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="cursor_visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the cursor is visible.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="round" transfer-ownership="none">
            <doc xml:whitespace="preserve">TRUE for lookup table wrap around.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append_candidate"
              c:identifier="ibus_lookup_table_append_candidate">
        <doc xml:whitespace="preserve">Append a candidate word/phrase to IBusLookupTable, and increase reference.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">candidate word/phrase to be appended (in IBusText format).</doc>
            <type name="Text" c:type="IBusText*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_number_of_candidates"
              c:identifier="ibus_lookup_table_get_number_of_candidates">
        <doc xml:whitespace="preserve">Return the number of candidate in the table.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of candidates in the table</doc>
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_candidate"
              c:identifier="ibus_lookup_table_get_candidate">
        <doc xml:whitespace="preserve">Return IBusText at the given index. Borrowed reference.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">IBusText at the given index; NULL if no such IBusText.</doc>
          <type name="Text" c:type="IBusText*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">Index in the Lookup table.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_label"
              c:identifier="ibus_lookup_table_append_label">
        <doc xml:whitespace="preserve">Append a candidate word/phrase to IBusLookupTable, and increase reference.
This function is needed if the input method select candidate with
non-numeric keys such as "asdfghjkl;".</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">A candidate label to be appended (in IBusText format).</doc>
            <type name="Text" c:type="IBusText*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label" c:identifier="ibus_lookup_table_set_label">
        <doc xml:whitespace="preserve">Append a candidate word/phrase to IBusLookupTable, and increase reference.
This function is needed if the input method select candidate with
non-numeric keys such as "asdfghjkl;".</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">Intex in the Lookup table.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">A candidate label to be appended (in IBusText format).</doc>
            <type name="Text" c:type="IBusText*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_label" c:identifier="ibus_lookup_table_get_label">
        <doc xml:whitespace="preserve">Return IBusText at the given index. Borrowed reference.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">IBusText at the given index; NULL if no such IBusText.</doc>
          <type name="Text" c:type="IBusText*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">Index in the Lookup table.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cursor_pos"
              c:identifier="ibus_lookup_table_set_cursor_pos">
        <doc xml:whitespace="preserve">Set the cursor position of IBusLookupTable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cursor_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">The position of cursor.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cursor_pos"
              c:identifier="ibus_lookup_table_get_cursor_pos">
        <doc xml:whitespace="preserve">Get the cursor position of IBusLookupTable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The position of cursor.</doc>
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="set_cursor_visible"
              c:identifier="ibus_lookup_table_set_cursor_visible">
        <doc xml:whitespace="preserve">Set whether to make the cursor of an IBusLookupTable visible or not.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether to make the cursor of @table visible.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_cursor_visible"
              c:identifier="ibus_lookup_table_is_cursor_visible">
        <doc xml:whitespace="preserve">Returns whether the cursor of an IBusLookupTable is visible.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Whether the cursor of @table is visible.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_cursor_in_page"
              c:identifier="ibus_lookup_table_get_cursor_in_page">
        <doc xml:whitespace="preserve">Get the cursor position in current page of IBusLookupTable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The position of cursor in current page.</doc>
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="set_page_size"
              c:identifier="ibus_lookup_table_set_page_size">
        <doc xml:whitespace="preserve">Set the number of candidate shown per page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of candidate shown per page.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_size"
              c:identifier="ibus_lookup_table_get_page_size">
        <doc xml:whitespace="preserve">Get the number of candidate shown per page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Page size, i.e., number of candidate shown per page.</doc>
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="set_round" c:identifier="ibus_lookup_table_set_round">
        <doc xml:whitespace="preserve">Set whether to make the IBusLookupTable round or not.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="round" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether to make @table round.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_round" c:identifier="ibus_lookup_table_is_round">
        <doc xml:whitespace="preserve">Returns whether the IBusLookupTable is round.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Whether the @table is round.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_orientation"
              c:identifier="ibus_lookup_table_set_orientation">
        <doc xml:whitespace="preserve">Set the orientation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_orientation"
              c:identifier="ibus_lookup_table_get_orientation">
        <doc xml:whitespace="preserve">Returns the orientation of the IBusLookupTable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The orientation of the @table.</doc>
          <type name="int" c:type="gint"/>
        </return-value>
      </method>
      <method name="clear" c:identifier="ibus_lookup_table_clear">
        <doc xml:whitespace="preserve">Clear and remove all candidate from an IBusLookupTable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="page_up" c:identifier="ibus_lookup_table_page_up">
        <doc xml:whitespace="preserve">Go to previous page of an IBusLookupTable.
It returns FALSE if it is already at the first page,
unless  &lt;code&gt;table&amp;gt;-round==TRUE&lt;/code&gt;, where it will go
to the last page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="page_down" c:identifier="ibus_lookup_table_page_down">
        <doc xml:whitespace="preserve">Go to next page of an IBusLookupTable.
It returns FALSE if it is already at the last page,
unless  &lt;code&gt;table&amp;gt;-round==TRUE&lt;/code&gt;, where it will go
to the first page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="cursor_up" c:identifier="ibus_lookup_table_cursor_up">
        <doc xml:whitespace="preserve">Go to previous candidate of an IBusLookupTable.
It returns FALSE if it is already at the first candidate,
unless  &lt;code&gt;table&amp;gt;-round==TRUE&lt;/code&gt;, where it will go
to the last candidate.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="cursor_down" c:identifier="ibus_lookup_table_cursor_down">
        <doc xml:whitespace="preserve">Go to next candidate of an IBusLookupTable.
It returns FALSE if it is already at the last candidate,
unless  &lt;code&gt;table&amp;gt;-round==TRUE&lt;/code&gt;, where it will go
to the first candidate.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="Serializable" c:type="IBusSerializable"/>
      </field>
      <field name="page_size">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="cursor_pos">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="cursor_visible">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="round">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="orientation">
        <type name="int" c:type="gint"/>
      </field>
      <field name="candidates">
        <type name="GLib.Array" c:type="GArray*"/>
      </field>
      <field name="labels">
        <type name="GLib.Array" c:type="GArray*"/>
      </field>
    </class>
    <record name="LookupTableClass"
            c:type="IBusLookupTableClass"
            glib:is-gtype-struct-for="LookupTable">
      <field name="parent">
        <type name="SerializableClass" c:type="IBusSerializableClass"/>
      </field>
    </record>
    <constant name="Lstroke" value="419">
      <type name="int"/>
    </constant>
    <constant name="M" value="77">
      <type name="int"/>
    </constant>
    <constant name="MAJOR_VERSION" value="1">
      <type name="int"/>
    </constant>
    <constant name="MICRO_VERSION" value="9">
      <type name="int"/>
    </constant>
    <constant name="MINOR_VERSION" value="3">
      <type name="int"/>
    </constant>
    <constant name="Mabovedot" value="16784960">
      <type name="int"/>
    </constant>
    <constant name="Macedonia_DSE" value="1717">
      <type name="int"/>
    </constant>
    <constant name="Macedonia_GJE" value="1714">
      <type name="int"/>
    </constant>
    <constant name="Macedonia_KJE" value="1724">
      <type name="int"/>
    </constant>
    <constant name="Macedonia_dse" value="1701">
      <type name="int"/>
    </constant>
    <constant name="Macedonia_gje" value="1698">
      <type name="int"/>
    </constant>
    <constant name="Macedonia_kje" value="1708">
      <type name="int"/>
    </constant>
    <constant name="Mae_Koho" value="65342">
      <type name="int"/>
    </constant>
    <constant name="Massyo" value="65324">
      <type name="int"/>
    </constant>
    <constant name="Menu" value="65383">
      <type name="int"/>
    </constant>
    <record name="Message" c:type="IBusMessage">
      <constructor name="new" c:identifier="ibus_message_new">
        <doc xml:whitespace="preserve">New an IBusMessage.
Valid D-Bus message types include:
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;para&gt;#DBUS_MESSAGE_TYPE_METHOD_CALL&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;#DBUS_MESSAGE_TYPE_METHOD_RETURN&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;#DBUS_MESSAGE_TYPE_ERROR&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;#DBUS_MESSAGE_TYPE_SIGNAL&lt;/para&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
These are defined in dbus-protocol.h in D-Bus.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusMessage according to @message_type.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
        <parameters>
          <parameter name="message_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">Type of the message.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_method_call"
                   c:identifier="ibus_message_new_method_call">
        <doc xml:whitespace="preserve">Constructs a new message to invoke a method on a remote object.
The destination may be %NULL in which case no destination is set;
this is appropriate when using IBus/D-Bus in a peer-to-peer context (no message bus).
The interface may be %NULL, which means that if multiple methods with the given name
exist it is undefined which one will be invoked.
The path and method names may not be %NULL.
Destination, path, interface, and method name can't contain any invalid characters
(see the D-Bus specification).</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocate IBusMessage; or %NULL if memory cannot be allocated.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
        <parameters>
          <parameter name="destination" transfer-ownership="none">
            <doc xml:whitespace="preserve">Where this message to be sent to or %NULL for no destination.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">Object path the message should be sent to.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="interface" transfer-ownership="none">
            <doc xml:whitespace="preserve">Interface to invoke method on, or %NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:whitespace="preserve">The method to be invoked.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_method_return"
                   c:identifier="ibus_message_new_method_return">
        <doc xml:whitespace="preserve">Constructs a message that is a reply to a method call.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocate IBusMessage; or %NULL if memory cannot be allocated.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
        <parameters>
          <parameter name="reply_to" transfer-ownership="none">
            <doc xml:whitespace="preserve">The IBusMessage being replied to.</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_error" c:identifier="ibus_message_new_error">
        <doc xml:whitespace="preserve">Creates a new message that is an error reply to another message.
Error replies are most common in response to method calls, but can be returned in reply to any message.
The error name must be a valid error name according to the syntax given in the D-Bus specification.
If you don't want to make up an error name just use %DBUS_ERROR_FAILED.
Use ibus_message_unref() to free the produced IBusMessage.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocate IBusMessage with the error information; or %NULL if memory cannot be allocated.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
        <parameters>
          <parameter name="reply_to" transfer-ownership="none">
            <doc xml:whitespace="preserve">The IBusMessage being replied to.</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
          <parameter name="error_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the error.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="error_message" transfer-ownership="none">
            <doc xml:whitespace="preserve">Detailed error message string (or %NULL for none, but please give a message).</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_error_printf"
                   c:identifier="ibus_message_new_error_printf"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new message that is an error reply to another message.
Error replies are most common in response to method calls, but can be returned in reply to any message.
The error name must be a valid error name according to the syntax given in the D-Bus specification.
If you don't want to make up an error name just use %DBUS_ERROR_FAILED.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocate IBusMessage with the error information; or %NULL if memory cannot be allocated.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
        <parameters>
          <parameter name="reply_to" transfer-ownership="none">
            <doc xml:whitespace="preserve">The IBusMessage being replied to.</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
          <parameter name="error_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the error.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="error_format" transfer-ownership="none">
            <doc xml:whitespace="preserve">Error format string as in printf() format.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_signal" c:identifier="ibus_message_new_signal">
        <doc xml:whitespace="preserve">Constructs a new message representing a signal emission.
Returns NULL if memory can't be allocated for the message.
A signal is identified by its originating object path, interface, and the name of the signal.
Path, interface, and signal name must all be valid (the D-Bus specification defines the syntax of these fields).</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocate IBusMessage with the error information; or %NULL if memory cannot be allocated.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">Object path the message should be sent to.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="interface" transfer-ownership="none">
            <doc xml:whitespace="preserve">Interface to invoke method on, or %NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:whitespace="preserve">The method to invoke.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="ref" c:identifier="ibus_message_ref">
        <doc xml:whitespace="preserve">Increments the reference count of an IBusMessage.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The IBusMessage.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
      </method>
      <method name="unref" c:identifier="ibus_message_unref">
        <doc xml:whitespace="preserve">Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="is_method_call" c:identifier="ibus_message_is_method_call">
        <doc xml:whitespace="preserve">Checks whether the message is a method call with the given interface and member fields.
If the message is not DBUS_MESSAGE_TYPE_METHOD_CALL,
or has a different interface or member field, returns FALSE.
If the interface field is missing, then it will be assumed equal to the provided interface.
The D-Bus protocol allows method callers to leave out the interface name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @message is DBUS_MESSAGE_TYPE_METHOD_CALL and the invoked method is matched with @method; %FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="interface" transfer-ownership="none">
            <doc xml:whitespace="preserve">The interface to check. Cannot be %NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:whitespace="preserve">The method to check. Cannot be %NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_error" c:identifier="ibus_message_is_error">
        <doc xml:whitespace="preserve">Checks whether the message is an error reply with the given error name.
If the message is not DBUS_MESSAGE_TYPE_ERROR, or has a different name, returns FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @message is DBUS_MESSAGE_TYPE_ERROR and the error name is matched with @error_name; %FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the error to check.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_signal" c:identifier="ibus_message_is_signal">
        <doc xml:whitespace="preserve">Checks whether the message is a signal with the given interface and member fields.
If the message is not %DBUS_MESSAGE_TYPE_SIGNAL, or has a different interface or member field, returns %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @message is %DBUS_MESSAGE_SIGNAL and the signal name is matched with @signal_name; %FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="interface" transfer-ownership="none">
            <doc xml:whitespace="preserve">The interface to checked. Cannot be %NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="signal_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">The signal name to check.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_destination"
              c:identifier="ibus_message_set_destination">
        <doc xml:whitespace="preserve">Sets the message's destination.
The destination is the name of another connection on the bus
and may be either the unique name assigned by the bus to each connection,
or a well-known name specified in advance.
The destination name must contain only valid characters as defined in the D-Bus specification.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="destination" transfer-ownership="none">
            <doc xml:whitespace="preserve">Destination to set; or %NULL to unset.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sender" c:identifier="ibus_message_set_sender">
        <doc xml:whitespace="preserve">Sets the message sender.
The sender must be a valid bus name as defined in the D-Bus specification.
Usually you don't want to call this. The message bus daemon will call it to set the origin of each message.
If you aren't implementing a message bus daemon you shouldn't need to set the sender.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="sender" transfer-ownership="none">
            <doc xml:whitespace="preserve">Sender to set; or %NULL to unset.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_error_name" c:identifier="ibus_message_set_error_name">
        <doc xml:whitespace="preserve">Sets the name of the error (%DBUS_MESSAGE_TYPE_ERROR).
The name is fully-qualified (namespaced).
The error name must contain only valid characters as defined in the D-Bus specification.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Error name to set; or %NULL to unset.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interface" c:identifier="ibus_message_set_interface">
        <doc xml:whitespace="preserve">Sets the interface this message is being sent to
(for %DBUS_MESSAGE_TYPE_METHOD_CALL) or the interface
a signal is being emitted from (for %DBUS_MESSAGE_TYPE_SIGNAL).
The interface name must contain only valid characters as defined in the D-Bus specification.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="interface" transfer-ownership="none">
            <doc xml:whitespace="preserve">Interface to set; or %NULL to unset.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_member" c:identifier="ibus_message_set_member">
        <doc xml:whitespace="preserve">Sets the interface member being invoked (%DBUS_MESSAGE_TYPE_METHOD_CALL)
or emitted (%DBUS_MESSAGE_TYPE_SIGNAL).
The member name must contain only valid characters as defined in the D-Bus specification.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="member" transfer-ownership="none">
            <doc xml:whitespace="preserve">Member to set; or %NULL to unset.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path" c:identifier="ibus_message_set_path">
        <doc xml:whitespace="preserve">Sets the object path this message is being sent to (for $DBUS_MESSAGE_TYPE_METHOD_CALL)
or the one a signal is being emitted from (for %DBUS_MESSAGE_TYPE_SIGNAL).
The path must contain only valid characters as defined in the D-Bus specification.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">Path to set; or %NULL to unset.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_no_reply" c:identifier="ibus_message_set_no_reply">
        <doc xml:whitespace="preserve">Sets a flag indicating that the message does not want a reply;
if this flag is set, the other end of the connection may (but is not required to)
optimize by not sending method return or error replies.
If this flag is set, there is no way to know whether the message successfully arrived
at the remote end.
Normally you know a message was received when you receive the reply to it.
The flag is FALSE by default, that is by default the other end is required to reply.
On the protocol level this toggles %DBUS_HEADER_FLAG_NO_REPLY_EXPECTED.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="no_reply" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if no reply is desired.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reply_serial"
              c:identifier="ibus_message_set_reply_serial">
        <doc xml:whitespace="preserve">Sets the reply serial of a message (the serial of the message this is a reply to).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="reply_serial" transfer-ownership="none">
            <doc xml:whitespace="preserve">The serial to be replied.</doc>
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_destination"
              c:identifier="ibus_message_get_destination">
        <doc xml:whitespace="preserve">Gets the destination of a message or %NULL if there is none set.
The returned string becomes invalid if the message is modified,
since it points into the wire-marshaled message data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Destination of the IBusMessage; NULL if there is none set.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_sender" c:identifier="ibus_message_get_sender">
        <doc xml:whitespace="preserve">Gets the unique name of the connection which originated this message,
or %NULL if unknown or inapplicable.
The sender is filled in by the message bus.
Note, the returned sender is always the unique bus name.
Connections may own multiple other bus names, but those are not found in the sender field.
The returned string becomes invalid if the message is modified,
since it points into the wire-marshaled message data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Sender of the IBusMessage; %NULL if unknown or inapplicable.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_error_name" c:identifier="ibus_message_get_error_name">
        <doc xml:whitespace="preserve">Gets the error name (%DBUS_MESSAGE_TYPE_ERROR only) or %NULL if none.
The returned string becomes invalid if the message is modified,
since it points into the wire-marshaled message data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Error name of the IBusMessage; %NULL if none.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_error_message"
              c:identifier="ibus_message_get_error_message">
        <doc xml:whitespace="preserve">Gets the error message (%DBUS_MESSAGE_TYPE_ERROR only) or %NULL if none.
The returned string becomes invalid if the message is modified,
since it points into the wire-marshaled message data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Error message of the IBusMessage; %NULL if none.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_interface" c:identifier="ibus_message_get_interface">
        <doc xml:whitespace="preserve">Gets the interface this message is being sent to (for %DBUS_MESSAGE_TYPE_METHOD_CALL)
or being emitted from (for %DBUS_MESSAGE_TYPE_SIGNAL).
The interface name is fully-qualified (namespaced). Returns %NULL if none.
The returned string becomes invalid if the message is modified,
since it points into the wire-marshaled message data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Interface name of the IBusMessage; %NULL if none.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_member" c:identifier="ibus_message_get_member">
        <doc xml:whitespace="preserve">Gets the interface member being invoked (%DBUS_MESSAGE_TYPE_METHOD_CALL)
or emitted (%DBUS_MESSAGE_TYPE_SIGNAL).
Returns %NULL if none.
The returned string becomes invalid if the message is modified,
since it points into the wire-marshaled message data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Member name of the IBusMessage; %NULL if none.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_path" c:identifier="ibus_message_get_path">
        <doc xml:whitespace="preserve">Gets the object path this message is being sent to (for %DBUS_MESSAGE_TYPE_METHOD_CALL)
or being emitted from (for %DBUS_MESSAGE_TYPE_SIGNAL).
Returns %NULL if none.
See also dbus_message_get_path_decomposed().
The returned string becomes invalid if the message is modified,
since it points into the wire-marshaled message data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Object path of the IBusMessage; %NULL if none.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_no_reply" c:identifier="ibus_message_get_no_reply">
        <doc xml:whitespace="preserve">Returns TRUE if the message does not expect a reply.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the message does not expect a reply; %FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_reply_serial"
              c:identifier="ibus_message_get_reply_serial">
        <doc xml:whitespace="preserve">Returns the serial that the message is a reply to or 0 if none.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The serial that the message is a reply to or 0 if none.</doc>
          <type name="uint32" c:type="guint32"/>
        </return-value>
      </method>
      <method name="get_serial" c:identifier="ibus_message_get_serial">
        <doc xml:whitespace="preserve">Returns the serial of a message or 0 if none has been specified.
The message's serial number is provided by the application sending the message
and is used to identify replies to this message.
All messages received on a connection will have a serial provided by the remote application.
For messages you're sending, dbus_connection_send() will assign a serial and return it to you.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The serial of a message or 0 if none has been specified.</doc>
          <type name="uint32" c:type="guint32"/>
        </return-value>
      </method>
      <method name="append_args"
              c:identifier="ibus_message_append_args"
              introspectable="0">
        <doc xml:whitespace="preserve">Appends fields to a message given a variable argument list.
The variable argument list should contain the type of each argument followed by the value to append.
Appendable types are basic types, and arrays of fixed-length basic types.
To append variable-length basic types, or any more complex value,
you have to use an iterator rather than this function.
To append a basic type, specify its type code followed by the address of the value. For example:
&lt;informalexample&gt;
&lt;programlisting&gt;
dbus_int32_t v_INT32 = 42;
const char *v_STRING = "Hello World";
dbus_message_append_args (message,
DBUS_TYPE_INT32, &amp;v_INT32,
DBUS_TYPE_STRING, &amp;v_STRING,
DBUS_TYPE_INVALID);
&lt;/programlisting&gt;
&lt;/informalexample&gt;
To append an array of fixed-length basic types, pass in the %DBUS_TYPE_ARRAY typecode,
the element typecode, the address of the array pointer,
and a 32-bit integer giving the number of elements in the array. So for example:
&lt;informalexample&gt;
&lt;programlisting&gt;
const dbus_int32_t array[] = { 1, 2, 3 };
const dbus_int32_t *v_ARRAY = array;
dbus_message_append_args (message,
DBUS_TYPE_ARRAY, DBUS_TYPE_INT32, &amp;v_ARRAY, 3,
DBUS_TYPE_INVALID);
&lt;/programlisting&gt;
&lt;/informalexample&gt;
&lt;note&gt;&lt;para&gt;
in C, given "int array[]", "&amp;array == array" (the comp.lang.c FAQ says otherwise, but gcc and the FAQ don't agree).
So if you're using an array instead of a pointer you have to create a pointer variable,
assign the array to it, then take the address of the pointer variable.
For strings it works to write const char *array = "Hello" and then use &amp;amp;array though.
&lt;/para&gt;&lt;/note&gt;
The last argument to this function must be %DBUS_TYPE_INVALID, marking the end of the argument list.
If you don't do this then libdbus won't know to stop and will read invalid memory.
String/signature/path arrays should be passed in as "const char*** address_of_array" and "int n_elements"</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="first_arg_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">Type of the first argument.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="get_args"
              c:identifier="ibus_message_get_args"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets arguments from a message given a variable argument list.
The supported types include those supported by ibus_message_append_args();
that is, basic types and arrays of fixed-length basic types.
The arguments are the same as they would be for ibus_message_iter_get_basic()
or ibus_message_iter_get_fixed_array().
In addition to those types, arrays of string, object path, and signature are supported;
but these are returned as allocated memory and must be freed with dbus_free_string_array(),
while the other types are returned as const references.
To get a string array pass in "char ***array_location" and "int *n_elements".
The variable argument list should contain the type of the argument followed by a pointer to
where the value should be stored. The list is terminated with %DBUS_TYPE_INVALID.
Except for string arrays, the returned values are constant; do not free them.
They point into the IBusMessage.
If the requested arguments are not present, or do not have the requested types, then an error will be set.
If more arguments than requested are present,
the requested arguments are returned and the extra arguments are ignored.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; F%ALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:whitespace="preserve">Error to be filled in on failure.</doc>
            <type name="Error" c:type="IBusError**"/>
          </parameter>
          <parameter name="first_arg_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">Type of the first argument.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="iter_init_append"
              c:identifier="ibus_message_iter_init_append">
        <doc xml:whitespace="preserve">Initializes a #IBusMessageIter for appending arguments to the end of a message.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessageIter to to initialize.</doc>
            <type name="MessageIter" c:type="IBusMessageIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_init" c:identifier="ibus_message_iter_init">
        <doc xml:whitespace="preserve">Initializes an #IBusMessageIter for reading the arguments of the message passed in.
When possible, ibus_message_get_args() is much more convenient.
Some types of argument can only be read with IBusMessageIter however.
The easiest way to iterate is like this:
&lt;informalexample&gt;
&lt;programlisting&gt;
dbus_message_iter_init (&amp;iter);
while ((current_type = dbus_message_iter_get_arg_type (&amp;iter)) != DBUS_TYPE_INVALID)
dbus_message_iter_next (&amp;iter);
&lt;/programlisting&gt;
&lt;/informalexample&gt;
IBusMessageIter contains no allocated memory;
it need not be freed, and can be copied by assignment or memcpy().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if the message has no arguments.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessageIter.</doc>
            <type name="MessageIter" c:type="IBusMessageIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="ibus_message_to_string">
        <doc xml:whitespace="preserve">Produces a pretty formatted string which show the information of the IBusMessage.
This string is suitable for debugging information print out.
Free the string by g_free() after use.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A string which shows the information of the message.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
    </record>
    <callback name="MessageFunc" c:type="IBusMessageFunc">
      <doc xml:whitespace="preserve">Prototype of an IBusMessage callback function.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusConnection.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusMessage.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <doc xml:whitespace="preserve">User data for the callback function.</doc>
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MessageIter" c:type="IBusMessageIter">
      <method name="append" c:identifier="ibus_message_iter_append">
        <doc xml:whitespace="preserve">Appends a basic-typed value to the message.
The basic types are the non-container types such as integer and string.
The "value" argument should be the address of a basic-typed value.
So for string, const char**. For integer, dbus_int32_t*.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">The type of the value.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">The pointer to the value.</doc>
            <type name="any" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_data"
              c:identifier="ibus_message_iter_copy_data"
              version="1.2.0.20090719">
        <doc xml:whitespace="preserve">Deep copy an IBusMessageIter to another IBusMessageIter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if failed.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <doc xml:whitespace="preserve">Source to be copy from.</doc>
            <type name="MessageIter" c:type="IBusMessageIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_basic" c:identifier="ibus_message_iter_get_basic">
        <doc xml:whitespace="preserve">Reads a basic-typed value from the message iterator.
Basic types are the non-containers such as integer and string.
The value argument should be the address of a location to store the returned value.
So for int32 it should be a "dbus_int32_t*" and for string a "const char**".
The returned value is by reference and should not be freed.
Be sure you have somehow checked that dbus_message_iter_get_arg_type() matches the type you are expecting,
or you'll crash when you try to use an integer as a string or something.
To read any container type (array, struct, dict) you will need to recurse into the container with
dbus_message_iter_recurse().
If the container is an array of fixed-length values,
you can get all the array elements at once with dbus_message_iter_get_fixed_array().
Otherwise, you have to iterate over the container's contents one value at a time.
All basic-typed values are guaranteed to fit in 8 bytes. So you can write code like this:
&lt;informalexample&gt;
&lt;programlisting&gt;
dbus_uint64_t value;
int type;
dbus_message_iter_get_basic (&amp;read_iter, &amp;value);
type = dbus_message_iter_get_arg_type (&amp;read_iter);
dbus_message_iter_append_basic (&amp;write_iter, type, &amp;value);
&lt;/programlisting&gt;
&lt;/informalexample&gt;
On some really obscure platforms dbus_uint64_t might not exist,
if you need to worry about this you will know.
dbus_uint64_t is just one example of a type that's large enough to hold any possible value,
you could use a struct or char[8] instead if you like.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">Result value stores here. Cannot be %NULL.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="ibus_message_iter_get">
        <doc xml:whitespace="preserve">Gets an value from an IBusMessageIter, then move on to the next element.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">The type of the value. Cannot be %NULL.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">Result value stores here. Cannot be %NULL.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="ibus_message_iter_next">
        <doc xml:whitespace="preserve">Moves the iterator to the next field, if any.
If there's no next field, returns %FALSE. If the iterator moves forward, returns %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the iterator moves forward successfully; %FALSE if next element does not exist.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="has_next" c:identifier="ibus_message_iter_has_next">
        <doc xml:whitespace="preserve">Checks if an iterator has any more fields.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if next element exists; %FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="open_container"
              c:identifier="ibus_message_iter_open_container">
        <doc xml:whitespace="preserve">Appends a container-typed value to the message;
you are required to append the contents of the container using the returned sub-iterator,
and then call dbus_message_iter_close_container().
Container types are for example struct, variant, and array.
For variants, the contained_signature should be the type of the single value inside the variant.
For structs and dict entries, contained_signature should be %NULL;
it will be set to whatever types you write into the struct.
For arrays, contained_signature should be the type of the array elements.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">The type of the value.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="contained_signature" transfer-ownership="none">
            <doc xml:whitespace="preserve">The type of container contents.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="sub" transfer-ownership="none">
            <doc xml:whitespace="preserve">Sub-iterator to initialize.</doc>
            <type name="MessageIter" c:type="IBusMessageIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_container"
              c:identifier="ibus_message_iter_close_container">
        <doc xml:whitespace="preserve">Closes a container-typed value appended to the message;
may write out more information to the message known only after the entire container is written,
and may free resources created by dbus_message_iter_open_container().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="sub" transfer-ownership="none">
            <doc xml:whitespace="preserve">Sub-iterator to close.</doc>
            <type name="MessageIter" c:type="IBusMessageIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="recurse" c:identifier="ibus_message_iter_recurse">
        <doc xml:whitespace="preserve">Recurses into a container value when reading values from a message,
initializing a sub-iterator to use for traversing the child values of the container.
Note that this recurses into a value, not a type, so you can only recurse if the value exists.
The main implication of this is that if you have for example an empty array of array of int32,
you can recurse into the outermost array, but it will have no values, so you won't be able to recurse further.
There's no array of int32 to recurse into.
If a container is an array of fixed-length types, it is much more efficient to use
dbus_message_iter_get_fixed_array() to get the whole array in one shot,
rather than individually walking over the array elements.
Be sure you have somehow checked that dbus_message_iter_get_arg_type()
matches the type you are expecting to recurse into.
Results of this function are undefined if there is no container to recurse into at the current iterator position.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">The type of the value.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="sub" transfer-ownership="none">
            <doc xml:whitespace="preserve">Sub-iterator to initialize.</doc>
            <type name="MessageIter" c:type="IBusMessageIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_arg_type"
              c:identifier="ibus_message_iter_get_arg_type">
        <doc xml:whitespace="preserve">Returns the argument type of the argument that the message iterator points to.
If the iterator is at the end of the message, returns %DBUS_TYPE_INVALID.
You can thus write a loop as follows:
&lt;informalexample&gt;
&lt;programlisting&gt;
dbus_message_iter_init (&amp;iter);
while ((current_type = dbus_message_iter_get_arg_type (&amp;iter)) != DBUS_TYPE_INVALID)
dbus_message_iter_next (&amp;iter);
&lt;/programlisting&gt;
&lt;/informalexample&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The argument type.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
      </method>
      <method name="get_element_type"
              c:identifier="ibus_message_iter_get_element_type">
        <doc xml:whitespace="preserve">Returns the element type of the array that the message iterator points to.
Note that you need to check that the iterator points to an array prior to using this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The argument type.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
      </method>
    </record>
    <constant name="Meta_L" value="65511">
      <type name="int"/>
    </constant>
    <constant name="Meta_R" value="65512">
      <type name="int"/>
    </constant>
    <constant name="MillSign" value="16785573">
      <type name="int"/>
    </constant>
    <constant name="Mode_switch" value="65406">
      <type name="int"/>
    </constant>
    <bitfield name="ModifierType"
              glib:type-name="IBusModifierType"
              glib:get-type="ibus_modifier_type_get_type"
              c:type="IBusModifierType">
      <doc xml:whitespace="preserve">Handles key modifier such as control, shift and alt and release event.
Note that nits 15 - 25 are currently unused, while bit 29 is used internally.</doc>
      <member name="shift_mask"
              value="1"
              c:identifier="IBUS_SHIFT_MASK"
              glib:nick="shift-mask"/>
      <member name="lock_mask"
              value="2"
              c:identifier="IBUS_LOCK_MASK"
              glib:nick="lock-mask"/>
      <member name="control_mask"
              value="4"
              c:identifier="IBUS_CONTROL_MASK"
              glib:nick="control-mask"/>
      <member name="mod1_mask"
              value="8"
              c:identifier="IBUS_MOD1_MASK"
              glib:nick="mod1-mask"/>
      <member name="mod2_mask"
              value="16"
              c:identifier="IBUS_MOD2_MASK"
              glib:nick="mod2-mask"/>
      <member name="mod3_mask"
              value="32"
              c:identifier="IBUS_MOD3_MASK"
              glib:nick="mod3-mask"/>
      <member name="mod4_mask"
              value="64"
              c:identifier="IBUS_MOD4_MASK"
              glib:nick="mod4-mask"/>
      <member name="mod5_mask"
              value="128"
              c:identifier="IBUS_MOD5_MASK"
              glib:nick="mod5-mask"/>
      <member name="button1_mask"
              value="256"
              c:identifier="IBUS_BUTTON1_MASK"
              glib:nick="button1-mask"/>
      <member name="button2_mask"
              value="512"
              c:identifier="IBUS_BUTTON2_MASK"
              glib:nick="button2-mask"/>
      <member name="button3_mask"
              value="1024"
              c:identifier="IBUS_BUTTON3_MASK"
              glib:nick="button3-mask"/>
      <member name="button4_mask"
              value="2048"
              c:identifier="IBUS_BUTTON4_MASK"
              glib:nick="button4-mask"/>
      <member name="button5_mask"
              value="4096"
              c:identifier="IBUS_BUTTON5_MASK"
              glib:nick="button5-mask"/>
      <member name="handled_mask"
              value="16777216"
              c:identifier="IBUS_HANDLED_MASK"
              glib:nick="handled-mask"/>
      <member name="forward_mask"
              value="33554432"
              c:identifier="IBUS_FORWARD_MASK"
              glib:nick="forward-mask"/>
      <member name="ignored_mask"
              value="33554432"
              c:identifier="IBUS_IGNORED_MASK"
              glib:nick="ignored-mask"/>
      <member name="super_mask"
              value="67108864"
              c:identifier="IBUS_SUPER_MASK"
              glib:nick="super-mask"/>
      <member name="hyper_mask"
              value="134217728"
              c:identifier="IBUS_HYPER_MASK"
              glib:nick="hyper-mask"/>
      <member name="meta_mask"
              value="268435456"
              c:identifier="IBUS_META_MASK"
              glib:nick="meta-mask"/>
      <member name="release_mask"
              value="1073741824"
              c:identifier="IBUS_RELEASE_MASK"
              glib:nick="release-mask"/>
      <member name="modifier_mask"
              value="1593843711"
              c:identifier="IBUS_MODIFIER_MASK"
              glib:nick="modifier-mask"/>
    </bitfield>
    <constant name="MouseKeys_Accel_Enable" value="65143">
      <type name="int"/>
    </constant>
    <constant name="MouseKeys_Enable" value="65142">
      <type name="int"/>
    </constant>
    <constant name="Muhenkan" value="65314">
      <type name="int"/>
    </constant>
    <constant name="Multi_key" value="65312">
      <type name="int"/>
    </constant>
    <constant name="MultipleCandidate" value="65341">
      <type name="int"/>
    </constant>
    <constant name="N" value="78">
      <type name="int"/>
    </constant>
    <constant name="Nacute" value="465">
      <type name="int"/>
    </constant>
    <constant name="NairaSign" value="16785574">
      <type name="int"/>
    </constant>
    <constant name="Ncaron" value="466">
      <type name="int"/>
    </constant>
    <constant name="Ncedilla" value="977">
      <type name="int"/>
    </constant>
    <callback name="NewConnectionFunc" c:type="IBusNewConnectionFunc">
      <doc xml:whitespace="preserve">Prototype of new connection callback function.
This callback should be connected to signal ::new-connection
to handle the event that a new connection is coming in.
In this handler, IBus could add a reference and continue processing the connection.
If no reference is added, the new connection will be released and closed after this signal.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="server" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusServer.</doc>
          <type name="Server" c:type="IBusServer*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:whitespace="preserve">The corresponding IBusConnection.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="NewSheqelSign" value="16785578">
      <type name="int"/>
    </constant>
    <constant name="Next" value="65366">
      <type name="int"/>
    </constant>
    <constant name="Next_Virtual_Screen" value="65234">
      <type name="int"/>
    </constant>
    <constant name="Ntilde" value="209">
      <type name="int"/>
    </constant>
    <constant name="Num_Lock" value="65407">
      <type name="int"/>
    </constant>
    <constant name="O" value="79">
      <type name="int"/>
    </constant>
    <constant name="OE" value="5052">
      <type name="int"/>
    </constant>
    <constant name="Oacute" value="211">
      <type name="int"/>
    </constant>
    <constant name="Obarred" value="16777631">
      <type name="int"/>
    </constant>
    <constant name="Obelowdot" value="16785100">
      <type name="int"/>
    </constant>
    <class name="Object"
           c:type="IBusObject"
           parent="GObject.InitiallyUnowned"
           glib:type-name="IBusObject"
           glib:get-type="ibus_object_get_type"
           glib:type-struct="ObjectClass">
      <doc xml:whitespace="preserve">All the fields in the &lt;structname&gt;IBusObject&lt;/structname&gt; structure are
private to the #IBusObject and should never be accessed directly.</doc>
      <constructor name="new" c:identifier="ibus_object_new">
        <doc xml:whitespace="preserve">New an IBusObject.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusObject</doc>
          <type name="Object" c:type="IBusObject*"/>
        </return-value>
      </constructor>
      <method name="destroy" c:identifier="ibus_object_destroy">
        <doc xml:whitespace="preserve">Emit the "destory" signal notifying all reference holders that they should
release the #IBusObject.
The memory for the object itself won't be deleted until its reference count
actually drops to 0; ibus_object_destroy merely asks reference holders to
release their references. It does not free the object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="GObject.InitiallyUnowned" c:type="GInitiallyUnowned"/>
      </field>
      <field name="flags">
        <type name="uint32" c:type="guint32"/>
      </field>
      <glib:signal name="destroy">
        <doc xml:whitespace="preserve">Destroy and free an IBusObject
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ObjectClass"
            c:type="IBusObjectClass"
            glib:is-gtype-struct-for="Object">
      <field name="parent">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
      <field name="destroy">
        <callback name="destroy" c:type="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="IBusObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="7">
          <type name="any"/>
        </array>
      </field>
    </record>
    <callback name="ObjectDestroyFunc" c:type="IBusObjectDestroyFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter transfer-ownership="none">
          <type name="Object" c:type="IBusObject*"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="ObjectFlags"
              glib:type-name="IBusObjectFlags"
              glib:get-type="ibus_object_flags_get_type"
              c:type="IBusObjectFlags">
      <member name="in_destruction"
              value="1"
              c:identifier="IBUS_IN_DESTRUCTION"
              glib:nick="in-destruction"/>
      <member name="destroyed"
              value="2"
              c:identifier="IBUS_DESTROYED"
              glib:nick="destroyed"/>
      <member name="reserved_1"
              value="4"
              c:identifier="IBUS_RESERVED_1"
              glib:nick="reserved-1"/>
      <member name="reserved_2"
              value="8"
              c:identifier="IBUS_RESERVED_2"
              glib:nick="reserved-2"/>
    </bitfield>
    <class name="ObservedPath"
           c:type="IBusObservedPath"
           parent="Serializable"
           glib:type-name="IBusObservedPath"
           glib:get-type="ibus_observed_path_get_type"
           glib:type-struct="ObservedPathClass">
      <doc xml:whitespace="preserve">Data structure of IBusObservedPath.</doc>
      <constructor name="new_from_xml_node"
                   c:identifier="ibus_observed_path_new_from_xml_node">
        <doc xml:whitespace="preserve">New an IBusObservedPath from an XML node.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusObservedPath.</doc>
          <type name="ObservedPath" c:type="IBusObservedPath*"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <doc xml:whitespace="preserve">An XML node that contain path.</doc>
            <type name="XMLNode" c:type="XMLNode*"/>
          </parameter>
          <parameter name="fill_stat" transfer-ownership="none">
            <doc xml:whitespace="preserve">Auto-fill the path status.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new" c:identifier="ibus_observed_path_new">
        <doc xml:whitespace="preserve">New an IBusObservedPath from an XML node.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusObservedPath.</doc>
          <type name="ObservedPath" c:type="IBusObservedPath*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The path string.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="fill_stat" transfer-ownership="none">
            <doc xml:whitespace="preserve">Auto-fill the path status.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="traverse" c:identifier="ibus_observed_path_traverse">
        <doc xml:whitespace="preserve">Recursively traverse the path and put the files and subdirectory in to a newly allocated
GLists, if the @path is a directory. Otherwise returns NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocate GList which holds content in path; NULL if @path is not directory.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ObservedPath"/>
          </type>
        </return-value>
      </method>
      <method name="check_modification"
              c:identifier="ibus_observed_path_check_modification">
        <doc xml:whitespace="preserve">Checks whether the path is modified by comparing the mtime in object and mtime in file system.
Returns TRUE if imtime is changed, otherwise FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if mtime is changed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="output" c:identifier="ibus_observed_path_output">
        <doc xml:whitespace="preserve">Append the observed path to a string with following format:
&amp;lt;path mtime="&amp;lt;i&amp;gt;modified time&amp;lt;/i&amp;gt;" &amp;gt;&amp;lt;i&amp;gt;path&amp;lt;/i&amp;gt;&amp;lt;/path&amp;gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="output" transfer-ownership="none">
            <doc xml:whitespace="preserve">Path is appended to.</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="indent" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of indent.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Serializable" c:type="IBusSerializable"/>
      </field>
      <field name="path">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mtime">
        <type name="long" c:type="glong"/>
      </field>
      <field name="is_dir">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="is_exist">
        <type name="boolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="ObservedPathClass"
            c:type="IBusObservedPathClass"
            glib:is-gtype-struct-for="ObservedPath">
      <field name="parent">
        <type name="SerializableClass" c:type="IBusSerializableClass"/>
      </field>
    </record>
    <constant name="Ocaron" value="16777681">
      <type name="int"/>
    </constant>
    <constant name="Ocircumflex" value="212">
      <type name="int"/>
    </constant>
    <constant name="Ocircumflexacute" value="16785104">
      <type name="int"/>
    </constant>
    <constant name="Ocircumflexbelowdot" value="16785112">
      <type name="int"/>
    </constant>
    <constant name="Ocircumflexgrave" value="16785106">
      <type name="int"/>
    </constant>
    <constant name="Ocircumflexhook" value="16785108">
      <type name="int"/>
    </constant>
    <constant name="Ocircumflextilde" value="16785110">
      <type name="int"/>
    </constant>
    <constant name="Odiaeresis" value="214">
      <type name="int"/>
    </constant>
    <constant name="Odoubleacute" value="469">
      <type name="int"/>
    </constant>
    <constant name="Ograve" value="210">
      <type name="int"/>
    </constant>
    <constant name="Ohook" value="16785102">
      <type name="int"/>
    </constant>
    <constant name="Ohorn" value="16777632">
      <type name="int"/>
    </constant>
    <constant name="Ohornacute" value="16785114">
      <type name="int"/>
    </constant>
    <constant name="Ohornbelowdot" value="16785122">
      <type name="int"/>
    </constant>
    <constant name="Ohorngrave" value="16785116">
      <type name="int"/>
    </constant>
    <constant name="Ohornhook" value="16785118">
      <type name="int"/>
    </constant>
    <constant name="Ohorntilde" value="16785120">
      <type name="int"/>
    </constant>
    <constant name="Omacron" value="978">
      <type name="int"/>
    </constant>
    <constant name="Ooblique" value="216">
      <type name="int"/>
    </constant>
    <enumeration name="Orientation"
                 glib:type-name="IBusOrientation"
                 glib:get-type="ibus_orientation_get_type"
                 c:type="IBusOrientation">
      <doc xml:whitespace="preserve">Orientation of UI.</doc>
      <member name="horizontal"
              value="0"
              c:identifier="IBUS_ORIENTATION_HORIZONTAL"
              glib:nick="horizontal"/>
      <member name="vertical"
              value="1"
              c:identifier="IBUS_ORIENTATION_VERTICAL"
              glib:nick="vertical"/>
      <member name="system"
              value="2"
              c:identifier="IBUS_ORIENTATION_SYSTEM"
              glib:nick="system"/>
    </enumeration>
    <constant name="Oslash" value="216">
      <type name="int"/>
    </constant>
    <constant name="Otilde" value="213">
      <type name="int"/>
    </constant>
    <constant name="Overlay1_Enable" value="65144">
      <type name="int"/>
    </constant>
    <constant name="Overlay2_Enable" value="65145">
      <type name="int"/>
    </constant>
    <constant name="P" value="80">
      <type name="int"/>
    </constant>
    <constant name="PATH_CONFIG" value="/org/freedesktop/IBus/Config">
      <type name="utf8"/>
    </constant>
    <constant name="PATH_FACTORY" value="/org/freedesktop/IBus/Factory">
      <type name="utf8"/>
    </constant>
    <constant name="PATH_IBUS" value="/org/freedesktop/IBus">
      <type name="utf8"/>
    </constant>
    <constant name="PATH_INPUT_CONTEXT"
              value="/org/freedesktop/IBus/InputContext_%d">
      <type name="utf8"/>
    </constant>
    <constant name="PATH_NOTIFICATIONS"
              value="/org/freedesktop/IBus/Notifications">
      <type name="utf8"/>
    </constant>
    <constant name="PATH_PANEL" value="/org/freedesktop/IBus/Panel">
      <type name="utf8"/>
    </constant>
    <constant name="Pabovedot" value="16784982">
      <type name="int"/>
    </constant>
    <constant name="Page_Down" value="65366">
      <type name="int"/>
    </constant>
    <constant name="Page_Up" value="65365">
      <type name="int"/>
    </constant>
    <class name="PanelService"
           c:type="IBusPanelService"
           parent="Service"
           glib:type-name="IBusPanelService"
           glib:get-type="ibus_panel_service_get_type"
           glib:type-struct="PanelServiceClass">
      <doc xml:whitespace="preserve">An opaque data type representing an IBusPanelService.</doc>
      <constructor name="new" c:identifier="ibus_panel_service_new">
        <doc xml:whitespace="preserve">New an IBusPanelService from an IBusConnection.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusPanelService.</doc>
          <type name="PanelService" c:type="IBusPanelService*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusConnection.</doc>
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="focus_in">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="input_context_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="focus_out">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="input_context_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="register_properties">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="prop_list" transfer-ownership="none">
            <type name="PropList" c:type="IBusPropList*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_cursor_location">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="w" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="h" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_auxiliary_text">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <type name="Text" c:type="IBusText*"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_lookup_table">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="lookup_table" transfer-ownership="none">
            <type name="LookupTable" c:type="IBusLookupTable*"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_preedit_text">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <type name="Text" c:type="IBusText*"/>
          </parameter>
          <parameter name="cursor_pos" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_property">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="prop" transfer-ownership="none">
            <type name="Property" c:type="IBusProperty*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cursor_down_lookup_table">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cursor_up_lookup_table">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="destroy">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="hide_auxiliary_text">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="hide_language_bar">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="hide_lookup_table">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="hide_preedit_text">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="page_down_lookup_table">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="page_up_lookup_table">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="show_auxiliary_text">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="show_language_bar">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="show_lookup_table">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="show_preedit_text">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="start_setup">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="state_changed">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="Error" c:type="IBusError**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="candidate_clicked"
              c:identifier="ibus_panel_service_candidate_clicked">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="cursor_down" c:identifier="ibus_panel_service_cursor_down">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="cursor_up" c:identifier="ibus_panel_service_cursor_up">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="page_down" c:identifier="ibus_panel_service_page_down">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="page_up" c:identifier="ibus_panel_service_page_up">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="property_active"
              c:identifier="ibus_panel_service_property_active">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prop_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="prop_state" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="property_show"
              c:identifier="ibus_panel_service_property_show">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prop_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="property_hide"
              c:identifier="ibus_panel_service_property_hide">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prop_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Connection of this IBusPanelService.</doc>
        <type name="Connection" c:type="IBusConnection"/>
      </property>
      <field name="parent">
        <type name="Service" c:type="IBusService"/>
      </field>
    </class>
    <record name="PanelServiceClass"
            c:type="IBusPanelServiceClass"
            glib:is-gtype-struct-for="PanelService">
      <field name="parent">
        <type name="ServiceClass" c:type="IBusServiceClass"/>
      </field>
      <field name="focus_in">
        <callback name="focus_in" c:type="focus_in">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="input_context_path" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="focus_out">
        <callback name="focus_out" c:type="focus_out">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="input_context_path" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="register_properties">
        <callback name="register_properties" c:type="register_properties">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="prop_list" transfer-ownership="none">
              <type name="PropList" c:type="IBusPropList*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_cursor_location">
        <callback name="set_cursor_location" c:type="set_cursor_location">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="int" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="int" c:type="gint"/>
            </parameter>
            <parameter name="w" transfer-ownership="none">
              <type name="int" c:type="gint"/>
            </parameter>
            <parameter name="h" transfer-ownership="none">
              <type name="int" c:type="gint"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_auxiliary_text">
        <callback name="update_auxiliary_text" c:type="update_auxiliary_text">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="Text" c:type="IBusText*"/>
            </parameter>
            <parameter name="visible" transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_lookup_table">
        <callback name="update_lookup_table" c:type="update_lookup_table">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="lookup_table" transfer-ownership="none">
              <type name="LookupTable" c:type="IBusLookupTable*"/>
            </parameter>
            <parameter name="visible" transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_preedit_text">
        <callback name="update_preedit_text" c:type="update_preedit_text">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="Text" c:type="IBusText*"/>
            </parameter>
            <parameter name="cursor_pos" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
            <parameter name="visible" transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_property">
        <callback name="update_property" c:type="update_property">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="prop" transfer-ownership="none">
              <type name="Property" c:type="IBusProperty*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cursor_down_lookup_table">
        <callback name="cursor_down_lookup_table"
                  c:type="cursor_down_lookup_table">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cursor_up_lookup_table">
        <callback name="cursor_up_lookup_table"
                  c:type="cursor_up_lookup_table">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy" c:type="destroy">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hide_auxiliary_text">
        <callback name="hide_auxiliary_text" c:type="hide_auxiliary_text">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hide_language_bar">
        <callback name="hide_language_bar" c:type="hide_language_bar">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hide_lookup_table">
        <callback name="hide_lookup_table" c:type="hide_lookup_table">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hide_preedit_text">
        <callback name="hide_preedit_text" c:type="hide_preedit_text">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="page_down_lookup_table">
        <callback name="page_down_lookup_table"
                  c:type="page_down_lookup_table">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="page_up_lookup_table">
        <callback name="page_up_lookup_table" c:type="page_up_lookup_table">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset" c:type="reset">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show_auxiliary_text">
        <callback name="show_auxiliary_text" c:type="show_auxiliary_text">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show_language_bar">
        <callback name="show_language_bar" c:type="show_language_bar">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show_lookup_table">
        <callback name="show_lookup_table" c:type="show_lookup_table">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show_preedit_text">
        <callback name="show_preedit_text" c:type="show_preedit_text">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="start_setup">
        <callback name="start_setup" c:type="start_setup">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="state_changed">
        <callback name="state_changed" c:type="state_changed">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="PanelService" c:type="IBusPanelService*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="Error" c:type="IBusError**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="any"/>
        </array>
      </field>
    </record>
    <constant name="Pause" value="65299">
      <type name="int"/>
    </constant>
    <record name="PendingCall" c:type="IBusPendingCall">
      <method name="ref" c:identifier="ibus_pending_call_ref">
        <doc xml:whitespace="preserve">Increases the reference count on a pending call.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A reference of IBusPendingCall.</doc>
          <type name="PendingCall" c:type="IBusPendingCall*"/>
        </return-value>
      </method>
      <method name="unref" c:identifier="ibus_pending_call_unref">
        <doc xml:whitespace="preserve">Decreases the reference count on a pending call.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_notify" c:identifier="ibus_pending_call_set_notify">
        <doc xml:whitespace="preserve">Sets a notification function to be called when the reply is received or the pending call times out.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE if not enough memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="function"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:whitespace="preserve">An pending call notify callback function.</doc>
            <type name="PendingCallNotifyFunction"
                  c:type="IBusPendingCallNotifyFunction"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">User data for the callback function.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="free_user_data"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:whitespace="preserve">Callback to free the user_data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel" c:identifier="ibus_pending_call_cancel">
        <doc xml:whitespace="preserve">Cancels the pending call, such that any reply or error received will just be ignored.
Drops the dbus library's internal reference to the DBusPendingCall so will free the call
if nobody else is holding a reference.
But usually application owns a reference from dbus_connection_send_with_reply().
Note that canceling a pending call will not simulate a timed-out call;
if a call times out, then a timeout error reply is received.
If you cancel the call, no reply is received unless the reply was already received before you canceled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_completed"
              c:identifier="ibus_pending_call_get_completed">
        <doc xml:whitespace="preserve">Whether the pending call has received a reply or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if pending call has received a reply; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="steal_reply" c:identifier="ibus_pending_call_steal_reply">
        <doc xml:whitespace="preserve">Gets the reply, or returns NULL if none has been received yet.
Ownership of the reply message passes to the caller.
This function can only be called once per pending call,
since the reply message is transferred to the caller.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">Replied message; NULL if none has been received yet.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
      </method>
      <method name="block" c:identifier="ibus_pending_call_block">
        <doc xml:whitespace="preserve">Block until the pending call is completed.
The blocking is as with ibus_connection_send_with_reply_and_block();
it does not enter the main loop or process other messages,
it simply waits for the reply in question.
If the pending call is already completed, this function returns immediately.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="wait" c:identifier="ibus_pending_call_wait">
        <doc xml:whitespace="preserve">Wait until the pending call is completed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_data" c:identifier="ibus_pending_call_set_data">
        <doc xml:whitespace="preserve">Stores a pointer on a IBusPendingCall, along with an optional function
to be used for freeing the data when the data is set again, or when the pending call is finalized.
The slot number must have been allocated with ibus_pending_call_allocate_data_slot().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if there was enough memory to store the data; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:whitespace="preserve">The slot number.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The data to store</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="free_data_func"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:whitespace="preserve">Callback to free the data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="ibus_pending_call_get_data">
        <doc xml:whitespace="preserve">Retrieves data previously set with ibus_pending_call_set_data().
The slot must still be allocated (must not have been freed).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The stored data; NULL if no such data.</doc>
          <type name="any" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:whitespace="preserve">The slot number.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <callback name="PendingCallNotifyFunction"
              c:type="IBusPendingCallNotifyFunction">
      <doc xml:whitespace="preserve">Callback prototype of pending call notify function.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pending" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusPendingCall.</doc>
          <type name="PendingCall" c:type="IBusPendingCall*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <doc xml:whitespace="preserve">User data for the callback function.</doc>
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="PesetaSign" value="16785575">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Accelerate" value="65274">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Button1" value="65257">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Button2" value="65258">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Button3" value="65259">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Button4" value="65260">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Button5" value="65261">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Button_Dflt" value="65256">
      <type name="int"/>
    </constant>
    <constant name="Pointer_DblClick1" value="65263">
      <type name="int"/>
    </constant>
    <constant name="Pointer_DblClick2" value="65264">
      <type name="int"/>
    </constant>
    <constant name="Pointer_DblClick3" value="65265">
      <type name="int"/>
    </constant>
    <constant name="Pointer_DblClick4" value="65266">
      <type name="int"/>
    </constant>
    <constant name="Pointer_DblClick5" value="65267">
      <type name="int"/>
    </constant>
    <constant name="Pointer_DblClick_Dflt" value="65262">
      <type name="int"/>
    </constant>
    <constant name="Pointer_DfltBtnNext" value="65275">
      <type name="int"/>
    </constant>
    <constant name="Pointer_DfltBtnPrev" value="65276">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Down" value="65251">
      <type name="int"/>
    </constant>
    <constant name="Pointer_DownLeft" value="65254">
      <type name="int"/>
    </constant>
    <constant name="Pointer_DownRight" value="65255">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Drag1" value="65269">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Drag2" value="65270">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Drag3" value="65271">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Drag4" value="65272">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Drag5" value="65277">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Drag_Dflt" value="65268">
      <type name="int"/>
    </constant>
    <constant name="Pointer_EnableKeys" value="65273">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Left" value="65248">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Right" value="65249">
      <type name="int"/>
    </constant>
    <constant name="Pointer_Up" value="65250">
      <type name="int"/>
    </constant>
    <constant name="Pointer_UpLeft" value="65252">
      <type name="int"/>
    </constant>
    <constant name="Pointer_UpRight" value="65253">
      <type name="int"/>
    </constant>
    <enumeration name="PreeditFocusMode"
                 glib:type-name="IBusPreeditFocusMode"
                 glib:get-type="ibus_preedit_focus_mode_get_type"
                 c:type="IBusPreeditFocusMode">
      <doc xml:whitespace="preserve">Pre-edit commit mode when the focus is lost.</doc>
      <member name="clear"
              value="0"
              c:identifier="IBUS_ENGINE_PREEDIT_CLEAR"
              glib:nick="clear"/>
      <member name="commit"
              value="1"
              c:identifier="IBUS_ENGINE_PREEDIT_COMMIT"
              glib:nick="commit"/>
    </enumeration>
    <constant name="Prev_Virtual_Screen" value="65233">
      <type name="int"/>
    </constant>
    <constant name="PreviousCandidate" value="65342">
      <type name="int"/>
    </constant>
    <constant name="Print" value="65377">
      <type name="int"/>
    </constant>
    <constant name="Prior" value="65365">
      <type name="int"/>
    </constant>
    <class name="PropList"
           c:type="IBusPropList"
           parent="Serializable"
           glib:type-name="IBusPropList"
           glib:get-type="ibus_prop_list_get_type"
           glib:type-struct="PropListClass">
      <doc xml:whitespace="preserve">An array of IBusProperties.</doc>
      <constructor name="new" c:identifier="ibus_prop_list_new">
        <doc xml:whitespace="preserve">New a IBusPropList.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusPropList.</doc>
          <type name="PropList" c:type="IBusPropList*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="ibus_prop_list_append">
        <doc xml:whitespace="preserve">Append an IBusProperty to an IBusPropList, and increase reference.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:whitespace="preserve">IBusProperty to be append to @prop_list.</doc>
            <type name="Property" c:type="IBusProperty*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="ibus_prop_list_get">
        <doc xml:whitespace="preserve">Returns IBusProperty at given index. Borrowed reference.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">IBusProperty at given index, NULL if no such IBusProperty.</doc>
          <type name="Property" c:type="IBusProperty*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">Index of an IBusPropList.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_property"
              c:identifier="ibus_prop_list_update_property">
        <doc xml:whitespace="preserve">Update an IBusProperty in IBusPropList.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeeded, FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:whitespace="preserve">IBusProperty to be update.</doc>
            <type name="Property" c:type="IBusProperty*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Serializable" c:type="IBusSerializable"/>
      </field>
      <field name="properties">
        <type name="GLib.Array" c:type="GArray*"/>
      </field>
    </class>
    <record name="PropListClass"
            c:type="IBusPropListClass"
            glib:is-gtype-struct-for="PropList">
      <field name="parent">
        <type name="SerializableClass" c:type="IBusSerializableClass"/>
      </field>
    </record>
    <enumeration name="PropState"
                 glib:type-name="IBusPropState"
                 glib:get-type="ibus_prop_state_get_type"
                 c:type="IBusPropState">
      <doc xml:whitespace="preserve">State of IBusProperty. The actual effect depends on #IBusPropType of the
IBusProperty.
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;PROP_TYPE_TOGGLE&lt;/term&gt;
&lt;listitem&gt;&lt;para&gt;Emphasized if PROP_STATE_CHECKED, normal otherwise.&lt;/para&gt;&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;varlistentry&gt;
&lt;term&gt;PROP_TYPE_RADIO&lt;/term&gt;
&lt;listitem&gt;&lt;para&gt;Option checked if PROP_STATE_CHECKED, unchecked otherwise.&lt;/para&gt;&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;
No effect on other types.</doc>
      <member name="unchecked"
              value="0"
              c:identifier="PROP_STATE_UNCHECKED"
              glib:nick="unchecked"/>
      <member name="checked"
              value="1"
              c:identifier="PROP_STATE_CHECKED"
              glib:nick="checked"/>
      <member name="inconsistent"
              value="2"
              c:identifier="PROP_STATE_INCONSISTENT"
              glib:nick="inconsistent"/>
    </enumeration>
    <enumeration name="PropType"
                 glib:type-name="IBusPropType"
                 glib:get-type="ibus_prop_type_get_type"
                 c:type="IBusPropType">
      <doc xml:whitespace="preserve">Type enumeration of IBusProperty.</doc>
      <member name="normal"
              value="0"
              c:identifier="PROP_TYPE_NORMAL"
              glib:nick="normal"/>
      <member name="toggle"
              value="1"
              c:identifier="PROP_TYPE_TOGGLE"
              glib:nick="toggle"/>
      <member name="radio"
              value="2"
              c:identifier="PROP_TYPE_RADIO"
              glib:nick="radio"/>
      <member name="menu"
              value="3"
              c:identifier="PROP_TYPE_MENU"
              glib:nick="menu"/>
      <member name="separator"
              value="4"
              c:identifier="PROP_TYPE_SEPARATOR"
              glib:nick="separator"/>
    </enumeration>
    <class name="Property"
           c:type="IBusProperty"
           parent="Serializable"
           glib:type-name="IBusProperty"
           glib:get-type="ibus_property_get_type"
           glib:type-struct="PropertyClass">
      <doc xml:whitespace="preserve">UI component for input method engine property.</doc>
      <constructor name="new" c:identifier="ibus_property_new">
        <doc xml:whitespace="preserve">New a IBusProperty.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusProperty.</doc>
          <type name="Property" c:type="IBusProperty*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">Unique Identity for the IBusProperty.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">IBusPropType of IBusProperty.</doc>
            <type name="PropType" c:type="IBusPropType"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">Text shown in UI.</doc>
            <type name="Text" c:type="IBusText*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon file for the IBusProperty.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none">
            <doc xml:whitespace="preserve">Message shown if mouse hovered the  IBusProperty.</doc>
            <type name="Text" c:type="IBusText*"/>
          </parameter>
          <parameter name="sensitive" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the IBusProperty is sensitive to keyboard and mouse event.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the IBusProperty is visible.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">IBusPropState of IBusProperty.</doc>
            <type name="PropState" c:type="IBusPropState"/>
          </parameter>
          <parameter name="prop_list" transfer-ownership="none">
            <doc xml:whitespace="preserve">IBusPropList that contains sub IBusProperties.</doc>
            <type name="PropList" c:type="IBusPropList*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_label" c:identifier="ibus_property_set_label">
        <doc xml:whitespace="preserve">Set the label of IBusProperty.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">Text shown in UI.</doc>
            <type name="Text" c:type="IBusText*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon" c:identifier="ibus_property_set_icon">
        <doc xml:whitespace="preserve">Set the icon of IBusProperty.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon shown in UI. It could be a full path of an icon file or an icon name.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip" c:identifier="ibus_property_set_tooltip">
        <doc xml:whitespace="preserve">Set the tooltip of IBusProperty.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tooltip" transfer-ownership="none">
            <doc xml:whitespace="preserve">Text of the tooltip.</doc>
            <type name="Text" c:type="IBusText*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sensitive" c:identifier="ibus_property_set_sensitive">
        <doc xml:whitespace="preserve">Set whether the IBusProperty is sensitive.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensitive" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the IBusProperty is sensitive.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible" c:identifier="ibus_property_set_visible">
        <doc xml:whitespace="preserve">Set whether the IBusProperty is visible.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the IBusProperty is visible.</doc>
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state" c:identifier="ibus_property_set_state">
        <doc xml:whitespace="preserve">Set the state of the IBusProperty.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">The state of the IBusProperty.</doc>
            <type name="PropState" c:type="IBusPropState"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sub_props" c:identifier="ibus_property_set_sub_props">
        <doc xml:whitespace="preserve">Set the sub IBusProperties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prop_list" transfer-ownership="none">
            <doc xml:whitespace="preserve">IBusPropList that contains sub IBusProperties.</doc>
            <type name="PropList" c:type="IBusPropList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="ibus_property_update">
        <doc xml:whitespace="preserve">Update the content of an IBusProperty.
IBusProperty @prop_update can either be sub-property of @prop,
or holds new values for @prop.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE for update suceeded; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="prop_update" transfer-ownership="none">
            <doc xml:whitespace="preserve">IBusPropList that contains sub IBusProperties.</doc>
            <type name="Property" c:type="IBusProperty*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Serializable" c:type="IBusSerializable"/>
      </field>
      <field name="key">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="icon">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="label">
        <type name="Text" c:type="IBusText*"/>
      </field>
      <field name="tooltip">
        <type name="Text" c:type="IBusText*"/>
      </field>
      <field name="sensitive">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="visible">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="type">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="state">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="sub_props">
        <type name="PropList" c:type="IBusPropList*"/>
      </field>
    </class>
    <record name="PropertyClass"
            c:type="IBusPropertyClass"
            glib:is-gtype-struct-for="Property">
      <field name="parent">
        <type name="SerializableClass" c:type="IBusSerializableClass"/>
      </field>
    </record>
    <class name="Proxy"
           c:type="IBusProxy"
           parent="Object"
           glib:type-name="IBusProxy"
           glib:get-type="ibus_proxy_get_type"
           glib:type-struct="ProxyClass">
      <doc xml:whitespace="preserve">An opaque data type representing an IBusProxy.</doc>
      <constructor name="new" c:identifier="ibus_proxy_new">
        <doc xml:whitespace="preserve">New an IBusProxy instance.
Property IBusProxy:name is set as @name, and
IBusProxy:path is set as @path.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusProxy instance.</doc>
          <type name="Proxy" c:type="IBusProxy*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">The service name of proxy object.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The path of proxy object.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusConnection.</doc>
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="signal">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="send" c:identifier="ibus_proxy_send">
        <doc xml:whitespace="preserve">Send an #IBusMessage to the corresponding service.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">The IBusMessage to be sent.</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call" c:identifier="ibus_proxy_call" introspectable="0">
        <doc xml:whitespace="preserve">Call a method of the corresponding service.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="method" transfer-ownership="none">
            <doc xml:whitespace="preserve">The method to be called.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="first_arg_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">Type of first argument.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="call_with_reply"
              c:identifier="ibus_proxy_call_with_reply"
              introspectable="0">
        <doc xml:whitespace="preserve">Call a method of the corresponding service, and returns an IBusPendingCall used to receive a reply to the message.
This function calls ibus_connection_send_with_reply() to do the actual sending.
ibus_proxy_send_with_reply(), ibus_proxy_call_with_reply_and_block().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="method" transfer-ownership="none">
            <doc xml:whitespace="preserve">The method to be called.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="pending" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return location of a IBusPendingCall object, or NULL if connection is disconnected.</doc>
            <type name="PendingCall" c:type="IBusPendingCall**"/>
          </parameter>
          <parameter name="timeout_milliseconds" transfer-ownership="none">
            <doc xml:whitespace="preserve">Time out in milliseconds.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:whitespace="preserve">Returned error is stored here; NULL to ignore error.</doc>
            <type name="Error" c:type="IBusError**"/>
          </parameter>
          <parameter name="first_arg_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">Type of first argument.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="call_with_reply_and_block"
              c:identifier="ibus_proxy_call_with_reply_and_block"
              introspectable="0">
        <doc xml:whitespace="preserve">Call a method of the corresponding service and blocks a certain time period while waiting for
an IBusMessage as reply.
If the IBusMessage is not NULL, it calls ibus_connection_send_with_reply_and_block() to do the
actual sending.
ibus_proxy_send_with_reply(), ibus_proxy_call_with_reply_and_block().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An IBusMessage that is the reply or NULL with an error code if the function fails.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
        <parameters>
          <parameter name="method" transfer-ownership="none">
            <doc xml:whitespace="preserve">The method to be called.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="timeout_milliseconds" transfer-ownership="none">
            <doc xml:whitespace="preserve">Time out in milliseconds.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:whitespace="preserve">Returned error is stored here; NULL to ignore error.</doc>
            <type name="Error" c:type="IBusError**"/>
          </parameter>
          <parameter name="first_arg_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">Type of first argument.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="send_with_reply" c:identifier="ibus_proxy_send_with_reply">
        <doc xml:whitespace="preserve">Send an IBusMessage to the corresponding service and returns
an IBusPendingCall used to receive a reply to the message.
This function calls ibus_connection_send_with_reply() to do the actual sending.
ibus_proxy_call_with_reply(), ibus_proxy_send_with_reply_and_block().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">The IBusMessage to be sent.</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
          <parameter name="pending" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return location of a IBusPendingCall object, or NULL if connection is disconnected.</doc>
            <type name="PendingCall" c:type="IBusPendingCall**"/>
          </parameter>
          <parameter name="timeout_milliseconds" transfer-ownership="none">
            <doc xml:whitespace="preserve">Time out in milliseconds.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_with_reply_and_block"
              c:identifier="ibus_proxy_send_with_reply_and_block">
        <doc xml:whitespace="preserve">Send an IBusMessage to the corresponding service and blocks a certain time period while waiting for
an IBusMessage as reply.
If the IBusMessage is not NULL, it calls ibus_connection_send_with_reply_and_block() to do the
actual sending.
ibus_proxy_call_with_reply_and_block().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An IBusMessage that is the reply or NULL with an error code if the function fails.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">The IBusMessage to be sent.</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="handle_signal" c:identifier="ibus_proxy_handle_signal">
        <doc xml:whitespace="preserve">Handle a signal by emitting IBusProxy::ibus-signal.
If signal name is &lt;constant&gt;NameOwnerChanged&lt;/constant&gt;
and the service name is identical to the old name, then
Otherwise TRUE is returned.
Note that if the path of of message is not identical to the IBusProxy:path
this function will not emit IBusProxy::ibus-signal.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">The IBusMessage to be sent.</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ibus_proxy_get_name">
        <doc xml:whitespace="preserve">Get the service name of a proxy object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The service name of the proxy object.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_unique_name" c:identifier="ibus_proxy_get_unique_name">
        <doc xml:whitespace="preserve">Get the unique name of the proxy object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The service name of the proxy object.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_path" c:identifier="ibus_proxy_get_path">
        <doc xml:whitespace="preserve">Get the path of a proxy object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The path of proxy object.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_interface" c:identifier="ibus_proxy_get_interface">
        <doc xml:whitespace="preserve">Get interface of a proxy object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The service name of the proxy object.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_connection" c:identifier="ibus_proxy_get_connection">
        <doc xml:whitespace="preserve">Get the connection of a proxy object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The connection of the proxy object.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </return-value>
      </method>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The connection of the proxy object.</doc>
        <type name="Connection" c:type="IBusConnection"/>
      </property>
      <property name="interface"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The interface of the proxy object.</doc>
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The service name of the proxy object.</doc>
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The path of the proxy object.</doc>
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="IBusObject"/>
      </field>
      <glib:signal name="ibus-signal">
        <doc xml:whitespace="preserve">Emitted when sending a signal.
Implement the member function ibus_signal() in extended class to receive this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">TRUE if the path of @message is identical to IBusProxy:path and successfully handled.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">An message that contains the signal.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ProxyClass"
            c:type="IBusProxyClass"
            glib:is-gtype-struct-for="Proxy">
      <field name="parent">
        <type name="ObjectClass" c:type="IBusObjectClass"/>
      </field>
      <field name="signal">
        <callback name="signal" c:type="ibus_signal">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="proxy" transfer-ownership="none">
              <type name="Proxy" c:type="IBusProxy*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="IBusMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="7">
          <type name="any"/>
        </array>
      </field>
    </record>
    <constant name="Q" value="81">
      <type name="int"/>
    </constant>
    <constant name="R" value="82">
      <type name="int"/>
    </constant>
    <constant name="R1" value="65490">
      <type name="int"/>
    </constant>
    <constant name="R10" value="65499">
      <type name="int"/>
    </constant>
    <constant name="R11" value="65500">
      <type name="int"/>
    </constant>
    <constant name="R12" value="65501">
      <type name="int"/>
    </constant>
    <constant name="R13" value="65502">
      <type name="int"/>
    </constant>
    <constant name="R14" value="65503">
      <type name="int"/>
    </constant>
    <constant name="R15" value="65504">
      <type name="int"/>
    </constant>
    <constant name="R2" value="65491">
      <type name="int"/>
    </constant>
    <constant name="R3" value="65492">
      <type name="int"/>
    </constant>
    <constant name="R4" value="65493">
      <type name="int"/>
    </constant>
    <constant name="R5" value="65494">
      <type name="int"/>
    </constant>
    <constant name="R6" value="65495">
      <type name="int"/>
    </constant>
    <constant name="R7" value="65496">
      <type name="int"/>
    </constant>
    <constant name="R8" value="65497">
      <type name="int"/>
    </constant>
    <constant name="R9" value="65498">
      <type name="int"/>
    </constant>
    <constant name="Racute" value="448">
      <type name="int"/>
    </constant>
    <constant name="Rcaron" value="472">
      <type name="int"/>
    </constant>
    <constant name="Rcedilla" value="931">
      <type name="int"/>
    </constant>
    <record name="Rectangle" c:type="IBusRectangle">
      <doc xml:whitespace="preserve">Rectangle definition.</doc>
      <field name="x" writable="1">
        <type name="int" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <type name="int" c:type="gint"/>
      </field>
      <field name="width" writable="1">
        <type name="int" c:type="gint"/>
      </field>
      <field name="height" writable="1">
        <type name="int" c:type="gint"/>
      </field>
    </record>
    <constant name="Redo" value="65382">
      <type name="int"/>
    </constant>
    <constant name="RepeatKeys_Enable" value="65138">
      <type name="int"/>
    </constant>
    <constant name="Return" value="65293">
      <type name="int"/>
    </constant>
    <constant name="Right" value="65363">
      <type name="int"/>
    </constant>
    <constant name="Romaji" value="65316">
      <type name="int"/>
    </constant>
    <constant name="RupeeSign" value="16785576">
      <type name="int"/>
    </constant>
    <constant name="S" value="83">
      <type name="int"/>
    </constant>
    <constant name="SCHWA" value="16777615">
      <type name="int"/>
    </constant>
    <constant name="SERVICE_CONFIG" value="org.freedesktop.IBus.Config">
      <type name="utf8"/>
    </constant>
    <constant name="SERVICE_IBUS" value="org.freedesktop.IBus">
      <type name="utf8"/>
    </constant>
    <constant name="SERVICE_NOTIFICATIONS"
              value="org.freedesktop.IBus.Notifications">
      <type name="utf8"/>
    </constant>
    <constant name="SERVICE_PANEL" value="org.freedesktop.IBus.Panel">
      <type name="utf8"/>
    </constant>
    <constant name="Sabovedot" value="16784992">
      <type name="int"/>
    </constant>
    <constant name="Sacute" value="422">
      <type name="int"/>
    </constant>
    <constant name="Scaron" value="425">
      <type name="int"/>
    </constant>
    <constant name="Scedilla" value="426">
      <type name="int"/>
    </constant>
    <constant name="Scircumflex" value="734">
      <type name="int"/>
    </constant>
    <constant name="Scroll_Lock" value="65300">
      <type name="int"/>
    </constant>
    <constant name="Select" value="65376">
      <type name="int"/>
    </constant>
    <constant name="Serbian_DJE" value="1713">
      <type name="int"/>
    </constant>
    <constant name="Serbian_DZE" value="1727">
      <type name="int"/>
    </constant>
    <constant name="Serbian_JE" value="1720">
      <type name="int"/>
    </constant>
    <constant name="Serbian_LJE" value="1721">
      <type name="int"/>
    </constant>
    <constant name="Serbian_NJE" value="1722">
      <type name="int"/>
    </constant>
    <constant name="Serbian_TSHE" value="1723">
      <type name="int"/>
    </constant>
    <constant name="Serbian_dje" value="1697">
      <type name="int"/>
    </constant>
    <constant name="Serbian_dze" value="1711">
      <type name="int"/>
    </constant>
    <constant name="Serbian_je" value="1704">
      <type name="int"/>
    </constant>
    <constant name="Serbian_lje" value="1705">
      <type name="int"/>
    </constant>
    <constant name="Serbian_nje" value="1706">
      <type name="int"/>
    </constant>
    <constant name="Serbian_tshe" value="1707">
      <type name="int"/>
    </constant>
    <class name="Serializable"
           c:type="IBusSerializable"
           parent="Object"
           glib:type-name="IBusSerializable"
           glib:get-type="ibus_serializable_get_type"
           glib:type-struct="SerializableClass">
      <doc xml:whitespace="preserve">All the fields in the &lt;structname&gt;IBusSerializable&lt;/structname&gt; structure are
private to the #IBusSerializable and should never be accessed directly.</doc>
      <constructor name="new" c:identifier="ibus_serializable_new">
        <doc xml:whitespace="preserve">Creates a new instance of an #IBusSerializable.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new instance of #IBusSerializable.</doc>
          <type name="Serializable" c:type="IBusSerializable*"/>
        </return-value>
      </constructor>
      <function name="deserialize"
                c:identifier="ibus_serializable_deserialize">
        <doc xml:whitespace="preserve">Deserialize an IBusMessageIter to an IBusSerializable/
The deserialize method should be implemented in extended class.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The deserialized IBusSerializable.</doc>
          <type name="Serializable" c:type="IBusSerializable*"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessageIter.</doc>
            <type name="MessageIter" c:type="IBusMessageIter*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="serialize" invoker="serialize">
        <doc xml:whitespace="preserve">Serialize an IBusSerializable to an IBusMessageIter.
The serialize method should be implemented in extended class.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessageIter.</doc>
            <type name="MessageIter" c:type="IBusMessageIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deserialize">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <type name="MessageIter" c:type="IBusMessageIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="copy">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="Serializable" c:type="IBusSerializable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="set_qattachment"
              c:identifier="ibus_serializable_set_qattachment">
        <doc xml:whitespace="preserve">Attach a value to an IBusSerializable. The value should be serializable as well.
Basic type such as integer, string are deemed to be serializable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">String formatted key for indexing value.</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">Value to be attached. Should be also serializable.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_qattachment"
              c:identifier="ibus_serializable_get_qattachment">
        <doc xml:whitespace="preserve">Get a value from attachment of an IBusSerializable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The attached value; or NULL if fail to retrieve the value.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">String formatted key for indexing value.</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_qattachment"
              c:identifier="ibus_serializable_remove_qattachment">
        <doc xml:whitespace="preserve">Remove a value from attachment of an IBusSerializable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">String formatted key for indexing value.</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="ibus_serializable_copy">
        <doc xml:whitespace="preserve">Clone an IBusSerializable.
The copy method should be implemented in extended class.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated clone object; or NULL if @object is not serializable.</doc>
          <type name="Serializable" c:type="IBusSerializable*"/>
        </return-value>
      </method>
      <method name="serialize" c:identifier="ibus_serializable_serialize">
        <doc xml:whitespace="preserve">Serialize an IBusSerializable to an IBusMessageIter.
The serialize method should be implemented in extended class.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessageIter.</doc>
            <type name="MessageIter" c:type="IBusMessageIter*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="flags">
        <type name="uint32" c:type="guint32"/>
      </field>
    </class>
    <record name="SerializableClass"
            c:type="IBusSerializableClass"
            glib:is-gtype-struct-for="Serializable">
      <field name="parent">
        <type name="ObjectClass" c:type="IBusObjectClass"/>
      </field>
      <field name="signature">
        <type name="GLib.String" c:type="GString*"/>
      </field>
      <field name="serialize">
        <callback name="serialize" c:type="serialize">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Serializable" c:type="IBusSerializable*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:whitespace="preserve">An IBusMessageIter.</doc>
              <type name="MessageIter" c:type="IBusMessageIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deserialize">
        <callback name="deserialize" c:type="deserialize">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Serializable" c:type="IBusSerializable*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="MessageIter" c:type="IBusMessageIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="copy">
        <callback name="copy" c:type="copy">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="dest" transfer-ownership="none">
              <type name="Serializable" c:type="IBusSerializable*"/>
            </parameter>
            <parameter name="src" transfer-ownership="none">
              <type name="Serializable" c:type="IBusSerializable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="5">
          <type name="any"/>
        </array>
      </field>
    </record>
    <callback name="SerializableCopyFunc" c:type="IBusSerializableCopyFunc">
      <doc xml:whitespace="preserve">Prototype of copy function.
Copy function copy from source IBusSerializable to the destination one.
Returns a gboolean value which indicates whether the copying is success.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:whitespace="preserve">The destination IBusSerializable.</doc>
          <type name="Serializable" c:type="IBusSerializable*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <doc xml:whitespace="preserve">A source IBusMessageIter.</doc>
          <type name="Serializable" c:type="IBusSerializable*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SerializableDeserializeFunc"
              c:type="IBusSerializableDeserializeFunc">
      <doc xml:whitespace="preserve">Prototype of deserialize function.
Deserialize function convert an IBusMessageIter to IBusSerializable.
Returns a gboolean value which indicates whether the conversion is success.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusSerializable.</doc>
          <type name="Serializable" c:type="IBusSerializable*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusMessageIter.</doc>
          <type name="MessageIter" c:type="IBusMessageIter*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SerializableSerializeFunc"
              c:type="IBusSerializableSerializeFunc">
      <doc xml:whitespace="preserve">Prototype of serialize function.
Serialize function convert an IBusSerializable to IBusMessageIter.
Returns a gboolean value which indicates whether the conversion is success.
Return TRUE if succeed.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusSerializable.</doc>
          <type name="Serializable" c:type="IBusSerializable*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusMessageIter.</doc>
          <type name="MessageIter" c:type="IBusMessageIter*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Server"
           c:type="IBusServer"
           parent="Object"
           glib:type-name="IBusServer"
           glib:get-type="ibus_server_get_type"
           glib:type-struct="ServerClass">
      <doc xml:whitespace="preserve">An opaque object representing an IBusServer.</doc>
      <constructor name="new" c:identifier="ibus_server_new">
        <doc xml:whitespace="preserve">New an IBusServer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusServer instance.</doc>
          <type name="Server" c:type="IBusServer*"/>
        </return-value>
      </constructor>
      <method name="listen" c:identifier="ibus_server_listen">
        <doc xml:whitespace="preserve">Listens for new connections on the given address.
If there are multiple semicolon-separated address entries in the address,
tries each one and listens on the first one that works.
Returns FALSE if listening fails for any reason.
To free the server, applications must call first ibus_server_disconnect() and then dbus_server_unref().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed ; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">Address of this server.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect" c:identifier="ibus_server_disconnect">
        <doc xml:whitespace="preserve">Releases the server's address and stops listening for new clients.
If called more than once, only the first call has an effect. Does not modify the server's reference count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_address" c:identifier="ibus_server_get_address">
        <doc xml:whitespace="preserve">Returns the address of the server, as a newly-allocated string which must be freed by the caller.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly allocated string which contain address.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_id" c:identifier="ibus_server_get_id">
        <doc xml:whitespace="preserve">Returns the unique ID of the server, as a newly-allocated string which must be freed by the caller.
This ID is normally used by clients to tell when two IBusConnection would be equivalent
(because the server address passed to ibus_connection_open() will have the same guid in the two cases).
ibus_connection_open() can re-use an existing connection with the same ID instead of opening a new connection.
This is an ID unique to each IBusServer. Remember that an IBusServer represents only one mode of connecting,
so e.g. a bus daemon can listen on multiple addresses which will mean it has multiple IBusServer each with
their own ID.
The ID is not a UUID in the sense of RFC4122; the details are explained in the D-Bus specification.
Returns the address of the server, as a newly-allocated string which must be freed by the caller.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly allocated string which contain address.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="is_connected" c:identifier="ibus_server_is_connected">
        <doc xml:whitespace="preserve">Returns TRUE if the server is still listening for new connections.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the server is still listening for new connections; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_auth_mechanisms"
              c:identifier="ibus_server_set_auth_mechanisms">
        <doc xml:whitespace="preserve">Sets the authentication mechanisms that this server offers to clients,
as a NULL-terminated array of mechanism names.
This function only affects connections created after it is called.
Pass NULL instead of an array to use all available mechanisms (this is the default behavior).
The D-Bus specification describes some of the supported mechanisms.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE if insufficient memory.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mechanisms" transfer-ownership="none">
            <doc xml:whitespace="preserve">NULL-terminated array of mechanisms.</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="connection-type" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The connection type of server object.</doc>
        <type name="GType" c:type="GType"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="IBusObject"/>
      </field>
      <glib:signal name="new-connection">
        <doc xml:whitespace="preserve">Emitted when a new connection is coming in.
In this handler, IBus could add a reference and continue processing the connection.
If no reference is added, the new connection will be released and closed after this signal.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">The corresponding IBusConnection.</doc>
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ServerClass"
            c:type="IBusServerClass"
            glib:is-gtype-struct-for="Server">
      <field name="parent">
        <type name="ObjectClass" c:type="IBusObjectClass"/>
      </field>
      <field name="new_connection">
        <callback name="new_connection" c:type="new_connection">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="IBusServer*"/>
            </parameter>
            <parameter name="connectin" transfer-ownership="none">
              <type name="Connection" c:type="IBusConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="7">
          <type name="any"/>
        </array>
      </field>
    </record>
    <class name="Service"
           c:type="IBusService"
           parent="Object"
           glib:type-name="IBusService"
           glib:get-type="ibus_service_get_type"
           glib:type-struct="ServiceClass">
      <doc xml:whitespace="preserve">An opaque data type representing an IBusService.</doc>
      <constructor name="new" c:identifier="ibus_service_new">
        <doc xml:whitespace="preserve">New an IBusService.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusService</doc>
          <type name="Service" c:type="IBusService*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">Object path.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="message">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="signal">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_path" c:identifier="ibus_service_get_path">
        <doc xml:whitespace="preserve">Returns the object path of an IBusService.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The object path of @service</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="handle_message" c:identifier="ibus_service_handle_message">
        <doc xml:whitespace="preserve">Emit an IBusMessage on an IBusConnection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">Corresponding IBusCOnnection</doc>
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">IBusMessage to be handled.</doc>
            <type name="Message" c:type="IBusMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_to_connection"
              c:identifier="ibus_service_add_to_connection">
        <doc xml:whitespace="preserve">Add an IBus Service to an IBusConnection.
This function also connects the service to the signal IBusConnection::destroy of the connection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">Corresponding IBusCOnnection</doc>
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections"
              c:identifier="ibus_service_get_connections">
        <doc xml:whitespace="preserve">Returns a copy of list of connections, but the caller does not own the element.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">A newly allocated list of connections.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Connection"/>
          </type>
        </return-value>
      </method>
      <method name="remove_from_connection"
              c:identifier="ibus_service_remove_from_connection">
        <doc xml:whitespace="preserve">Remove an IBusService from an IBusConnection.
This function also disconnects the signal IBusConnection::destroy.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">Corresponding IBusCOnnection</doc>
            <type name="Connection" c:type="IBusConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_from_all_connections"
              c:identifier="ibus_service_remove_from_all_connections">
        <doc xml:whitespace="preserve">Remove an IBusService from all connections.
This function also disconnects the signal IBusConnection::destroy.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="send_signal"
              c:identifier="ibus_service_send_signal"
              introspectable="0">
        <doc xml:whitespace="preserve">Send signal to all the IBusConnections of an IBusService.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="interface" transfer-ownership="none">
            <doc xml:whitespace="preserve">The interface the signal is emitted from.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of the signal.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="first_arg_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">Type of first argument.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The path of service object.</doc>
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="IBusObject"/>
      </field>
      <glib:signal name="ibus-message">
        <doc xml:whitespace="preserve">Send a message as IBusMessage though the @connection.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">Corresponding IBusConnection.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessage to be sent.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ibus-signal">
        <doc xml:whitespace="preserve">Send a signal as IBusMessage though the @connection.
&lt;note&gt;&lt;para&gt;Argument @user_data is ignored in this function.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">TRUE if succeed; FALSE otherwise.</doc>
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:whitespace="preserve">Corresponding IBusConnection.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">An IBusMessage to be sent.</doc>
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ServiceClass"
            c:type="IBusServiceClass"
            glib:is-gtype-struct-for="Service">
      <field name="parent">
        <type name="ObjectClass" c:type="IBusObjectClass"/>
      </field>
      <field name="message">
        <callback name="message" c:type="ibus_message">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="Service" c:type="IBusService*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="IBusConnection*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="IBusMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="signal">
        <callback name="signal" c:type="ibus_signal">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="Service" c:type="IBusService*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="IBusConnection*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="IBusMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pdummy">
        <array zero-terminated="0" c:type="gpointer" fixed-size="6">
          <type name="any"/>
        </array>
      </field>
    </record>
    <callback name="ServiceIBusMessageFunc" c:type="ServiceIBusMessageFunc">
      <doc xml:whitespace="preserve">Prototype of IBus service message sending callback function.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if failed.</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="service" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBsService.</doc>
          <type name="Service" c:type="IBusService*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:whitespace="preserve">Connection to IBus daemon.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:whitespace="preserve">IBusMessage to be sent.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ServiceIBusSignalFunc" c:type="ServiceIBusSignalFunc">
      <doc xml:whitespace="preserve">Prototype of IBus service signal sending callback function.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if succeed; %FALSE if failed.</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="service" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBsService.</doc>
          <type name="Service" c:type="IBusService*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:whitespace="preserve">Connection to IBus daemon.</doc>
          <type name="Connection" c:type="IBusConnection*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:whitespace="preserve">IBusMessage to be sent.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="Shift_L" value="65505">
      <type name="int"/>
    </constant>
    <constant name="Shift_Lock" value="65510">
      <type name="int"/>
    </constant>
    <constant name="Shift_R" value="65506">
      <type name="int"/>
    </constant>
    <constant name="SingleCandidate" value="65340">
      <type name="int"/>
    </constant>
    <constant name="SlowKeys_Enable" value="65139">
      <type name="int"/>
    </constant>
    <constant name="StickyKeys_Enable" value="65141">
      <type name="int"/>
    </constant>
    <constant name="Super_L" value="65515">
      <type name="int"/>
    </constant>
    <constant name="Super_R" value="65516">
      <type name="int"/>
    </constant>
    <constant name="Sys_Req" value="65301">
      <type name="int"/>
    </constant>
    <constant name="T" value="84">
      <type name="int"/>
    </constant>
    <constant name="THORN" value="222">
      <type name="int"/>
    </constant>
    <constant name="Tab" value="65289">
      <type name="int"/>
    </constant>
    <constant name="Tabovedot" value="16785002">
      <type name="int"/>
    </constant>
    <constant name="Tcaron" value="427">
      <type name="int"/>
    </constant>
    <constant name="Tcedilla" value="478">
      <type name="int"/>
    </constant>
    <constant name="Terminate_Server" value="65237">
      <type name="int"/>
    </constant>
    <class name="Text"
           c:type="IBusText"
           parent="Serializable"
           glib:type-name="IBusText"
           glib:get-type="ibus_text_get_type"
           glib:type-struct="TextClass">
      <doc xml:whitespace="preserve">A text object in IBus.</doc>
      <constructor name="new_from_string"
                   c:identifier="ibus_text_new_from_string">
        <doc xml:whitespace="preserve">New an IBusText from a string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusText.</doc>
          <type name="Text" c:type="IBusText*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">An text string to be set.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_ucs4" c:identifier="ibus_text_new_from_ucs4">
        <doc xml:whitespace="preserve">New an IBusText from an UCS-4 encoded string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusText.</doc>
          <type name="Text" c:type="IBusText*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">An text string to be set.</doc>
            <type name="GLib.unichar" c:type="gunichar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_static_string"
                   c:identifier="ibus_text_new_from_static_string">
        <doc xml:whitespace="preserve">New an IBusText from a static string.
Since @str is a static string which won't be freed.
This function will NOT duplicate @str.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusText.</doc>
          <type name="Text" c:type="IBusText*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">An text string to be set.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_printf"
                   c:identifier="ibus_text_new_from_printf"
                   introspectable="0">
        <doc xml:whitespace="preserve">New an IBusText from a printf expression.
The result of printf expression is stored in the new IBusText instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusText.</doc>
          <type name="Text" c:type="IBusText*"/>
        </return-value>
        <parameters>
          <parameter name="fmt" transfer-ownership="none">
            <doc xml:whitespace="preserve">printf format string.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_unichar"
                   c:identifier="ibus_text_new_from_unichar">
        <doc xml:whitespace="preserve">New an IBusText from a single UCS4-encoded character.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated IBusText.</doc>
          <type name="Text" c:type="IBusText*"/>
        </return-value>
        <parameters>
          <parameter name="c" transfer-ownership="none">
            <doc xml:whitespace="preserve">A single UCS4-encoded character.</doc>
            <type name="GLib.unichar" c:type="gunichar"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append_attribute"
              c:identifier="ibus_text_append_attribute">
        <doc xml:whitespace="preserve">Append an IBusAttribute for IBusText.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">IBusAttributeType for @text.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">Value for the type.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="start_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">The starting index, inclusive.</doc>
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="end_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">The ending index, exclusive.</doc>
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_length" c:identifier="ibus_text_get_length">
        <doc xml:whitespace="preserve">Return number of characters in an IBusText.
This function is based on g_utf8_strlen(), so unlike strlen(),
it does not count by bytes but characters instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Number of character in @text, not counted by bytes.</doc>
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="Serializable" c:type="IBusSerializable"/>
      </field>
      <field name="is_static">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="text">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="attrs">
        <type name="AttrList" c:type="IBusAttrList*"/>
      </field>
    </class>
    <record name="TextClass"
            c:type="IBusTextClass"
            glib:is-gtype-struct-for="Text">
      <field name="parent">
        <type name="SerializableClass" c:type="IBusSerializableClass"/>
      </field>
    </record>
    <constant name="Thai_baht" value="3551">
      <type name="int"/>
    </constant>
    <constant name="Thai_bobaimai" value="3514">
      <type name="int"/>
    </constant>
    <constant name="Thai_chochan" value="3496">
      <type name="int"/>
    </constant>
    <constant name="Thai_chochang" value="3498">
      <type name="int"/>
    </constant>
    <constant name="Thai_choching" value="3497">
      <type name="int"/>
    </constant>
    <constant name="Thai_chochoe" value="3500">
      <type name="int"/>
    </constant>
    <constant name="Thai_dochada" value="3502">
      <type name="int"/>
    </constant>
    <constant name="Thai_dodek" value="3508">
      <type name="int"/>
    </constant>
    <constant name="Thai_fofa" value="3517">
      <type name="int"/>
    </constant>
    <constant name="Thai_fofan" value="3519">
      <type name="int"/>
    </constant>
    <constant name="Thai_hohip" value="3531">
      <type name="int"/>
    </constant>
    <constant name="Thai_honokhuk" value="3534">
      <type name="int"/>
    </constant>
    <constant name="Thai_khokhai" value="3490">
      <type name="int"/>
    </constant>
    <constant name="Thai_khokhon" value="3493">
      <type name="int"/>
    </constant>
    <constant name="Thai_khokhuat" value="3491">
      <type name="int"/>
    </constant>
    <constant name="Thai_khokhwai" value="3492">
      <type name="int"/>
    </constant>
    <constant name="Thai_khorakhang" value="3494">
      <type name="int"/>
    </constant>
    <constant name="Thai_kokai" value="3489">
      <type name="int"/>
    </constant>
    <constant name="Thai_lakkhangyao" value="3557">
      <type name="int"/>
    </constant>
    <constant name="Thai_lekchet" value="3575">
      <type name="int"/>
    </constant>
    <constant name="Thai_lekha" value="3573">
      <type name="int"/>
    </constant>
    <constant name="Thai_lekhok" value="3574">
      <type name="int"/>
    </constant>
    <constant name="Thai_lekkao" value="3577">
      <type name="int"/>
    </constant>
    <constant name="Thai_leknung" value="3569">
      <type name="int"/>
    </constant>
    <constant name="Thai_lekpaet" value="3576">
      <type name="int"/>
    </constant>
    <constant name="Thai_leksam" value="3571">
      <type name="int"/>
    </constant>
    <constant name="Thai_leksi" value="3572">
      <type name="int"/>
    </constant>
    <constant name="Thai_leksong" value="3570">
      <type name="int"/>
    </constant>
    <constant name="Thai_leksun" value="3568">
      <type name="int"/>
    </constant>
    <constant name="Thai_lochula" value="3532">
      <type name="int"/>
    </constant>
    <constant name="Thai_loling" value="3525">
      <type name="int"/>
    </constant>
    <constant name="Thai_lu" value="3526">
      <type name="int"/>
    </constant>
    <constant name="Thai_maichattawa" value="3563">
      <type name="int"/>
    </constant>
    <constant name="Thai_maiek" value="3560">
      <type name="int"/>
    </constant>
    <constant name="Thai_maihanakat" value="3537">
      <type name="int"/>
    </constant>
    <constant name="Thai_maihanakat_maitho" value="3550">
      <type name="int"/>
    </constant>
    <constant name="Thai_maitaikhu" value="3559">
      <type name="int"/>
    </constant>
    <constant name="Thai_maitho" value="3561">
      <type name="int"/>
    </constant>
    <constant name="Thai_maitri" value="3562">
      <type name="int"/>
    </constant>
    <constant name="Thai_maiyamok" value="3558">
      <type name="int"/>
    </constant>
    <constant name="Thai_moma" value="3521">
      <type name="int"/>
    </constant>
    <constant name="Thai_ngongu" value="3495">
      <type name="int"/>
    </constant>
    <constant name="Thai_nikhahit" value="3565">
      <type name="int"/>
    </constant>
    <constant name="Thai_nonen" value="3507">
      <type name="int"/>
    </constant>
    <constant name="Thai_nonu" value="3513">
      <type name="int"/>
    </constant>
    <constant name="Thai_oang" value="3533">
      <type name="int"/>
    </constant>
    <constant name="Thai_paiyannoi" value="3535">
      <type name="int"/>
    </constant>
    <constant name="Thai_phinthu" value="3546">
      <type name="int"/>
    </constant>
    <constant name="Thai_phophan" value="3518">
      <type name="int"/>
    </constant>
    <constant name="Thai_phophung" value="3516">
      <type name="int"/>
    </constant>
    <constant name="Thai_phosamphao" value="3520">
      <type name="int"/>
    </constant>
    <constant name="Thai_popla" value="3515">
      <type name="int"/>
    </constant>
    <constant name="Thai_rorua" value="3523">
      <type name="int"/>
    </constant>
    <constant name="Thai_ru" value="3524">
      <type name="int"/>
    </constant>
    <constant name="Thai_saraa" value="3536">
      <type name="int"/>
    </constant>
    <constant name="Thai_saraaa" value="3538">
      <type name="int"/>
    </constant>
    <constant name="Thai_saraae" value="3553">
      <type name="int"/>
    </constant>
    <constant name="Thai_saraaimaimalai" value="3556">
      <type name="int"/>
    </constant>
    <constant name="Thai_saraaimaimuan" value="3555">
      <type name="int"/>
    </constant>
    <constant name="Thai_saraam" value="3539">
      <type name="int"/>
    </constant>
    <constant name="Thai_sarae" value="3552">
      <type name="int"/>
    </constant>
    <constant name="Thai_sarai" value="3540">
      <type name="int"/>
    </constant>
    <constant name="Thai_saraii" value="3541">
      <type name="int"/>
    </constant>
    <constant name="Thai_sarao" value="3554">
      <type name="int"/>
    </constant>
    <constant name="Thai_sarau" value="3544">
      <type name="int"/>
    </constant>
    <constant name="Thai_saraue" value="3542">
      <type name="int"/>
    </constant>
    <constant name="Thai_sarauee" value="3543">
      <type name="int"/>
    </constant>
    <constant name="Thai_sarauu" value="3545">
      <type name="int"/>
    </constant>
    <constant name="Thai_sorusi" value="3529">
      <type name="int"/>
    </constant>
    <constant name="Thai_sosala" value="3528">
      <type name="int"/>
    </constant>
    <constant name="Thai_soso" value="3499">
      <type name="int"/>
    </constant>
    <constant name="Thai_sosua" value="3530">
      <type name="int"/>
    </constant>
    <constant name="Thai_thanthakhat" value="3564">
      <type name="int"/>
    </constant>
    <constant name="Thai_thonangmontho" value="3505">
      <type name="int"/>
    </constant>
    <constant name="Thai_thophuthao" value="3506">
      <type name="int"/>
    </constant>
    <constant name="Thai_thothahan" value="3511">
      <type name="int"/>
    </constant>
    <constant name="Thai_thothan" value="3504">
      <type name="int"/>
    </constant>
    <constant name="Thai_thothong" value="3512">
      <type name="int"/>
    </constant>
    <constant name="Thai_thothung" value="3510">
      <type name="int"/>
    </constant>
    <constant name="Thai_topatak" value="3503">
      <type name="int"/>
    </constant>
    <constant name="Thai_totao" value="3509">
      <type name="int"/>
    </constant>
    <constant name="Thai_wowaen" value="3527">
      <type name="int"/>
    </constant>
    <constant name="Thai_yoyak" value="3522">
      <type name="int"/>
    </constant>
    <constant name="Thai_yoying" value="3501">
      <type name="int"/>
    </constant>
    <constant name="Thorn" value="222">
      <type name="int"/>
    </constant>
    <constant name="Touroku" value="65323">
      <type name="int"/>
    </constant>
    <constant name="Tslash" value="940">
      <type name="int"/>
    </constant>
    <constant name="U" value="85">
      <type name="int"/>
    </constant>
    <constant name="Uacute" value="218">
      <type name="int"/>
    </constant>
    <constant name="Ubelowdot" value="16785124">
      <type name="int"/>
    </constant>
    <constant name="Ubreve" value="733">
      <type name="int"/>
    </constant>
    <constant name="Ucircumflex" value="219">
      <type name="int"/>
    </constant>
    <constant name="Udiaeresis" value="220">
      <type name="int"/>
    </constant>
    <constant name="Udoubleacute" value="475">
      <type name="int"/>
    </constant>
    <constant name="Ugrave" value="217">
      <type name="int"/>
    </constant>
    <constant name="Uhook" value="16785126">
      <type name="int"/>
    </constant>
    <constant name="Uhorn" value="16777647">
      <type name="int"/>
    </constant>
    <constant name="Uhornacute" value="16785128">
      <type name="int"/>
    </constant>
    <constant name="Uhornbelowdot" value="16785136">
      <type name="int"/>
    </constant>
    <constant name="Uhorngrave" value="16785130">
      <type name="int"/>
    </constant>
    <constant name="Uhornhook" value="16785132">
      <type name="int"/>
    </constant>
    <constant name="Uhorntilde" value="16785134">
      <type name="int"/>
    </constant>
    <constant name="Ukrainian_GHE_WITH_UPTURN" value="1725">
      <type name="int"/>
    </constant>
    <constant name="Ukrainian_I" value="1718">
      <type name="int"/>
    </constant>
    <constant name="Ukrainian_IE" value="1716">
      <type name="int"/>
    </constant>
    <constant name="Ukrainian_YI" value="1719">
      <type name="int"/>
    </constant>
    <constant name="Ukrainian_ghe_with_upturn" value="1709">
      <type name="int"/>
    </constant>
    <constant name="Ukrainian_i" value="1702">
      <type name="int"/>
    </constant>
    <constant name="Ukrainian_ie" value="1700">
      <type name="int"/>
    </constant>
    <constant name="Ukrainian_yi" value="1703">
      <type name="int"/>
    </constant>
    <constant name="Ukranian_I" value="1718">
      <type name="int"/>
    </constant>
    <constant name="Ukranian_JE" value="1716">
      <type name="int"/>
    </constant>
    <constant name="Ukranian_YI" value="1719">
      <type name="int"/>
    </constant>
    <constant name="Ukranian_i" value="1702">
      <type name="int"/>
    </constant>
    <constant name="Ukranian_je" value="1700">
      <type name="int"/>
    </constant>
    <constant name="Ukranian_yi" value="1703">
      <type name="int"/>
    </constant>
    <constant name="Umacron" value="990">
      <type name="int"/>
    </constant>
    <constant name="Undo" value="65381">
      <type name="int"/>
    </constant>
    <constant name="Uogonek" value="985">
      <type name="int"/>
    </constant>
    <constant name="Up" value="65362">
      <type name="int"/>
    </constant>
    <constant name="Uring" value="473">
      <type name="int"/>
    </constant>
    <constant name="Utilde" value="989">
      <type name="int"/>
    </constant>
    <constant name="V" value="86">
      <type name="int"/>
    </constant>
    <constant name="VoidSymbol" value="16777215">
      <type name="int"/>
    </constant>
    <constant name="W" value="87">
      <type name="int"/>
    </constant>
    <constant name="Wacute" value="16785026">
      <type name="int"/>
    </constant>
    <constant name="Wcircumflex" value="16777588">
      <type name="int"/>
    </constant>
    <constant name="Wdiaeresis" value="16785028">
      <type name="int"/>
    </constant>
    <constant name="Wgrave" value="16785024">
      <type name="int"/>
    </constant>
    <constant name="WonSign" value="16785577">
      <type name="int"/>
    </constant>
    <constant name="X" value="88">
      <type name="int"/>
    </constant>
    <record name="XMLNode" c:type="XMLNode">
      <doc xml:whitespace="preserve">A data type representing an XML nod.</doc>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="text" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="attributes" writable="1">
        <type name="utf8" c:type="gchar**"/>
      </field>
      <field name="sub_nodes" writable="1">
        <type name="GLib.List" c:type="GList*">
          <type name="any" c:type="gpointer"/>
        </type>
      </field>
    </record>
    <constant name="Xabovedot" value="16785034">
      <type name="int"/>
    </constant>
    <constant name="Y" value="89">
      <type name="int"/>
    </constant>
    <constant name="Yacute" value="221">
      <type name="int"/>
    </constant>
    <constant name="Ybelowdot" value="16785140">
      <type name="int"/>
    </constant>
    <constant name="Ycircumflex" value="16777590">
      <type name="int"/>
    </constant>
    <constant name="Ydiaeresis" value="5054">
      <type name="int"/>
    </constant>
    <constant name="Ygrave" value="16785138">
      <type name="int"/>
    </constant>
    <constant name="Yhook" value="16785142">
      <type name="int"/>
    </constant>
    <constant name="Ytilde" value="16785144">
      <type name="int"/>
    </constant>
    <constant name="Z" value="90">
      <type name="int"/>
    </constant>
    <constant name="Zabovedot" value="431">
      <type name="int"/>
    </constant>
    <constant name="Zacute" value="428">
      <type name="int"/>
    </constant>
    <constant name="Zcaron" value="430">
      <type name="int"/>
    </constant>
    <constant name="Zen_Koho" value="65341">
      <type name="int"/>
    </constant>
    <constant name="Zenkaku" value="65320">
      <type name="int"/>
    </constant>
    <constant name="Zenkaku_Hankaku" value="65322">
      <type name="int"/>
    </constant>
    <constant name="Zstroke" value="16777653">
      <type name="int"/>
    </constant>
    <constant name="a" value="97">
      <type name="int"/>
    </constant>
    <constant name="aacute" value="225">
      <type name="int"/>
    </constant>
    <constant name="abelowdot" value="16785057">
      <type name="int"/>
    </constant>
    <constant name="abovedot" value="511">
      <type name="int"/>
    </constant>
    <constant name="abreve" value="483">
      <type name="int"/>
    </constant>
    <constant name="abreveacute" value="16785071">
      <type name="int"/>
    </constant>
    <constant name="abrevebelowdot" value="16785079">
      <type name="int"/>
    </constant>
    <constant name="abrevegrave" value="16785073">
      <type name="int"/>
    </constant>
    <constant name="abrevehook" value="16785075">
      <type name="int"/>
    </constant>
    <constant name="abrevetilde" value="16785077">
      <type name="int"/>
    </constant>
    <constant name="acircumflex" value="226">
      <type name="int"/>
    </constant>
    <constant name="acircumflexacute" value="16785061">
      <type name="int"/>
    </constant>
    <constant name="acircumflexbelowdot" value="16785069">
      <type name="int"/>
    </constant>
    <constant name="acircumflexgrave" value="16785063">
      <type name="int"/>
    </constant>
    <constant name="acircumflexhook" value="16785065">
      <type name="int"/>
    </constant>
    <constant name="acircumflextilde" value="16785067">
      <type name="int"/>
    </constant>
    <constant name="acute" value="180">
      <type name="int"/>
    </constant>
    <constant name="adiaeresis" value="228">
      <type name="int"/>
    </constant>
    <constant name="ae" value="230">
      <type name="int"/>
    </constant>
    <constant name="agrave" value="224">
      <type name="int"/>
    </constant>
    <constant name="ahook" value="16785059">
      <type name="int"/>
    </constant>
    <constant name="amacron" value="992">
      <type name="int"/>
    </constant>
    <constant name="ampersand" value="38">
      <type name="int"/>
    </constant>
    <constant name="aogonek" value="433">
      <type name="int"/>
    </constant>
    <constant name="apostrophe" value="39">
      <type name="int"/>
    </constant>
    <constant name="approxeq" value="16785992">
      <type name="int"/>
    </constant>
    <constant name="approximate" value="2248">
      <type name="int"/>
    </constant>
    <constant name="aring" value="229">
      <type name="int"/>
    </constant>
    <constant name="asciicircum" value="94">
      <type name="int"/>
    </constant>
    <constant name="asciitilde" value="126">
      <type name="int"/>
    </constant>
    <constant name="asterisk" value="42">
      <type name="int"/>
    </constant>
    <constant name="at" value="64">
      <type name="int"/>
    </constant>
    <constant name="atilde" value="227">
      <type name="int"/>
    </constant>
    <function name="attr_background_new"
              c:identifier="ibus_attr_background_new">
      <doc xml:whitespace="preserve">New an background IBusAttribute.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">A newly allocated IBusAttribute.</doc>
        <type name="Attribute" c:type="IBusAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">Color in RGB.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="start_index" transfer-ownership="none">
          <doc xml:whitespace="preserve">Where attribute starts.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="end_index" transfer-ownership="none">
          <doc xml:whitespace="preserve">Where attribute ends.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_foreground_new"
              c:identifier="ibus_attr_foreground_new">
      <doc xml:whitespace="preserve">New an foreground IBusAttribute.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">A newly allocated IBusAttribute.</doc>
        <type name="Attribute" c:type="IBusAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">Color in RGB.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="start_index" transfer-ownership="none">
          <doc xml:whitespace="preserve">Where attribute starts.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="end_index" transfer-ownership="none">
          <doc xml:whitespace="preserve">Where attribute ends.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_underline_new" c:identifier="ibus_attr_underline_new">
      <doc xml:whitespace="preserve">New an underline IBusAttribute.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">A newly allocated IBusAttribute.</doc>
        <type name="Attribute" c:type="IBusAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="underline_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">Type of underline.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="start_index" transfer-ownership="none">
          <doc xml:whitespace="preserve">Where attribute starts.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="end_index" transfer-ownership="none">
          <doc xml:whitespace="preserve">Where attribute ends.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <constant name="b" value="98">
      <type name="int"/>
    </constant>
    <constant name="babovedot" value="16784899">
      <type name="int"/>
    </constant>
    <constant name="backslash" value="92">
      <type name="int"/>
    </constant>
    <constant name="ballotcross" value="2804">
      <type name="int"/>
    </constant>
    <constant name="bar" value="124">
      <type name="int"/>
    </constant>
    <constant name="because" value="16785973">
      <type name="int"/>
    </constant>
    <constant name="blank" value="2527">
      <type name="int"/>
    </constant>
    <constant name="botintegral" value="2213">
      <type name="int"/>
    </constant>
    <constant name="botleftparens" value="2220">
      <type name="int"/>
    </constant>
    <constant name="botleftsqbracket" value="2216">
      <type name="int"/>
    </constant>
    <constant name="botleftsummation" value="2226">
      <type name="int"/>
    </constant>
    <constant name="botrightparens" value="2222">
      <type name="int"/>
    </constant>
    <constant name="botrightsqbracket" value="2218">
      <type name="int"/>
    </constant>
    <constant name="botrightsummation" value="2230">
      <type name="int"/>
    </constant>
    <constant name="bott" value="2550">
      <type name="int"/>
    </constant>
    <constant name="botvertsummationconnector" value="2228">
      <type name="int"/>
    </constant>
    <constant name="braceleft" value="123">
      <type name="int"/>
    </constant>
    <constant name="braceright" value="125">
      <type name="int"/>
    </constant>
    <constant name="bracketleft" value="91">
      <type name="int"/>
    </constant>
    <constant name="bracketright" value="93">
      <type name="int"/>
    </constant>
    <constant name="braille_blank" value="16787456">
      <type name="int"/>
    </constant>
    <constant name="braille_dot_1" value="65521">
      <type name="int"/>
    </constant>
    <constant name="braille_dot_10" value="65530">
      <type name="int"/>
    </constant>
    <constant name="braille_dot_2" value="65522">
      <type name="int"/>
    </constant>
    <constant name="braille_dot_3" value="65523">
      <type name="int"/>
    </constant>
    <constant name="braille_dot_4" value="65524">
      <type name="int"/>
    </constant>
    <constant name="braille_dot_5" value="65525">
      <type name="int"/>
    </constant>
    <constant name="braille_dot_6" value="65526">
      <type name="int"/>
    </constant>
    <constant name="braille_dot_7" value="65527">
      <type name="int"/>
    </constant>
    <constant name="braille_dot_8" value="65528">
      <type name="int"/>
    </constant>
    <constant name="braille_dot_9" value="65529">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1" value="16787457">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12" value="16787459">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_123" value="16787463">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1234" value="16787471">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12345" value="16787487">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_123456" value="16787519">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1234567" value="16787583">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12345678" value="16787711">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1234568" value="16787647">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_123457" value="16787551">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1234578" value="16787679">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_123458" value="16787615">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12346" value="16787503">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_123467" value="16787567">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1234678" value="16787695">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_123468" value="16787631">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12347" value="16787535">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_123478" value="16787663">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12348" value="16787599">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1235" value="16787479">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12356" value="16787511">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_123567" value="16787575">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1235678" value="16787703">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_123568" value="16787639">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12357" value="16787543">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_123578" value="16787671">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12358" value="16787607">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1236" value="16787495">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12367" value="16787559">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_123678" value="16787687">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12368" value="16787623">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1237" value="16787527">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12378" value="16787655">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1238" value="16787591">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_124" value="16787467">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1245" value="16787483">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12456" value="16787515">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_124567" value="16787579">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1245678" value="16787707">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_124568" value="16787643">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12457" value="16787547">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_124578" value="16787675">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12458" value="16787611">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1246" value="16787499">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12467" value="16787563">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_124678" value="16787691">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12468" value="16787627">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1247" value="16787531">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12478" value="16787659">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1248" value="16787595">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_125" value="16787475">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1256" value="16787507">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12567" value="16787571">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_125678" value="16787699">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12568" value="16787635">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1257" value="16787539">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12578" value="16787667">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1258" value="16787603">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_126" value="16787491">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1267" value="16787555">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_12678" value="16787683">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1268" value="16787619">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_127" value="16787523">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1278" value="16787651">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_128" value="16787587">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_13" value="16787461">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_134" value="16787469">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1345" value="16787485">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_13456" value="16787517">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_134567" value="16787581">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1345678" value="16787709">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_134568" value="16787645">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_13457" value="16787549">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_134578" value="16787677">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_13458" value="16787613">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1346" value="16787501">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_13467" value="16787565">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_134678" value="16787693">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_13468" value="16787629">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1347" value="16787533">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_13478" value="16787661">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1348" value="16787597">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_135" value="16787477">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1356" value="16787509">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_13567" value="16787573">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_135678" value="16787701">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_13568" value="16787637">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1357" value="16787541">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_13578" value="16787669">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1358" value="16787605">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_136" value="16787493">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1367" value="16787557">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_13678" value="16787685">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1368" value="16787621">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_137" value="16787525">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1378" value="16787653">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_138" value="16787589">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_14" value="16787465">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_145" value="16787481">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1456" value="16787513">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_14567" value="16787577">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_145678" value="16787705">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_14568" value="16787641">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1457" value="16787545">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_14578" value="16787673">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1458" value="16787609">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_146" value="16787497">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1467" value="16787561">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_14678" value="16787689">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1468" value="16787625">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_147" value="16787529">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1478" value="16787657">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_148" value="16787593">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_15" value="16787473">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_156" value="16787505">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1567" value="16787569">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_15678" value="16787697">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1568" value="16787633">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_157" value="16787537">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1578" value="16787665">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_158" value="16787601">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_16" value="16787489">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_167" value="16787553">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_1678" value="16787681">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_168" value="16787617">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_17" value="16787521">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_178" value="16787649">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_18" value="16787585">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2" value="16787458">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_23" value="16787462">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_234" value="16787470">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2345" value="16787486">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_23456" value="16787518">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_234567" value="16787582">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2345678" value="16787710">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_234568" value="16787646">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_23457" value="16787550">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_234578" value="16787678">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_23458" value="16787614">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2346" value="16787502">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_23467" value="16787566">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_234678" value="16787694">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_23468" value="16787630">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2347" value="16787534">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_23478" value="16787662">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2348" value="16787598">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_235" value="16787478">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2356" value="16787510">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_23567" value="16787574">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_235678" value="16787702">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_23568" value="16787638">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2357" value="16787542">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_23578" value="16787670">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2358" value="16787606">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_236" value="16787494">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2367" value="16787558">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_23678" value="16787686">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2368" value="16787622">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_237" value="16787526">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2378" value="16787654">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_238" value="16787590">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_24" value="16787466">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_245" value="16787482">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2456" value="16787514">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_24567" value="16787578">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_245678" value="16787706">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_24568" value="16787642">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2457" value="16787546">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_24578" value="16787674">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2458" value="16787610">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_246" value="16787498">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2467" value="16787562">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_24678" value="16787690">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2468" value="16787626">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_247" value="16787530">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2478" value="16787658">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_248" value="16787594">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_25" value="16787474">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_256" value="16787506">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2567" value="16787570">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_25678" value="16787698">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2568" value="16787634">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_257" value="16787538">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2578" value="16787666">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_258" value="16787602">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_26" value="16787490">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_267" value="16787554">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_2678" value="16787682">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_268" value="16787618">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_27" value="16787522">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_278" value="16787650">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_28" value="16787586">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_3" value="16787460">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_34" value="16787468">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_345" value="16787484">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_3456" value="16787516">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_34567" value="16787580">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_345678" value="16787708">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_34568" value="16787644">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_3457" value="16787548">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_34578" value="16787676">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_3458" value="16787612">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_346" value="16787500">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_3467" value="16787564">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_34678" value="16787692">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_3468" value="16787628">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_347" value="16787532">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_3478" value="16787660">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_348" value="16787596">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_35" value="16787476">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_356" value="16787508">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_3567" value="16787572">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_35678" value="16787700">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_3568" value="16787636">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_357" value="16787540">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_3578" value="16787668">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_358" value="16787604">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_36" value="16787492">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_367" value="16787556">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_3678" value="16787684">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_368" value="16787620">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_37" value="16787524">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_378" value="16787652">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_38" value="16787588">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_4" value="16787464">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_45" value="16787480">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_456" value="16787512">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_4567" value="16787576">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_45678" value="16787704">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_4568" value="16787640">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_457" value="16787544">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_4578" value="16787672">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_458" value="16787608">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_46" value="16787496">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_467" value="16787560">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_4678" value="16787688">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_468" value="16787624">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_47" value="16787528">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_478" value="16787656">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_48" value="16787592">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_5" value="16787472">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_56" value="16787504">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_567" value="16787568">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_5678" value="16787696">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_568" value="16787632">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_57" value="16787536">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_578" value="16787664">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_58" value="16787600">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_6" value="16787488">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_67" value="16787552">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_678" value="16787680">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_68" value="16787616">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_7" value="16787520">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_78" value="16787648">
      <type name="int"/>
    </constant>
    <constant name="braille_dots_8" value="16787584">
      <type name="int"/>
    </constant>
    <constant name="breve" value="418">
      <type name="int"/>
    </constant>
    <constant name="brokenbar" value="166">
      <type name="int"/>
    </constant>
    <constant name="c" value="99">
      <type name="int"/>
    </constant>
    <constant name="cabovedot" value="741">
      <type name="int"/>
    </constant>
    <constant name="cacute" value="486">
      <type name="int"/>
    </constant>
    <constant name="careof" value="2744">
      <type name="int"/>
    </constant>
    <constant name="caret" value="2812">
      <type name="int"/>
    </constant>
    <constant name="caron" value="439">
      <type name="int"/>
    </constant>
    <constant name="ccaron" value="488">
      <type name="int"/>
    </constant>
    <constant name="ccedilla" value="231">
      <type name="int"/>
    </constant>
    <constant name="ccircumflex" value="742">
      <type name="int"/>
    </constant>
    <constant name="cedilla" value="184">
      <type name="int"/>
    </constant>
    <constant name="cent" value="162">
      <type name="int"/>
    </constant>
    <constant name="checkerboard" value="2529">
      <type name="int"/>
    </constant>
    <constant name="checkmark" value="2803">
      <type name="int"/>
    </constant>
    <constant name="circle" value="3023">
      <type name="int"/>
    </constant>
    <constant name="club" value="2796">
      <type name="int"/>
    </constant>
    <constant name="colon" value="58">
      <type name="int"/>
    </constant>
    <constant name="comma" value="44">
      <type name="int"/>
    </constant>
    <constant name="containsas" value="16785931">
      <type name="int"/>
    </constant>
    <constant name="copyright" value="169">
      <type name="int"/>
    </constant>
    <constant name="cr" value="2532">
      <type name="int"/>
    </constant>
    <constant name="crossinglines" value="2542">
      <type name="int"/>
    </constant>
    <constant name="cuberoot" value="16785947">
      <type name="int"/>
    </constant>
    <constant name="currency" value="164">
      <type name="int"/>
    </constant>
    <constant name="cursor" value="2815">
      <type name="int"/>
    </constant>
    <constant name="d" value="100">
      <type name="int"/>
    </constant>
    <constant name="dabovedot" value="16784907">
      <type name="int"/>
    </constant>
    <constant name="dagger" value="2801">
      <type name="int"/>
    </constant>
    <function name="dbus_connection_setup"
              c:identifier="ibus_dbus_connection_setup">
      <doc xml:whitespace="preserve">Sets the watch and timeout functions of a #DBusConnection
to integrate the connection with the GLib main loop.
This function uses the parameter @user_data and
connection_func set with ibus_mainloop_setup(),
or fall back to NULL and dbus_connection_setup() if those are not defined.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:whitespace="preserve">A DBusConnection.</doc>
          <type name="DBusConnection" c:type="DBusConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_server_setup" c:identifier="ibus_dbus_server_setup">
      <doc xml:whitespace="preserve">Sets the watch and timeout functions of a #DBusServer
to integrate the server with the GLib main loop.
This function uses the parameter @user_data and
server_func set with ibus_mainloop_setup(),
or fall back to NULL and dbus_server_setup() if those are not defined.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="server" transfer-ownership="none">
          <doc xml:whitespace="preserve">A DBusServer.</doc>
          <type name="DBusServer" c:type="DBusServer*"/>
        </parameter>
      </parameters>
    </function>
    <constant name="dcaron" value="495">
      <type name="int"/>
    </constant>
    <constant name="dead_abovecomma" value="65124">
      <type name="int"/>
    </constant>
    <constant name="dead_abovedot" value="65110">
      <type name="int"/>
    </constant>
    <constant name="dead_abovereversedcomma" value="65125">
      <type name="int"/>
    </constant>
    <constant name="dead_abovering" value="65112">
      <type name="int"/>
    </constant>
    <constant name="dead_acute" value="65105">
      <type name="int"/>
    </constant>
    <constant name="dead_belowbreve" value="65131">
      <type name="int"/>
    </constant>
    <constant name="dead_belowcircumflex" value="65129">
      <type name="int"/>
    </constant>
    <constant name="dead_belowdiaeresis" value="65132">
      <type name="int"/>
    </constant>
    <constant name="dead_belowdot" value="65120">
      <type name="int"/>
    </constant>
    <constant name="dead_belowmacron" value="65128">
      <type name="int"/>
    </constant>
    <constant name="dead_belowring" value="65127">
      <type name="int"/>
    </constant>
    <constant name="dead_belowtilde" value="65130">
      <type name="int"/>
    </constant>
    <constant name="dead_breve" value="65109">
      <type name="int"/>
    </constant>
    <constant name="dead_caron" value="65114">
      <type name="int"/>
    </constant>
    <constant name="dead_cedilla" value="65115">
      <type name="int"/>
    </constant>
    <constant name="dead_circumflex" value="65106">
      <type name="int"/>
    </constant>
    <constant name="dead_dasia" value="65125">
      <type name="int"/>
    </constant>
    <constant name="dead_diaeresis" value="65111">
      <type name="int"/>
    </constant>
    <constant name="dead_doubleacute" value="65113">
      <type name="int"/>
    </constant>
    <constant name="dead_grave" value="65104">
      <type name="int"/>
    </constant>
    <constant name="dead_hook" value="65121">
      <type name="int"/>
    </constant>
    <constant name="dead_horn" value="65122">
      <type name="int"/>
    </constant>
    <constant name="dead_iota" value="65117">
      <type name="int"/>
    </constant>
    <constant name="dead_macron" value="65108">
      <type name="int"/>
    </constant>
    <constant name="dead_ogonek" value="65116">
      <type name="int"/>
    </constant>
    <constant name="dead_perispomeni" value="65107">
      <type name="int"/>
    </constant>
    <constant name="dead_psili" value="65124">
      <type name="int"/>
    </constant>
    <constant name="dead_semivoiced_sound" value="65119">
      <type name="int"/>
    </constant>
    <constant name="dead_stroke" value="65123">
      <type name="int"/>
    </constant>
    <constant name="dead_tilde" value="65107">
      <type name="int"/>
    </constant>
    <constant name="dead_voiced_sound" value="65118">
      <type name="int"/>
    </constant>
    <constant name="decimalpoint" value="2749">
      <type name="int"/>
    </constant>
    <constant name="degree" value="176">
      <type name="int"/>
    </constant>
    <constant name="diaeresis" value="168">
      <type name="int"/>
    </constant>
    <constant name="diamond" value="2797">
      <type name="int"/>
    </constant>
    <constant name="digitspace" value="2725">
      <type name="int"/>
    </constant>
    <constant name="dintegral" value="16785964">
      <type name="int"/>
    </constant>
    <constant name="division" value="247">
      <type name="int"/>
    </constant>
    <constant name="dollar" value="36">
      <type name="int"/>
    </constant>
    <constant name="doubbaselinedot" value="2735">
      <type name="int"/>
    </constant>
    <constant name="doubleacute" value="445">
      <type name="int"/>
    </constant>
    <constant name="doubledagger" value="2802">
      <type name="int"/>
    </constant>
    <constant name="doublelowquotemark" value="2814">
      <type name="int"/>
    </constant>
    <constant name="downarrow" value="2302">
      <type name="int"/>
    </constant>
    <constant name="downcaret" value="2984">
      <type name="int"/>
    </constant>
    <constant name="downshoe" value="3030">
      <type name="int"/>
    </constant>
    <constant name="downstile" value="3012">
      <type name="int"/>
    </constant>
    <constant name="downtack" value="3010">
      <type name="int"/>
    </constant>
    <constant name="dstroke" value="496">
      <type name="int"/>
    </constant>
    <constant name="e" value="101">
      <type name="int"/>
    </constant>
    <constant name="eabovedot" value="1004">
      <type name="int"/>
    </constant>
    <constant name="eacute" value="233">
      <type name="int"/>
    </constant>
    <constant name="ebelowdot" value="16785081">
      <type name="int"/>
    </constant>
    <constant name="ecaron" value="492">
      <type name="int"/>
    </constant>
    <constant name="ecircumflex" value="234">
      <type name="int"/>
    </constant>
    <constant name="ecircumflexacute" value="16785087">
      <type name="int"/>
    </constant>
    <constant name="ecircumflexbelowdot" value="16785095">
      <type name="int"/>
    </constant>
    <constant name="ecircumflexgrave" value="16785089">
      <type name="int"/>
    </constant>
    <constant name="ecircumflexhook" value="16785091">
      <type name="int"/>
    </constant>
    <constant name="ecircumflextilde" value="16785093">
      <type name="int"/>
    </constant>
    <constant name="ediaeresis" value="235">
      <type name="int"/>
    </constant>
    <constant name="egrave" value="232">
      <type name="int"/>
    </constant>
    <constant name="ehook" value="16785083">
      <type name="int"/>
    </constant>
    <constant name="eightsubscript" value="16785544">
      <type name="int"/>
    </constant>
    <constant name="eightsuperior" value="16785528">
      <type name="int"/>
    </constant>
    <constant name="elementof" value="16785928">
      <type name="int"/>
    </constant>
    <constant name="ellipsis" value="2734">
      <type name="int"/>
    </constant>
    <constant name="em3space" value="2723">
      <type name="int"/>
    </constant>
    <constant name="em4space" value="2724">
      <type name="int"/>
    </constant>
    <constant name="emacron" value="954">
      <type name="int"/>
    </constant>
    <constant name="emdash" value="2729">
      <type name="int"/>
    </constant>
    <constant name="emfilledcircle" value="2782">
      <type name="int"/>
    </constant>
    <constant name="emfilledrect" value="2783">
      <type name="int"/>
    </constant>
    <constant name="emopencircle" value="2766">
      <type name="int"/>
    </constant>
    <constant name="emopenrectangle" value="2767">
      <type name="int"/>
    </constant>
    <constant name="emptyset" value="16785925">
      <type name="int"/>
    </constant>
    <constant name="emspace" value="2721">
      <type name="int"/>
    </constant>
    <constant name="endash" value="2730">
      <type name="int"/>
    </constant>
    <constant name="enfilledcircbullet" value="2790">
      <type name="int"/>
    </constant>
    <constant name="enfilledsqbullet" value="2791">
      <type name="int"/>
    </constant>
    <constant name="eng" value="959">
      <type name="int"/>
    </constant>
    <constant name="enopencircbullet" value="2784">
      <type name="int"/>
    </constant>
    <constant name="enopensquarebullet" value="2785">
      <type name="int"/>
    </constant>
    <constant name="enspace" value="2722">
      <type name="int"/>
    </constant>
    <constant name="eogonek" value="490">
      <type name="int"/>
    </constant>
    <constant name="equal" value="61">
      <type name="int"/>
    </constant>
    <constant name="eth" value="240">
      <type name="int"/>
    </constant>
    <constant name="etilde" value="16785085">
      <type name="int"/>
    </constant>
    <constant name="exclam" value="33">
      <type name="int"/>
    </constant>
    <constant name="exclamdown" value="161">
      <type name="int"/>
    </constant>
    <constant name="f" value="102">
      <type name="int"/>
    </constant>
    <constant name="fabovedot" value="16784927">
      <type name="int"/>
    </constant>
    <constant name="femalesymbol" value="2808">
      <type name="int"/>
    </constant>
    <constant name="ff" value="2531">
      <type name="int"/>
    </constant>
    <constant name="figdash" value="2747">
      <type name="int"/>
    </constant>
    <constant name="filledlefttribullet" value="2780">
      <type name="int"/>
    </constant>
    <constant name="filledrectbullet" value="2779">
      <type name="int"/>
    </constant>
    <constant name="filledrighttribullet" value="2781">
      <type name="int"/>
    </constant>
    <constant name="filledtribulletdown" value="2793">
      <type name="int"/>
    </constant>
    <constant name="filledtribulletup" value="2792">
      <type name="int"/>
    </constant>
    <constant name="fiveeighths" value="2757">
      <type name="int"/>
    </constant>
    <constant name="fivesixths" value="2743">
      <type name="int"/>
    </constant>
    <constant name="fivesubscript" value="16785541">
      <type name="int"/>
    </constant>
    <constant name="fivesuperior" value="16785525">
      <type name="int"/>
    </constant>
    <constant name="fourfifths" value="2741">
      <type name="int"/>
    </constant>
    <constant name="foursubscript" value="16785540">
      <type name="int"/>
    </constant>
    <constant name="foursuperior" value="16785524">
      <type name="int"/>
    </constant>
    <constant name="fourthroot" value="16785948">
      <type name="int"/>
    </constant>
    <function name="free_strv"
              c:identifier="ibus_free_strv"
              deprecated="This function has been deprecated and should">
      <doc xml:whitespace="preserve">Free a list of strings.
not be used in newly written code.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="strv" transfer-ownership="none">
          <doc xml:whitespace="preserve">List of strings.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <constant name="function" value="2294">
      <type name="int"/>
    </constant>
    <constant name="g" value="103">
      <type name="int"/>
    </constant>
    <constant name="gabovedot" value="757">
      <type name="int"/>
    </constant>
    <constant name="gbreve" value="699">
      <type name="int"/>
    </constant>
    <constant name="gcaron" value="16777703">
      <type name="int"/>
    </constant>
    <constant name="gcedilla" value="955">
      <type name="int"/>
    </constant>
    <constant name="gcircumflex" value="760">
      <type name="int"/>
    </constant>
    <function name="get_address" c:identifier="ibus_get_address">
      <doc xml:whitespace="preserve">Return the D-Bus address of IBus.
It will find the address from following source:
&lt;orderedlist&gt;
&lt;listitem&gt;&lt;para&gt;Environment variable IBUS_ADDRESS&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Socket file under ~/.config/ibus/bus/&lt;/para&gt;&lt;/listitem&gt;
&lt;/orderedlist&gt;</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">D-Bus address of IBus. %NULL for not found.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="get_daemon_uid"
              c:identifier="ibus_get_daemon_uid"
              deprecated="This function has been deprecated and should">
      <doc xml:whitespace="preserve">Get UID of ibus-daemon.
not be used in newly written code.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">UID of ibus-daemon; or 0 if UID is not available.</doc>
        <type name="long" c:type="glong"/>
      </return-value>
    </function>
    <function name="get_local_machine_id"
              c:identifier="ibus_get_local_machine_id">
      <doc xml:whitespace="preserve">Obtains the machine UUID of the machine this process is running on.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A newly allocated string that shows the UUID of the machine.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="get_socket_path" c:identifier="ibus_get_socket_path">
      <doc xml:whitespace="preserve">Get the path of socket file.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A newly allocated string that stores the path of socket file.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="get_user_name" c:identifier="ibus_get_user_name">
      <doc xml:whitespace="preserve">Get the current user name.
It is determined by:
&lt;orderedlist&gt;
&lt;listitem&gt;&lt;para&gt;getlogin()&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Environment variable SUDO_USER&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Environment variable USERHELPER_UID&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Environment variable USERNAME&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Environment variable LOGNAME&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Environment variable USER&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Environment variable LNAME&lt;/para&gt;&lt;/listitem&gt;
&lt;/orderedlist&gt;</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A newly allocated string that stores current user name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <constant name="grave" value="96">
      <type name="int"/>
    </constant>
    <constant name="greater" value="62">
      <type name="int"/>
    </constant>
    <constant name="greaterthanequal" value="2238">
      <type name="int"/>
    </constant>
    <constant name="guillemotleft" value="171">
      <type name="int"/>
    </constant>
    <constant name="guillemotright" value="187">
      <type name="int"/>
    </constant>
    <constant name="h" value="104">
      <type name="int"/>
    </constant>
    <constant name="hairspace" value="2728">
      <type name="int"/>
    </constant>
    <constant name="hcircumflex" value="694">
      <type name="int"/>
    </constant>
    <constant name="heart" value="2798">
      <type name="int"/>
    </constant>
    <constant name="hebrew_aleph" value="3296">
      <type name="int"/>
    </constant>
    <constant name="hebrew_ayin" value="3314">
      <type name="int"/>
    </constant>
    <constant name="hebrew_bet" value="3297">
      <type name="int"/>
    </constant>
    <constant name="hebrew_beth" value="3297">
      <type name="int"/>
    </constant>
    <constant name="hebrew_chet" value="3303">
      <type name="int"/>
    </constant>
    <constant name="hebrew_dalet" value="3299">
      <type name="int"/>
    </constant>
    <constant name="hebrew_daleth" value="3299">
      <type name="int"/>
    </constant>
    <constant name="hebrew_doublelowline" value="3295">
      <type name="int"/>
    </constant>
    <constant name="hebrew_finalkaph" value="3306">
      <type name="int"/>
    </constant>
    <constant name="hebrew_finalmem" value="3309">
      <type name="int"/>
    </constant>
    <constant name="hebrew_finalnun" value="3311">
      <type name="int"/>
    </constant>
    <constant name="hebrew_finalpe" value="3315">
      <type name="int"/>
    </constant>
    <constant name="hebrew_finalzade" value="3317">
      <type name="int"/>
    </constant>
    <constant name="hebrew_finalzadi" value="3317">
      <type name="int"/>
    </constant>
    <constant name="hebrew_gimel" value="3298">
      <type name="int"/>
    </constant>
    <constant name="hebrew_gimmel" value="3298">
      <type name="int"/>
    </constant>
    <constant name="hebrew_he" value="3300">
      <type name="int"/>
    </constant>
    <constant name="hebrew_het" value="3303">
      <type name="int"/>
    </constant>
    <constant name="hebrew_kaph" value="3307">
      <type name="int"/>
    </constant>
    <constant name="hebrew_kuf" value="3319">
      <type name="int"/>
    </constant>
    <constant name="hebrew_lamed" value="3308">
      <type name="int"/>
    </constant>
    <constant name="hebrew_mem" value="3310">
      <type name="int"/>
    </constant>
    <constant name="hebrew_nun" value="3312">
      <type name="int"/>
    </constant>
    <constant name="hebrew_pe" value="3316">
      <type name="int"/>
    </constant>
    <constant name="hebrew_qoph" value="3319">
      <type name="int"/>
    </constant>
    <constant name="hebrew_resh" value="3320">
      <type name="int"/>
    </constant>
    <constant name="hebrew_samech" value="3313">
      <type name="int"/>
    </constant>
    <constant name="hebrew_samekh" value="3313">
      <type name="int"/>
    </constant>
    <constant name="hebrew_shin" value="3321">
      <type name="int"/>
    </constant>
    <constant name="hebrew_taf" value="3322">
      <type name="int"/>
    </constant>
    <constant name="hebrew_taw" value="3322">
      <type name="int"/>
    </constant>
    <constant name="hebrew_tet" value="3304">
      <type name="int"/>
    </constant>
    <constant name="hebrew_teth" value="3304">
      <type name="int"/>
    </constant>
    <constant name="hebrew_waw" value="3301">
      <type name="int"/>
    </constant>
    <constant name="hebrew_yod" value="3305">
      <type name="int"/>
    </constant>
    <constant name="hebrew_zade" value="3318">
      <type name="int"/>
    </constant>
    <constant name="hebrew_zadi" value="3318">
      <type name="int"/>
    </constant>
    <constant name="hebrew_zain" value="3302">
      <type name="int"/>
    </constant>
    <constant name="hebrew_zayin" value="3302">
      <type name="int"/>
    </constant>
    <constant name="hexagram" value="2778">
      <type name="int"/>
    </constant>
    <constant name="horizconnector" value="2211">
      <type name="int"/>
    </constant>
    <constant name="horizlinescan1" value="2543">
      <type name="int"/>
    </constant>
    <constant name="horizlinescan3" value="2544">
      <type name="int"/>
    </constant>
    <constant name="horizlinescan5" value="2545">
      <type name="int"/>
    </constant>
    <constant name="horizlinescan7" value="2546">
      <type name="int"/>
    </constant>
    <constant name="horizlinescan9" value="2547">
      <type name="int"/>
    </constant>
    <constant name="hstroke" value="689">
      <type name="int"/>
    </constant>
    <constant name="ht" value="2530">
      <type name="int"/>
    </constant>
    <constant name="hyphen" value="173">
      <type name="int"/>
    </constant>
    <constant name="i" value="105">
      <type name="int"/>
    </constant>
    <constant name="iacute" value="237">
      <type name="int"/>
    </constant>
    <constant name="ibelowdot" value="16785099">
      <type name="int"/>
    </constant>
    <constant name="ibreve" value="16777517">
      <type name="int"/>
    </constant>
    <constant name="icircumflex" value="238">
      <type name="int"/>
    </constant>
    <constant name="identical" value="2255">
      <type name="int"/>
    </constant>
    <constant name="idiaeresis" value="239">
      <type name="int"/>
    </constant>
    <constant name="idotless" value="697">
      <type name="int"/>
    </constant>
    <constant name="ifonlyif" value="2253">
      <type name="int"/>
    </constant>
    <constant name="igrave" value="236">
      <type name="int"/>
    </constant>
    <constant name="ihook" value="16785097">
      <type name="int"/>
    </constant>
    <constant name="imacron" value="1007">
      <type name="int"/>
    </constant>
    <constant name="implies" value="2254">
      <type name="int"/>
    </constant>
    <constant name="includedin" value="2266">
      <type name="int"/>
    </constant>
    <constant name="includes" value="2267">
      <type name="int"/>
    </constant>
    <constant name="infinity" value="2242">
      <type name="int"/>
    </constant>
    <function name="init" c:identifier="ibus_init">
      <doc xml:whitespace="preserve">Init the ibus types.
It is actually a wrapper of g_type_init().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <constant name="integral" value="2239">
      <type name="int"/>
    </constant>
    <constant name="intersection" value="2268">
      <type name="int"/>
    </constant>
    <constant name="iogonek" value="999">
      <type name="int"/>
    </constant>
    <constant name="itilde" value="949">
      <type name="int"/>
    </constant>
    <constant name="j" value="106">
      <type name="int"/>
    </constant>
    <constant name="jcircumflex" value="700">
      <type name="int"/>
    </constant>
    <constant name="jot" value="3018">
      <type name="int"/>
    </constant>
    <constant name="k" value="107">
      <type name="int"/>
    </constant>
    <constant name="kana_A" value="1201">
      <type name="int"/>
    </constant>
    <constant name="kana_CHI" value="1217">
      <type name="int"/>
    </constant>
    <constant name="kana_E" value="1204">
      <type name="int"/>
    </constant>
    <constant name="kana_FU" value="1228">
      <type name="int"/>
    </constant>
    <constant name="kana_HA" value="1226">
      <type name="int"/>
    </constant>
    <constant name="kana_HE" value="1229">
      <type name="int"/>
    </constant>
    <constant name="kana_HI" value="1227">
      <type name="int"/>
    </constant>
    <constant name="kana_HO" value="1230">
      <type name="int"/>
    </constant>
    <constant name="kana_HU" value="1228">
      <type name="int"/>
    </constant>
    <constant name="kana_I" value="1202">
      <type name="int"/>
    </constant>
    <constant name="kana_KA" value="1206">
      <type name="int"/>
    </constant>
    <constant name="kana_KE" value="1209">
      <type name="int"/>
    </constant>
    <constant name="kana_KI" value="1207">
      <type name="int"/>
    </constant>
    <constant name="kana_KO" value="1210">
      <type name="int"/>
    </constant>
    <constant name="kana_KU" value="1208">
      <type name="int"/>
    </constant>
    <constant name="kana_MA" value="1231">
      <type name="int"/>
    </constant>
    <constant name="kana_ME" value="1234">
      <type name="int"/>
    </constant>
    <constant name="kana_MI" value="1232">
      <type name="int"/>
    </constant>
    <constant name="kana_MO" value="1235">
      <type name="int"/>
    </constant>
    <constant name="kana_MU" value="1233">
      <type name="int"/>
    </constant>
    <constant name="kana_N" value="1245">
      <type name="int"/>
    </constant>
    <constant name="kana_NA" value="1221">
      <type name="int"/>
    </constant>
    <constant name="kana_NE" value="1224">
      <type name="int"/>
    </constant>
    <constant name="kana_NI" value="1222">
      <type name="int"/>
    </constant>
    <constant name="kana_NO" value="1225">
      <type name="int"/>
    </constant>
    <constant name="kana_NU" value="1223">
      <type name="int"/>
    </constant>
    <constant name="kana_O" value="1205">
      <type name="int"/>
    </constant>
    <constant name="kana_RA" value="1239">
      <type name="int"/>
    </constant>
    <constant name="kana_RE" value="1242">
      <type name="int"/>
    </constant>
    <constant name="kana_RI" value="1240">
      <type name="int"/>
    </constant>
    <constant name="kana_RO" value="1243">
      <type name="int"/>
    </constant>
    <constant name="kana_RU" value="1241">
      <type name="int"/>
    </constant>
    <constant name="kana_SA" value="1211">
      <type name="int"/>
    </constant>
    <constant name="kana_SE" value="1214">
      <type name="int"/>
    </constant>
    <constant name="kana_SHI" value="1212">
      <type name="int"/>
    </constant>
    <constant name="kana_SO" value="1215">
      <type name="int"/>
    </constant>
    <constant name="kana_SU" value="1213">
      <type name="int"/>
    </constant>
    <constant name="kana_TA" value="1216">
      <type name="int"/>
    </constant>
    <constant name="kana_TE" value="1219">
      <type name="int"/>
    </constant>
    <constant name="kana_TI" value="1217">
      <type name="int"/>
    </constant>
    <constant name="kana_TO" value="1220">
      <type name="int"/>
    </constant>
    <constant name="kana_TSU" value="1218">
      <type name="int"/>
    </constant>
    <constant name="kana_TU" value="1218">
      <type name="int"/>
    </constant>
    <constant name="kana_U" value="1203">
      <type name="int"/>
    </constant>
    <constant name="kana_WA" value="1244">
      <type name="int"/>
    </constant>
    <constant name="kana_WO" value="1190">
      <type name="int"/>
    </constant>
    <constant name="kana_YA" value="1236">
      <type name="int"/>
    </constant>
    <constant name="kana_YO" value="1238">
      <type name="int"/>
    </constant>
    <constant name="kana_YU" value="1237">
      <type name="int"/>
    </constant>
    <constant name="kana_a" value="1191">
      <type name="int"/>
    </constant>
    <constant name="kana_closingbracket" value="1187">
      <type name="int"/>
    </constant>
    <constant name="kana_comma" value="1188">
      <type name="int"/>
    </constant>
    <constant name="kana_conjunctive" value="1189">
      <type name="int"/>
    </constant>
    <constant name="kana_e" value="1194">
      <type name="int"/>
    </constant>
    <constant name="kana_fullstop" value="1185">
      <type name="int"/>
    </constant>
    <constant name="kana_i" value="1192">
      <type name="int"/>
    </constant>
    <constant name="kana_middledot" value="1189">
      <type name="int"/>
    </constant>
    <constant name="kana_o" value="1195">
      <type name="int"/>
    </constant>
    <constant name="kana_openingbracket" value="1186">
      <type name="int"/>
    </constant>
    <constant name="kana_switch" value="65406">
      <type name="int"/>
    </constant>
    <constant name="kana_tsu" value="1199">
      <type name="int"/>
    </constant>
    <constant name="kana_tu" value="1199">
      <type name="int"/>
    </constant>
    <constant name="kana_u" value="1193">
      <type name="int"/>
    </constant>
    <constant name="kana_ya" value="1196">
      <type name="int"/>
    </constant>
    <constant name="kana_yo" value="1198">
      <type name="int"/>
    </constant>
    <constant name="kana_yu" value="1197">
      <type name="int"/>
    </constant>
    <constant name="kappa" value="930">
      <type name="int"/>
    </constant>
    <constant name="kcedilla" value="1011">
      <type name="int"/>
    </constant>
    <function name="key_event_from_string"
              c:identifier="ibus_key_event_from_string">
      <doc xml:whitespace="preserve">Parse key event string and return key symbol and modifiers.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE for succeed; FALSE if failed.</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <doc xml:whitespace="preserve">Key event string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="keyval"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">Variable that hold key symbol result.</doc>
          <type name="uint" c:type="guint*"/>
        </parameter>
        <parameter name="modifiers"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">Variable that hold modifiers result.</doc>
          <type name="uint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="key_event_to_string"
              c:identifier="ibus_key_event_to_string">
      <doc xml:whitespace="preserve">Return the name of a key symbol and modifiers.
For example, if press ctrl, shift, and enter, then this function returns:
Shift+Control+enter.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The name of a key symbol and modifier.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:whitespace="preserve">Key symbol.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <doc xml:whitespace="preserve">Modifiers such as Ctrl or Shift.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_from_name" c:identifier="ibus_keyval_from_name">
      <doc xml:whitespace="preserve">Return the key symbol that associate with the key name.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">Corresponding key symbol.</doc>
        <type name="uint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="keyval_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">Key name in #gdk_keys_by_name.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_name" c:identifier="ibus_keyval_name">
      <doc xml:whitespace="preserve">Return the name of a key symbol.
Note that the returned string is used internally, so don't free it.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">Corresponding key name. %NULL if no such key symbol.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:whitespace="preserve">Key symbol.</doc>
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <constant name="kra" value="930">
      <type name="int"/>
    </constant>
    <constant name="l" value="108">
      <type name="int"/>
    </constant>
    <constant name="lacute" value="485">
      <type name="int"/>
    </constant>
    <constant name="latincross" value="2777">
      <type name="int"/>
    </constant>
    <constant name="lbelowdot" value="16784951">
      <type name="int"/>
    </constant>
    <constant name="lcaron" value="437">
      <type name="int"/>
    </constant>
    <constant name="lcedilla" value="950">
      <type name="int"/>
    </constant>
    <constant name="leftanglebracket" value="2748">
      <type name="int"/>
    </constant>
    <constant name="leftarrow" value="2299">
      <type name="int"/>
    </constant>
    <constant name="leftcaret" value="2979">
      <type name="int"/>
    </constant>
    <constant name="leftdoublequotemark" value="2770">
      <type name="int"/>
    </constant>
    <constant name="leftmiddlecurlybrace" value="2223">
      <type name="int"/>
    </constant>
    <constant name="leftopentriangle" value="2764">
      <type name="int"/>
    </constant>
    <constant name="leftpointer" value="2794">
      <type name="int"/>
    </constant>
    <constant name="leftradical" value="2209">
      <type name="int"/>
    </constant>
    <constant name="leftshoe" value="3034">
      <type name="int"/>
    </constant>
    <constant name="leftsinglequotemark" value="2768">
      <type name="int"/>
    </constant>
    <constant name="leftt" value="2548">
      <type name="int"/>
    </constant>
    <constant name="lefttack" value="3036">
      <type name="int"/>
    </constant>
    <constant name="less" value="60">
      <type name="int"/>
    </constant>
    <constant name="lessthanequal" value="2236">
      <type name="int"/>
    </constant>
    <constant name="lf" value="2533">
      <type name="int"/>
    </constant>
    <constant name="logicaland" value="2270">
      <type name="int"/>
    </constant>
    <constant name="logicalor" value="2271">
      <type name="int"/>
    </constant>
    <constant name="lowleftcorner" value="2541">
      <type name="int"/>
    </constant>
    <constant name="lowrightcorner" value="2538">
      <type name="int"/>
    </constant>
    <constant name="lstroke" value="435">
      <type name="int"/>
    </constant>
    <constant name="m" value="109">
      <type name="int"/>
    </constant>
    <constant name="mabovedot" value="16784961">
      <type name="int"/>
    </constant>
    <constant name="macron" value="175">
      <type name="int"/>
    </constant>
    <function name="main" c:identifier="ibus_main">
      <doc xml:whitespace="preserve">Runs an IBus main loop until ibus_quit() is called in the loop.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="mainloop_setup" c:identifier="ibus_mainloop_setup">
      <doc xml:whitespace="preserve">Sets the watch and timeout functions of a #DBusConnection
and #DBusServer to integrate the connection with the GLib main loop.
Parameter @user_data should be in type #GMainContext.
It will be passed to both callback functions,
however, normally %NULL is sufficient.
If called twice for the same user_data, does nothing the second
time. If called once with user_data A and once with user_data B,
user_data B replaces user_data A as the context monitoring the
connection.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection_func"
                   transfer-ownership="none"
                   scope="call">
          <doc xml:whitespace="preserve">A DBus connection setup function.</doc>
          <type name="DBusConnectionSetupFunc"
                c:type="DBusConnectionSetupFunc"/>
        </parameter>
        <parameter name="server_func"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:whitespace="preserve">A prototype of DBus server setup function.</doc>
          <type name="DBusServerSetupFunc" c:type="DBusServerSetupFunc"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:whitespace="preserve">User data to be passed to callback function.</doc>
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <constant name="malesymbol" value="2807">
      <type name="int"/>
    </constant>
    <constant name="maltesecross" value="2800">
      <type name="int"/>
    </constant>
    <constant name="marker" value="2751">
      <type name="int"/>
    </constant>
    <constant name="masculine" value="186">
      <type name="int"/>
    </constant>
    <function name="message_get_type" c:identifier="ibus_message_get_type">
      <doc xml:whitespace="preserve">Gets the type of an IBusMessage.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">Type of the IBusMessage.</doc>
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:whitespace="preserve">An IBusMessage.</doc>
          <type name="Message" c:type="IBusMessage*"/>
        </parameter>
      </parameters>
    </function>
    <constant name="minus" value="45">
      <type name="int"/>
    </constant>
    <constant name="minutes" value="2774">
      <type name="int"/>
    </constant>
    <constant name="mu" value="181">
      <type name="int"/>
    </constant>
    <constant name="multiply" value="215">
      <type name="int"/>
    </constant>
    <constant name="musicalflat" value="2806">
      <type name="int"/>
    </constant>
    <constant name="musicalsharp" value="2805">
      <type name="int"/>
    </constant>
    <constant name="n" value="110">
      <type name="int"/>
    </constant>
    <constant name="nabla" value="2245">
      <type name="int"/>
    </constant>
    <constant name="nacute" value="497">
      <type name="int"/>
    </constant>
    <constant name="ncaron" value="498">
      <type name="int"/>
    </constant>
    <constant name="ncedilla" value="1009">
      <type name="int"/>
    </constant>
    <constant name="ninesubscript" value="16785545">
      <type name="int"/>
    </constant>
    <constant name="ninesuperior" value="16785529">
      <type name="int"/>
    </constant>
    <constant name="nl" value="2536">
      <type name="int"/>
    </constant>
    <constant name="nobreakspace" value="160">
      <type name="int"/>
    </constant>
    <constant name="notapproxeq" value="16785991">
      <type name="int"/>
    </constant>
    <constant name="notelementof" value="16785929">
      <type name="int"/>
    </constant>
    <constant name="notequal" value="2237">
      <type name="int"/>
    </constant>
    <constant name="notidentical" value="16786018">
      <type name="int"/>
    </constant>
    <constant name="notsign" value="172">
      <type name="int"/>
    </constant>
    <constant name="ntilde" value="241">
      <type name="int"/>
    </constant>
    <constant name="numbersign" value="35">
      <type name="int"/>
    </constant>
    <constant name="numerosign" value="1712">
      <type name="int"/>
    </constant>
    <constant name="o" value="111">
      <type name="int"/>
    </constant>
    <constant name="oacute" value="243">
      <type name="int"/>
    </constant>
    <constant name="obarred" value="16777845">
      <type name="int"/>
    </constant>
    <constant name="obelowdot" value="16785101">
      <type name="int"/>
    </constant>
    <constant name="ocaron" value="16777682">
      <type name="int"/>
    </constant>
    <constant name="ocircumflex" value="244">
      <type name="int"/>
    </constant>
    <constant name="ocircumflexacute" value="16785105">
      <type name="int"/>
    </constant>
    <constant name="ocircumflexbelowdot" value="16785113">
      <type name="int"/>
    </constant>
    <constant name="ocircumflexgrave" value="16785107">
      <type name="int"/>
    </constant>
    <constant name="ocircumflexhook" value="16785109">
      <type name="int"/>
    </constant>
    <constant name="ocircumflextilde" value="16785111">
      <type name="int"/>
    </constant>
    <constant name="odiaeresis" value="246">
      <type name="int"/>
    </constant>
    <constant name="odoubleacute" value="501">
      <type name="int"/>
    </constant>
    <constant name="oe" value="5053">
      <type name="int"/>
    </constant>
    <constant name="ogonek" value="434">
      <type name="int"/>
    </constant>
    <constant name="ograve" value="242">
      <type name="int"/>
    </constant>
    <constant name="ohook" value="16785103">
      <type name="int"/>
    </constant>
    <constant name="ohorn" value="16777633">
      <type name="int"/>
    </constant>
    <constant name="ohornacute" value="16785115">
      <type name="int"/>
    </constant>
    <constant name="ohornbelowdot" value="16785123">
      <type name="int"/>
    </constant>
    <constant name="ohorngrave" value="16785117">
      <type name="int"/>
    </constant>
    <constant name="ohornhook" value="16785119">
      <type name="int"/>
    </constant>
    <constant name="ohorntilde" value="16785121">
      <type name="int"/>
    </constant>
    <constant name="omacron" value="1010">
      <type name="int"/>
    </constant>
    <constant name="oneeighth" value="2755">
      <type name="int"/>
    </constant>
    <constant name="onefifth" value="2738">
      <type name="int"/>
    </constant>
    <constant name="onehalf" value="189">
      <type name="int"/>
    </constant>
    <constant name="onequarter" value="188">
      <type name="int"/>
    </constant>
    <constant name="onesixth" value="2742">
      <type name="int"/>
    </constant>
    <constant name="onesubscript" value="16785537">
      <type name="int"/>
    </constant>
    <constant name="onesuperior" value="185">
      <type name="int"/>
    </constant>
    <constant name="onethird" value="2736">
      <type name="int"/>
    </constant>
    <constant name="ooblique" value="248">
      <type name="int"/>
    </constant>
    <constant name="openrectbullet" value="2786">
      <type name="int"/>
    </constant>
    <constant name="openstar" value="2789">
      <type name="int"/>
    </constant>
    <constant name="opentribulletdown" value="2788">
      <type name="int"/>
    </constant>
    <constant name="opentribulletup" value="2787">
      <type name="int"/>
    </constant>
    <constant name="ordfeminine" value="170">
      <type name="int"/>
    </constant>
    <constant name="oslash" value="248">
      <type name="int"/>
    </constant>
    <constant name="otilde" value="245">
      <type name="int"/>
    </constant>
    <constant name="overbar" value="3008">
      <type name="int"/>
    </constant>
    <constant name="overline" value="1150">
      <type name="int"/>
    </constant>
    <constant name="p" value="112">
      <type name="int"/>
    </constant>
    <constant name="pabovedot" value="16784983">
      <type name="int"/>
    </constant>
    <constant name="paragraph" value="182">
      <type name="int"/>
    </constant>
    <constant name="parenleft" value="40">
      <type name="int"/>
    </constant>
    <constant name="parenright" value="41">
      <type name="int"/>
    </constant>
    <constant name="partdifferential" value="16785922">
      <type name="int"/>
    </constant>
    <constant name="partialderivative" value="2287">
      <type name="int"/>
    </constant>
    <function name="pending_call_allocate_data_slot"
              c:identifier="ibus_pending_call_allocate_data_slot">
      <doc xml:whitespace="preserve">Allocates an integer ID to be used for storing application-specific data on any IBusPendingCall.
The allocated ID may then be used with ibus_pending_call_set_data() and ibus_pending_call_get_data().
The passed-in slot must be initialized to -1, and is filled in with the slot ID.
If the passed-in slot is not -1, it's assumed to be already allocated, and
its reference count is increased.
The allocated slot is global, i.e. all DBusPendingCall objects
will have a slot with the given integer ID reserved.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if succeed; FALSE if insufficient memory.</doc>
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="slot_p"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">Address of a global variable storing the slot.</doc>
          <type name="int" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pending_call_free_data_slot"
              c:identifier="ibus_pending_call_free_data_slot">
      <doc xml:whitespace="preserve">Deallocates a global ID for IBusPendingCall data slots.
ibus_pending_call_get_data() and ibus_pending_call_set_data() may no longer be used with this slot.
Existing data stored on existing IBusPendingCall objects will be freed when
the IBusPendingCall is finalized, but may not be retrieved
(and may only be replaced if someone else reallocates the slot).
When the reference count on the passed-in slot reaches 0, it is set to -1.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="slot_p"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">Address of a global variable storing the slot.</doc>
          <type name="int" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <constant name="percent" value="37">
      <type name="int"/>
    </constant>
    <constant name="period" value="46">
      <type name="int"/>
    </constant>
    <constant name="periodcentered" value="183">
      <type name="int"/>
    </constant>
    <constant name="phonographcopyright" value="2811">
      <type name="int"/>
    </constant>
    <constant name="plus" value="43">
      <type name="int"/>
    </constant>
    <constant name="plusminus" value="177">
      <type name="int"/>
    </constant>
    <constant name="prescription" value="2772">
      <type name="int"/>
    </constant>
    <constant name="prolongedsound" value="1200">
      <type name="int"/>
    </constant>
    <constant name="punctspace" value="2726">
      <type name="int"/>
    </constant>
    <constant name="q" value="113">
      <type name="int"/>
    </constant>
    <constant name="quad" value="3020">
      <type name="int"/>
    </constant>
    <constant name="question" value="63">
      <type name="int"/>
    </constant>
    <constant name="questiondown" value="191">
      <type name="int"/>
    </constant>
    <function name="quit" c:identifier="ibus_quit">
      <doc xml:whitespace="preserve">Stops an IBus from running.
Any calls to ibus_quit() for the loop will return.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <constant name="quotedbl" value="34">
      <type name="int"/>
    </constant>
    <constant name="quoteleft" value="96">
      <type name="int"/>
    </constant>
    <constant name="quoteright" value="39">
      <type name="int"/>
    </constant>
    <constant name="r" value="114">
      <type name="int"/>
    </constant>
    <constant name="racute" value="480">
      <type name="int"/>
    </constant>
    <constant name="radical" value="2262">
      <type name="int"/>
    </constant>
    <constant name="rcaron" value="504">
      <type name="int"/>
    </constant>
    <constant name="rcedilla" value="947">
      <type name="int"/>
    </constant>
    <constant name="registered" value="174">
      <type name="int"/>
    </constant>
    <constant name="rightanglebracket" value="2750">
      <type name="int"/>
    </constant>
    <constant name="rightarrow" value="2301">
      <type name="int"/>
    </constant>
    <constant name="rightcaret" value="2982">
      <type name="int"/>
    </constant>
    <constant name="rightdoublequotemark" value="2771">
      <type name="int"/>
    </constant>
    <constant name="rightmiddlecurlybrace" value="2224">
      <type name="int"/>
    </constant>
    <constant name="rightmiddlesummation" value="2231">
      <type name="int"/>
    </constant>
    <constant name="rightopentriangle" value="2765">
      <type name="int"/>
    </constant>
    <constant name="rightpointer" value="2795">
      <type name="int"/>
    </constant>
    <constant name="rightshoe" value="3032">
      <type name="int"/>
    </constant>
    <constant name="rightsinglequotemark" value="2769">
      <type name="int"/>
    </constant>
    <constant name="rightt" value="2549">
      <type name="int"/>
    </constant>
    <constant name="righttack" value="3068">
      <type name="int"/>
    </constant>
    <constant name="s" value="115">
      <type name="int"/>
    </constant>
    <constant name="sabovedot" value="16784993">
      <type name="int"/>
    </constant>
    <constant name="sacute" value="438">
      <type name="int"/>
    </constant>
    <constant name="scaron" value="441">
      <type name="int"/>
    </constant>
    <constant name="scedilla" value="442">
      <type name="int"/>
    </constant>
    <constant name="schwa" value="16777817">
      <type name="int"/>
    </constant>
    <constant name="scircumflex" value="766">
      <type name="int"/>
    </constant>
    <constant name="script_switch" value="65406">
      <type name="int"/>
    </constant>
    <constant name="seconds" value="2775">
      <type name="int"/>
    </constant>
    <constant name="section" value="167">
      <type name="int"/>
    </constant>
    <constant name="semicolon" value="59">
      <type name="int"/>
    </constant>
    <constant name="semivoicedsound" value="1247">
      <type name="int"/>
    </constant>
    <function name="set_display" c:identifier="ibus_set_display">
      <doc xml:whitespace="preserve">Set the display address.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">Display address, as in DISPLAY environment for X.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_log_handler" c:identifier="ibus_set_log_handler">
      <doc xml:whitespace="preserve">Sets GLIB's log handler to ours. Our log handler adds time info
including hour, minute, second, and microsecond, like:
(ibus-daemon:7088): IBUS-DEBUG: 18:06:45.822819: ibus-daemon started
If @verbose is TRUE, all levels of messages will be logged. Otherwise,
DEBUG and WARNING messages will be ignored.  The function is used in
ibus-daemon, but can be useful for IBus client programs as well for
debugging. It's totally fine for not calling this function. If you
don't set a custom GLIB log handler, the default GLIB log handler will
be used.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="verbose" transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE for verbose logging.</doc>
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <constant name="seveneighths" value="2758">
      <type name="int"/>
    </constant>
    <constant name="sevensubscript" value="16785543">
      <type name="int"/>
    </constant>
    <constant name="sevensuperior" value="16785527">
      <type name="int"/>
    </constant>
    <constant name="signaturemark" value="2762">
      <type name="int"/>
    </constant>
    <constant name="signifblank" value="2732">
      <type name="int"/>
    </constant>
    <constant name="similarequal" value="2249">
      <type name="int"/>
    </constant>
    <constant name="singlelowquotemark" value="2813">
      <type name="int"/>
    </constant>
    <constant name="sixsubscript" value="16785542">
      <type name="int"/>
    </constant>
    <constant name="sixsuperior" value="16785526">
      <type name="int"/>
    </constant>
    <constant name="slash" value="47">
      <type name="int"/>
    </constant>
    <constant name="soliddiamond" value="2528">
      <type name="int"/>
    </constant>
    <constant name="space" value="32">
      <type name="int"/>
    </constant>
    <constant name="squareroot" value="16785946">
      <type name="int"/>
    </constant>
    <constant name="ssharp" value="223">
      <type name="int"/>
    </constant>
    <constant name="sterling" value="163">
      <type name="int"/>
    </constant>
    <constant name="stricteq" value="16786019">
      <type name="int"/>
    </constant>
    <constant name="t" value="116">
      <type name="int"/>
    </constant>
    <constant name="tabovedot" value="16785003">
      <type name="int"/>
    </constant>
    <constant name="tcaron" value="443">
      <type name="int"/>
    </constant>
    <constant name="tcedilla" value="510">
      <type name="int"/>
    </constant>
    <constant name="telephone" value="2809">
      <type name="int"/>
    </constant>
    <constant name="telephonerecorder" value="2810">
      <type name="int"/>
    </constant>
    <constant name="therefore" value="2240">
      <type name="int"/>
    </constant>
    <constant name="thinspace" value="2727">
      <type name="int"/>
    </constant>
    <constant name="thorn" value="254">
      <type name="int"/>
    </constant>
    <constant name="threeeighths" value="2756">
      <type name="int"/>
    </constant>
    <constant name="threefifths" value="2740">
      <type name="int"/>
    </constant>
    <constant name="threequarters" value="190">
      <type name="int"/>
    </constant>
    <constant name="threesubscript" value="16785539">
      <type name="int"/>
    </constant>
    <constant name="threesuperior" value="179">
      <type name="int"/>
    </constant>
    <constant name="tintegral" value="16785965">
      <type name="int"/>
    </constant>
    <constant name="topintegral" value="2212">
      <type name="int"/>
    </constant>
    <constant name="topleftparens" value="2219">
      <type name="int"/>
    </constant>
    <constant name="topleftradical" value="2210">
      <type name="int"/>
    </constant>
    <constant name="topleftsqbracket" value="2215">
      <type name="int"/>
    </constant>
    <constant name="topleftsummation" value="2225">
      <type name="int"/>
    </constant>
    <constant name="toprightparens" value="2221">
      <type name="int"/>
    </constant>
    <constant name="toprightsqbracket" value="2217">
      <type name="int"/>
    </constant>
    <constant name="toprightsummation" value="2229">
      <type name="int"/>
    </constant>
    <constant name="topt" value="2551">
      <type name="int"/>
    </constant>
    <constant name="topvertsummationconnector" value="2227">
      <type name="int"/>
    </constant>
    <constant name="trademark" value="2761">
      <type name="int"/>
    </constant>
    <constant name="trademarkincircle" value="2763">
      <type name="int"/>
    </constant>
    <constant name="tslash" value="956">
      <type name="int"/>
    </constant>
    <constant name="twofifths" value="2739">
      <type name="int"/>
    </constant>
    <constant name="twosubscript" value="16785538">
      <type name="int"/>
    </constant>
    <constant name="twosuperior" value="178">
      <type name="int"/>
    </constant>
    <constant name="twothirds" value="2737">
      <type name="int"/>
    </constant>
    <function name="type_get_array" c:identifier="ibus_type_get_array">
      <doc xml:whitespace="preserve">Gets the type of IBusArray.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">Type of IBusArray.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="type_get_dict_entry"
              c:identifier="ibus_type_get_dict_entry">
      <doc xml:whitespace="preserve">Gets the type of IBusDictEntry.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">Type of IBusDictEntry.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="type_get_object_path"
              c:identifier="ibus_type_get_object_path">
      <doc xml:whitespace="preserve">Gets the type of object path.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">Type of object path.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="type_get_struct" c:identifier="ibus_type_get_struct">
      <doc xml:whitespace="preserve">Gets the type of IBusStruct.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">Type of IBusStruct.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="type_get_variant" c:identifier="ibus_type_get_variant">
      <doc xml:whitespace="preserve">Gets the type of IBusVariant.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">Type of IBusVariant.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <constant name="u" value="117">
      <type name="int"/>
    </constant>
    <constant name="uacute" value="250">
      <type name="int"/>
    </constant>
    <constant name="ubelowdot" value="16785125">
      <type name="int"/>
    </constant>
    <constant name="ubreve" value="765">
      <type name="int"/>
    </constant>
    <constant name="ucircumflex" value="251">
      <type name="int"/>
    </constant>
    <constant name="udiaeresis" value="252">
      <type name="int"/>
    </constant>
    <constant name="udoubleacute" value="507">
      <type name="int"/>
    </constant>
    <constant name="ugrave" value="249">
      <type name="int"/>
    </constant>
    <constant name="uhook" value="16785127">
      <type name="int"/>
    </constant>
    <constant name="uhorn" value="16777648">
      <type name="int"/>
    </constant>
    <constant name="uhornacute" value="16785129">
      <type name="int"/>
    </constant>
    <constant name="uhornbelowdot" value="16785137">
      <type name="int"/>
    </constant>
    <constant name="uhorngrave" value="16785131">
      <type name="int"/>
    </constant>
    <constant name="uhornhook" value="16785133">
      <type name="int"/>
    </constant>
    <constant name="uhorntilde" value="16785135">
      <type name="int"/>
    </constant>
    <constant name="umacron" value="1022">
      <type name="int"/>
    </constant>
    <constant name="underbar" value="3014">
      <type name="int"/>
    </constant>
    <constant name="underscore" value="95">
      <type name="int"/>
    </constant>
    <constant name="union" value="2269">
      <type name="int"/>
    </constant>
    <constant name="uogonek" value="1017">
      <type name="int"/>
    </constant>
    <constant name="uparrow" value="2300">
      <type name="int"/>
    </constant>
    <constant name="upcaret" value="2985">
      <type name="int"/>
    </constant>
    <constant name="upleftcorner" value="2540">
      <type name="int"/>
    </constant>
    <constant name="uprightcorner" value="2539">
      <type name="int"/>
    </constant>
    <constant name="upshoe" value="3011">
      <type name="int"/>
    </constant>
    <constant name="upstile" value="3027">
      <type name="int"/>
    </constant>
    <constant name="uptack" value="3022">
      <type name="int"/>
    </constant>
    <constant name="uring" value="505">
      <type name="int"/>
    </constant>
    <constant name="utilde" value="1021">
      <type name="int"/>
    </constant>
    <constant name="v" value="118">
      <type name="int"/>
    </constant>
    <constant name="variation" value="2241">
      <type name="int"/>
    </constant>
    <constant name="vertbar" value="2552">
      <type name="int"/>
    </constant>
    <constant name="vertconnector" value="2214">
      <type name="int"/>
    </constant>
    <constant name="voicedsound" value="1246">
      <type name="int"/>
    </constant>
    <constant name="vt" value="2537">
      <type name="int"/>
    </constant>
    <constant name="w" value="119">
      <type name="int"/>
    </constant>
    <constant name="wacute" value="16785027">
      <type name="int"/>
    </constant>
    <constant name="wcircumflex" value="16777589">
      <type name="int"/>
    </constant>
    <constant name="wdiaeresis" value="16785029">
      <type name="int"/>
    </constant>
    <constant name="wgrave" value="16785025">
      <type name="int"/>
    </constant>
    <function name="write_address" c:identifier="ibus_write_address">
      <doc xml:whitespace="preserve">Write D-Bus address to socket file.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="address" transfer-ownership="none">
          <doc xml:whitespace="preserve">D-Bus address of IBus.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <constant name="x" value="120">
      <type name="int"/>
    </constant>
    <constant name="xabovedot" value="16785035">
      <type name="int"/>
    </constant>
    <function name="xml_free" c:identifier="ibus_xml_free">
      <doc xml:whitespace="preserve">Free an XML tree.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <doc xml:whitespace="preserve">Root node of an XML tree.</doc>
          <type name="XMLNode" c:type="XMLNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_output" c:identifier="ibus_xml_output">
      <doc xml:whitespace="preserve">Output an XML tree to a GString.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <doc xml:whitespace="preserve">Root node of an XML tree.</doc>
          <type name="XMLNode" c:type="XMLNode*"/>
        </parameter>
        <parameter name="output" transfer-ownership="none">
          <doc xml:whitespace="preserve">GString which stores the output.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_parse_buffer" c:identifier="ibus_xml_parse_buffer">
      <doc xml:whitespace="preserve">Parse a string buffer which contains an XML-formatted string,
and return a corresponding XML tree.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">Root node of parsed XML tree.</doc>
        <type name="XMLNode" c:type="XMLNode*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:whitespace="preserve">Buffer to be parsed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_parse_file" c:identifier="ibus_xml_parse_file">
      <doc xml:whitespace="preserve">Parse an XML file and return a corresponding XML tree.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">Root node of parsed XML tree.</doc>
        <type name="XMLNode" c:type="XMLNode*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:whitespace="preserve">File name to be parsed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <constant name="y" value="121">
      <type name="int"/>
    </constant>
    <constant name="yacute" value="253">
      <type name="int"/>
    </constant>
    <constant name="ybelowdot" value="16785141">
      <type name="int"/>
    </constant>
    <constant name="ycircumflex" value="16777591">
      <type name="int"/>
    </constant>
    <constant name="ydiaeresis" value="255">
      <type name="int"/>
    </constant>
    <constant name="yen" value="165">
      <type name="int"/>
    </constant>
    <constant name="ygrave" value="16785139">
      <type name="int"/>
    </constant>
    <constant name="yhook" value="16785143">
      <type name="int"/>
    </constant>
    <constant name="ytilde" value="16785145">
      <type name="int"/>
    </constant>
    <constant name="z" value="122">
      <type name="int"/>
    </constant>
    <constant name="zabovedot" value="447">
      <type name="int"/>
    </constant>
    <constant name="zacute" value="444">
      <type name="int"/>
    </constant>
    <constant name="zcaron" value="446">
      <type name="int"/>
    </constant>
    <constant name="zerosubscript" value="16785536">
      <type name="int"/>
    </constant>
    <constant name="zerosuperior" value="16785520">
      <type name="int"/>
    </constant>
    <constant name="zstroke" value="16777654">
      <type name="int"/>
    </constant>
  </namespace>
</repository>
